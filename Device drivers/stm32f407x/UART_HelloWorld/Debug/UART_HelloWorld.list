
UART_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009240  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080093c8  080093c8  000193c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093f4  080093f4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080093f4  080093f4  000193f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093fc  080093fc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093fc  080093fc  000193fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009400  08009400  00019400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000a60  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae0  20000ae0  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000160b9  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b1e  00000000  00000000  000361ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012c0  00000000  00000000  00039cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e50  00000000  00000000  0003af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000242d1  00000000  00000000  0003bde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a18d  00000000  00000000  000600b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd430  00000000  00000000  0007a23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005188  00000000  00000000  00147670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  0014c7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080093b0 	.word	0x080093b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	080093b0 	.word	0x080093b0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
  * @retval int
  */
char *user_data = "Hello World\r\n";

int main(void)
{
 80004d4:	b598      	push	{r3, r4, r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fc98 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f822 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f94a 	bl	8000778 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e4:	f000 f888 	bl	80005f8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e8:	f000 f8b4 	bl	8000654 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004ec:	f000 f8e2 	bl	80006b4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004f0:	f008 fb08 	bl	8008b04 <MX_USB_HOST_Init>
  MX_USART2_Init();
 80004f4:	f000 f914 	bl	8000720 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */


  HAL_USART_Transmit(&husart2, (uint8_t*)user_data, strlen(user_data), HAL_MAX_DELAY);
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <main+0x48>)
 80004fa:	681c      	ldr	r4, [r3, #0]
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <main+0x48>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fe61 	bl	80001c8 <strlen>
 8000506:	4603      	mov	r3, r0
 8000508:	b29a      	uxth	r2, r3
 800050a:	f04f 33ff 	mov.w	r3, #4294967295
 800050e:	4621      	mov	r1, r4
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <main+0x4c>)
 8000512:	f004 fd7b 	bl	800500c <HAL_USART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000516:	f008 fb1b 	bl	8008b50 <MX_USB_HOST_Process>
 800051a:	e7fc      	b.n	8000516 <main+0x42>
 800051c:	20000000 	.word	0x20000000
 8000520:	20000190 	.word	0x20000190

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f008 feac 	bl	8009290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <SystemClock_Config+0xd0>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000594:	2308      	movs	r3, #8
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000598:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a2:	2307      	movs	r3, #7
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 fe8a 	bl	80042c4 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005b6:	f000 f9dd 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2302      	movs	r3, #2
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2105      	movs	r1, #5
 80005d8:	4618      	mov	r0, r3
 80005da:	f004 f8eb 	bl	80047b4 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e4:	f000 f9c6 	bl	8000974 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	; 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_I2C1_Init+0x50>)
 80005fe:	4a13      	ldr	r2, [pc, #76]	; (800064c <MX_I2C1_Init+0x54>)
 8000600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_I2C1_Init+0x50>)
 8000604:	4a12      	ldr	r2, [pc, #72]	; (8000650 <MX_I2C1_Init+0x58>)
 8000606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_I2C1_Init+0x50>)
 8000616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_I2C1_Init+0x50>)
 8000636:	f003 f861 	bl	80036fc <HAL_I2C_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000640:	f000 f998 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000009c 	.word	0x2000009c
 800064c:	40005400 	.word	0x40005400
 8000650:	000186a0 	.word	0x000186a0

08000654 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_I2S3_Init+0x54>)
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <MX_I2S3_Init+0x58>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000664:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_I2S3_Init+0x54>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000678:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_I2S3_Init+0x54>)
 800067c:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <MX_I2S3_Init+0x5c>)
 800067e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_I2S3_Init+0x54>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_I2S3_Init+0x54>)
 8000694:	f003 f976 	bl	8003984 <HAL_I2S_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800069e:	f000 f969 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000f0 	.word	0x200000f0
 80006ac:	40003c00 	.word	0x40003c00
 80006b0:	00017700 	.word	0x00017700

080006b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_SPI1_Init+0x64>)
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <MX_SPI1_Init+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_SPI1_Init+0x64>)
 8000700:	220a      	movs	r2, #10
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_SPI1_Init+0x64>)
 8000706:	f004 fbb7 	bl	8004e78 <HAL_SPI_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000710:	f000 f930 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000138 	.word	0x20000138
 800071c:	40013000 	.word	0x40013000

08000720 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_USART2_Init+0x50>)
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <MX_USART2_Init+0x54>)
 8000728:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART2_Init+0x50>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USART2_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_USART2_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART2_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_USART2_Init+0x50>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART2_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_USART2_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART2_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_USART2_Init+0x50>)
 800075e:	f004 fc14 	bl	8004f8a <HAL_USART_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8000768:	f000 f904 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000190 	.word	0x20000190
 8000774:	40004400 	.word	0x40004400

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	4b72      	ldr	r3, [pc, #456]	; (800095c <MX_GPIO_Init+0x1e4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a71      	ldr	r2, [pc, #452]	; (800095c <MX_GPIO_Init+0x1e4>)
 8000798:	f043 0310 	orr.w	r3, r3, #16
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b6f      	ldr	r3, [pc, #444]	; (800095c <MX_GPIO_Init+0x1e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0310 	and.w	r3, r3, #16
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	4b6b      	ldr	r3, [pc, #428]	; (800095c <MX_GPIO_Init+0x1e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a6a      	ldr	r2, [pc, #424]	; (800095c <MX_GPIO_Init+0x1e4>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b68      	ldr	r3, [pc, #416]	; (800095c <MX_GPIO_Init+0x1e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b64      	ldr	r3, [pc, #400]	; (800095c <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a63      	ldr	r2, [pc, #396]	; (800095c <MX_GPIO_Init+0x1e4>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b61      	ldr	r3, [pc, #388]	; (800095c <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b5d      	ldr	r3, [pc, #372]	; (800095c <MX_GPIO_Init+0x1e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a5c      	ldr	r2, [pc, #368]	; (800095c <MX_GPIO_Init+0x1e4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b5a      	ldr	r3, [pc, #360]	; (800095c <MX_GPIO_Init+0x1e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b56      	ldr	r3, [pc, #344]	; (800095c <MX_GPIO_Init+0x1e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a55      	ldr	r2, [pc, #340]	; (800095c <MX_GPIO_Init+0x1e4>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b53      	ldr	r3, [pc, #332]	; (800095c <MX_GPIO_Init+0x1e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b4f      	ldr	r3, [pc, #316]	; (800095c <MX_GPIO_Init+0x1e4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a4e      	ldr	r2, [pc, #312]	; (800095c <MX_GPIO_Init+0x1e4>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b4c      	ldr	r3, [pc, #304]	; (800095c <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2108      	movs	r1, #8
 800083a:	4849      	ldr	r0, [pc, #292]	; (8000960 <MX_GPIO_Init+0x1e8>)
 800083c:	f000 fe2a 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2101      	movs	r1, #1
 8000844:	4847      	ldr	r0, [pc, #284]	; (8000964 <MX_GPIO_Init+0x1ec>)
 8000846:	f000 fe25 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800084a:	2200      	movs	r2, #0
 800084c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000850:	4845      	ldr	r0, [pc, #276]	; (8000968 <MX_GPIO_Init+0x1f0>)
 8000852:	f000 fe1f 	bl	8001494 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000856:	2308      	movs	r3, #8
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	483c      	ldr	r0, [pc, #240]	; (8000960 <MX_GPIO_Init+0x1e8>)
 800086e:	f000 fc75 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4836      	ldr	r0, [pc, #216]	; (8000964 <MX_GPIO_Init+0x1ec>)
 800088a:	f000 fc67 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800088e:	2308      	movs	r3, #8
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089e:	2305      	movs	r3, #5
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	482e      	ldr	r0, [pc, #184]	; (8000964 <MX_GPIO_Init+0x1ec>)
 80008aa:	f000 fc57 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	482a      	ldr	r0, [pc, #168]	; (800096c <MX_GPIO_Init+0x1f4>)
 80008c4:	f000 fc4a 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c8:	2304      	movs	r3, #4
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4825      	ldr	r0, [pc, #148]	; (8000970 <MX_GPIO_Init+0x1f8>)
 80008dc:	f000 fc3e 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f2:	2305      	movs	r3, #5
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	481c      	ldr	r0, [pc, #112]	; (8000970 <MX_GPIO_Init+0x1f8>)
 80008fe:	f000 fc2d 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000902:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000906:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4813      	ldr	r0, [pc, #76]	; (8000968 <MX_GPIO_Init+0x1f0>)
 800091c:	f000 fc1e 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000920:	2320      	movs	r3, #32
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_GPIO_Init+0x1f0>)
 8000934:	f000 fc12 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000938:	2302      	movs	r3, #2
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800093c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_GPIO_Init+0x1e8>)
 800094e:	f000 fc05 	bl	800115c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000952:	bf00      	nop
 8000954:	3730      	adds	r7, #48	; 0x30
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40021000 	.word	0x40021000
 8000964:	40020800 	.word	0x40020800
 8000968:	40020c00 	.word	0x40020c00
 800096c:	40020000 	.word	0x40020000
 8000970:	40020400 	.word	0x40020400

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <HAL_MspInit+0x4c>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x4c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009be:	2007      	movs	r0, #7
 80009c0:	f000 fb8a 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <HAL_I2C_MspInit+0x84>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d12c      	bne.n	8000a4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a17      	ldr	r2, [pc, #92]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a0e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a14:	2312      	movs	r3, #18
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a20:	2304      	movs	r3, #4
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480c      	ldr	r0, [pc, #48]	; (8000a5c <HAL_I2C_MspInit+0x8c>)
 8000a2c:	f000 fb96 	bl	800115c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 8000a3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_I2C_MspInit+0x88>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	; 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40005400 	.word	0x40005400
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020400 	.word	0x40020400

08000a60 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	; 0x38
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a31      	ldr	r2, [pc, #196]	; (8000b50 <HAL_I2S_MspInit+0xf0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d15a      	bne.n	8000b46 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a90:	2301      	movs	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a94:	23c0      	movs	r3, #192	; 0xc0
 8000a96:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f004 f8a7 	bl	8004bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000aac:	f7ff ff62 	bl	8000974 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a26      	ldr	r2, [pc, #152]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a1f      	ldr	r2, [pc, #124]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6313      	str	r3, [r2, #48]	; 0x30
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_I2S_MspInit+0xf4>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b04:	2310      	movs	r3, #16
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b14:	2306      	movs	r3, #6
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480e      	ldr	r0, [pc, #56]	; (8000b58 <HAL_I2S_MspInit+0xf8>)
 8000b20:	f000 fb1c 	bl	800115c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b24:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b36:	2306      	movs	r3, #6
 8000b38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4806      	ldr	r0, [pc, #24]	; (8000b5c <HAL_I2S_MspInit+0xfc>)
 8000b42:	f000 fb0b 	bl	800115c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3738      	adds	r7, #56	; 0x38
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40003c00 	.word	0x40003c00
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000
 8000b5c:	40020800 	.word	0x40020800

08000b60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <HAL_SPI_MspInit+0x84>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d12b      	bne.n	8000bda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bba:	23e0      	movs	r3, #224	; 0xe0
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_SPI_MspInit+0x8c>)
 8000bd6:	f000 fac1 	bl	800115c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	; 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40013000 	.word	0x40013000
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a28      	ldr	r2, [pc, #160]	; (8000cb0 <HAL_USART_MspInit+0xc0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d149      	bne.n	8000ca6 <HAL_USART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <HAL_USART_MspInit+0xc4>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a26      	ldr	r2, [pc, #152]	; (8000cb4 <HAL_USART_MspInit+0xc4>)
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <HAL_USART_MspInit+0xc4>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <HAL_USART_MspInit+0xc4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <HAL_USART_MspInit+0xc4>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <HAL_USART_MspInit+0xc4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_USART_MspInit+0xc4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <HAL_USART_MspInit+0xc4>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_USART_MspInit+0xc4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD7     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c66:	230c      	movs	r3, #12
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c76:	2307      	movs	r3, #7
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <HAL_USART_MspInit+0xc8>)
 8000c82:	f000 fa6b 	bl	800115c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c96:	2307      	movs	r3, #7
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4806      	ldr	r0, [pc, #24]	; (8000cbc <HAL_USART_MspInit+0xcc>)
 8000ca2:	f000 fa5b 	bl	800115c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40004400 	.word	0x40004400
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020c00 	.word	0x40020c00

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f8d0 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <OTG_FS_IRQHandler+0x10>)
 8000d1a:	f000 feb5 	bl	8001a88 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200005b8 	.word	0x200005b8

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f008 fab2 	bl	80092c0 <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20020000 	.word	0x20020000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	200001d4 	.word	0x200001d4
 8000d90:	20000ae0 	.word	0x20000ae0

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dbc:	f7ff ffea 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dc2:	490d      	ldr	r1, [pc, #52]	; (8000df8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd8:	4c0a      	ldr	r4, [pc, #40]	; (8000e04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de6:	f008 fa71 	bl	80092cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fb73 	bl	80004d4 <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000dfc:	08009404 	.word	0x08009404
  ldr r2, =_sbss
 8000e00:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000e04:	20000ae0 	.word	0x20000ae0

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>
	...

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <HAL_Init+0x40>)
 8000e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_Init+0x40>)
 8000e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_Init+0x40>)
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f94f 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff fd9e 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f967 	bl	8001142 <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 f92f 	bl	80010ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000004 	.word	0x20000004
 8000ea8:	2000000c 	.word	0x2000000c
 8000eac:	20000008 	.word	0x20000008

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	2000000c 	.word	0x2000000c
 8000ed4:	200001d8 	.word	0x200001d8

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200001d8 	.word	0x200001d8

08000ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff ffee 	bl	8000ed8 <HAL_GetTick>
 8000efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f08:	d005      	beq.n	8000f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_Delay+0x44>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4413      	add	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f16:	bf00      	nop
 8000f18:	f7ff ffde 	bl	8000ed8 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d8f7      	bhi.n	8000f18 <HAL_Delay+0x28>
  {
  }
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000000c 	.word	0x2000000c

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	4907      	ldr	r1, [pc, #28]	; (8000fd4 <__NVIC_EnableIRQ+0x38>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	095b      	lsrs	r3, r3, #5
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a4:	d301      	bcc.n	80010aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00f      	b.n	80010ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <SysTick_Config+0x40>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b2:	210f      	movs	r1, #15
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f7ff ff8e 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <SysTick_Config+0x40>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SysTick_Config+0x40>)
 80010c4:	2207      	movs	r2, #7
 80010c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff29 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff3e 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff8e 	bl	800102c <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5d 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff31 	bl	8000f9c <__NVIC_EnableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffa2 	bl	8001094 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	e16b      	b.n	8001450 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001178:	2201      	movs	r2, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	429a      	cmp	r2, r3
 8001192:	f040 815a 	bne.w	800144a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d005      	beq.n	80011ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d130      	bne.n	8001210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 0201 	and.w	r2, r3, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b03      	cmp	r3, #3
 800121a:	d017      	beq.n	800124c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d123      	bne.n	80012a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	08da      	lsrs	r2, r3, #3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3208      	adds	r2, #8
 8001260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	220f      	movs	r2, #15
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	08da      	lsrs	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	69b9      	ldr	r1, [r7, #24]
 800129c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0203 	and.w	r2, r3, #3
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80b4 	beq.w	800144a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b60      	ldr	r3, [pc, #384]	; (8001468 <HAL_GPIO_Init+0x30c>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a5f      	ldr	r2, [pc, #380]	; (8001468 <HAL_GPIO_Init+0x30c>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b5d      	ldr	r3, [pc, #372]	; (8001468 <HAL_GPIO_Init+0x30c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fe:	4a5b      	ldr	r2, [pc, #364]	; (800146c <HAL_GPIO_Init+0x310>)
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	220f      	movs	r2, #15
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a52      	ldr	r2, [pc, #328]	; (8001470 <HAL_GPIO_Init+0x314>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d02b      	beq.n	8001382 <HAL_GPIO_Init+0x226>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a51      	ldr	r2, [pc, #324]	; (8001474 <HAL_GPIO_Init+0x318>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d025      	beq.n	800137e <HAL_GPIO_Init+0x222>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a50      	ldr	r2, [pc, #320]	; (8001478 <HAL_GPIO_Init+0x31c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d01f      	beq.n	800137a <HAL_GPIO_Init+0x21e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4f      	ldr	r2, [pc, #316]	; (800147c <HAL_GPIO_Init+0x320>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d019      	beq.n	8001376 <HAL_GPIO_Init+0x21a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4e      	ldr	r2, [pc, #312]	; (8001480 <HAL_GPIO_Init+0x324>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0x216>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4d      	ldr	r2, [pc, #308]	; (8001484 <HAL_GPIO_Init+0x328>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d00d      	beq.n	800136e <HAL_GPIO_Init+0x212>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4c      	ldr	r2, [pc, #304]	; (8001488 <HAL_GPIO_Init+0x32c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d007      	beq.n	800136a <HAL_GPIO_Init+0x20e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4b      	ldr	r2, [pc, #300]	; (800148c <HAL_GPIO_Init+0x330>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_GPIO_Init+0x20a>
 8001362:	2307      	movs	r3, #7
 8001364:	e00e      	b.n	8001384 <HAL_GPIO_Init+0x228>
 8001366:	2308      	movs	r3, #8
 8001368:	e00c      	b.n	8001384 <HAL_GPIO_Init+0x228>
 800136a:	2306      	movs	r3, #6
 800136c:	e00a      	b.n	8001384 <HAL_GPIO_Init+0x228>
 800136e:	2305      	movs	r3, #5
 8001370:	e008      	b.n	8001384 <HAL_GPIO_Init+0x228>
 8001372:	2304      	movs	r3, #4
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x228>
 8001376:	2303      	movs	r3, #3
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x228>
 800137a:	2302      	movs	r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x228>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x228>
 8001382:	2300      	movs	r3, #0
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f002 0203 	and.w	r2, r2, #3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001394:	4935      	ldr	r1, [pc, #212]	; (800146c <HAL_GPIO_Init+0x310>)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a2:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <HAL_GPIO_Init+0x334>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c6:	4a32      	ldr	r2, [pc, #200]	; (8001490 <HAL_GPIO_Init+0x334>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013cc:	4b30      	ldr	r3, [pc, #192]	; (8001490 <HAL_GPIO_Init+0x334>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f0:	4a27      	ldr	r2, [pc, #156]	; (8001490 <HAL_GPIO_Init+0x334>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <HAL_GPIO_Init+0x334>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141a:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <HAL_GPIO_Init+0x334>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_GPIO_Init+0x334>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001444:	4a12      	ldr	r2, [pc, #72]	; (8001490 <HAL_GPIO_Init+0x334>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	f67f ae90 	bls.w	8001178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40013800 	.word	0x40013800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40021000 	.word	0x40021000
 8001484:	40021400 	.word	0x40021400
 8001488:	40021800 	.word	0x40021800
 800148c:	40021c00 	.word	0x40021c00
 8001490:	40013c00 	.word	0x40013c00

08001494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
 80014a0:	4613      	mov	r3, r2
 80014a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a4:	787b      	ldrb	r3, [r7, #1]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014b0:	e003      	b.n	80014ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	041a      	lsls	r2, r3, #16
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af02      	add	r7, sp, #8
 80014cc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e059      	b.n	800158c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d106      	bne.n	80014f8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f007 fb64 	bl	8008bc0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2203      	movs	r2, #3
 80014fc:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001506:	d102      	bne.n	800150e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f004 f96d 	bl	80057f2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7c1a      	ldrb	r2, [r3, #16]
 8001520:	f88d 2000 	strb.w	r2, [sp]
 8001524:	3304      	adds	r3, #4
 8001526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001528:	f004 f8ee 	bl	8005708 <USB_CoreInit>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2202      	movs	r2, #2
 8001536:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e026      	b.n	800158c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2101      	movs	r1, #1
 8001544:	4618      	mov	r0, r3
 8001546:	f004 f965 	bl	8005814 <USB_SetCurrentMode>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e017      	b.n	800158c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7c1a      	ldrb	r2, [r3, #16]
 8001564:	f88d 2000 	strb.w	r2, [sp]
 8001568:	3304      	adds	r3, #4
 800156a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156c:	f004 fb08 	bl	8005b80 <USB_HostInit>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e004      	b.n	800158c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b08b      	sub	sp, #44	; 0x2c
 8001598:	af04      	add	r7, sp, #16
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	4608      	mov	r0, r1
 800159e:	4611      	mov	r1, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	4603      	mov	r3, r0
 80015a4:	70fb      	strb	r3, [r7, #3]
 80015a6:	460b      	mov	r3, r1
 80015a8:	70bb      	strb	r3, [r7, #2]
 80015aa:	4613      	mov	r3, r2
 80015ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80015b0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_HCD_HC_Init+0x2c>
 80015bc:	2302      	movs	r3, #2
 80015be:	e09d      	b.n	80016fc <HAL_HCD_HC_Init+0x168>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	1a9b      	subs	r3, r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	3319      	adds	r3, #25
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015dc:	78fa      	ldrb	r2, [r7, #3]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	3314      	adds	r3, #20
 80015ec:	787a      	ldrb	r2, [r7, #1]
 80015ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	1a9b      	subs	r3, r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	3315      	adds	r3, #21
 8001600:	78fa      	ldrb	r2, [r7, #3]
 8001602:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	1a9b      	subs	r3, r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	3326      	adds	r3, #38	; 0x26
 8001614:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001618:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800161a:	78fa      	ldrb	r2, [r7, #3]
 800161c:	78bb      	ldrb	r3, [r7, #2]
 800161e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001622:	b2d8      	uxtb	r0, r3
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3316      	adds	r3, #22
 8001632:	4602      	mov	r2, r0
 8001634:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	4619      	mov	r1, r3
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 fbc8 	bl	8001dd0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001640:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001644:	2b00      	cmp	r3, #0
 8001646:	da0a      	bge.n	800165e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	3317      	adds	r3, #23
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
 800165c:	e009      	b.n	8001672 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	1a9b      	subs	r3, r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	3317      	adds	r3, #23
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f004 fbe6 	bl	8005e48 <USB_GetHostSpeed>
 800167c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800167e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001682:	2b01      	cmp	r3, #1
 8001684:	d10b      	bne.n	800169e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001686:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800168a:	2b01      	cmp	r3, #1
 800168c:	d107      	bne.n	800169e <HAL_HCD_HC_Init+0x10a>
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d104      	bne.n	800169e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2bbc      	cmp	r3, #188	; 0xbc
 8001698:	d901      	bls.n	800169e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800169a:	23bc      	movs	r3, #188	; 0xbc
 800169c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	3318      	adds	r3, #24
 80016ae:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80016b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016b4:	78fa      	ldrb	r2, [r7, #3]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	b298      	uxth	r0, r3
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	3328      	adds	r3, #40	; 0x28
 80016c8:	4602      	mov	r2, r0
 80016ca:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6818      	ldr	r0, [r3, #0]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	787c      	ldrb	r4, [r7, #1]
 80016d6:	78ba      	ldrb	r2, [r7, #2]
 80016d8:	78f9      	ldrb	r1, [r7, #3]
 80016da:	9302      	str	r3, [sp, #8]
 80016dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4623      	mov	r3, r4
 80016ea:	f004 fbd5 	bl	8005e98 <USB_HC_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}

08001704 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_HCD_HC_Halt+0x1e>
 800171e:	2302      	movs	r3, #2
 8001720:	e00f      	b.n	8001742 <HAL_HCD_HC_Halt+0x3e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f004 ff67 	bl	8006606 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001740:	7bfb      	ldrb	r3, [r7, #15]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	4608      	mov	r0, r1
 8001756:	4611      	mov	r1, r2
 8001758:	461a      	mov	r2, r3
 800175a:	4603      	mov	r3, r0
 800175c:	70fb      	strb	r3, [r7, #3]
 800175e:	460b      	mov	r3, r1
 8001760:	70bb      	strb	r3, [r7, #2]
 8001762:	4613      	mov	r3, r2
 8001764:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001766:	78fa      	ldrb	r2, [r7, #3]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	3317      	adds	r3, #23
 8001776:	78ba      	ldrb	r2, [r7, #2]
 8001778:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800177a:	78fa      	ldrb	r2, [r7, #3]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	1a9b      	subs	r3, r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	3326      	adds	r3, #38	; 0x26
 800178a:	787a      	ldrb	r2, [r7, #1]
 800178c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800178e:	7c3b      	ldrb	r3, [r7, #16]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d114      	bne.n	80017be <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	332a      	adds	r3, #42	; 0x2a
 80017a4:	2203      	movs	r2, #3
 80017a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017a8:	78fa      	ldrb	r2, [r7, #3]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	3319      	adds	r3, #25
 80017b8:	7f3a      	ldrb	r2, [r7, #28]
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	e009      	b.n	80017d2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	332a      	adds	r3, #42	; 0x2a
 80017ce:	2202      	movs	r2, #2
 80017d0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017d2:	787b      	ldrb	r3, [r7, #1]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	f200 8102 	bhi.w	80019de <HAL_HCD_HC_SubmitRequest+0x292>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	080017f1 	.word	0x080017f1
 80017e4:	080019c9 	.word	0x080019c9
 80017e8:	080018b5 	.word	0x080018b5
 80017ec:	0800193f 	.word	0x0800193f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80017f0:	7c3b      	ldrb	r3, [r7, #16]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	f040 80f5 	bne.w	80019e2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80017f8:	78bb      	ldrb	r3, [r7, #2]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d12d      	bne.n	800185a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80017fe:	8b3b      	ldrh	r3, [r7, #24]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d109      	bne.n	8001818 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	1a9b      	subs	r3, r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	333d      	adds	r3, #61	; 0x3d
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001818:	78fa      	ldrb	r2, [r7, #3]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	333d      	adds	r3, #61	; 0x3d
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10a      	bne.n	8001844 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800182e:	78fa      	ldrb	r2, [r7, #3]
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	1a9b      	subs	r3, r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	332a      	adds	r3, #42	; 0x2a
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001842:	e0ce      	b.n	80019e2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001844:	78fa      	ldrb	r2, [r7, #3]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	1a9b      	subs	r3, r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	332a      	adds	r3, #42	; 0x2a
 8001854:	2202      	movs	r2, #2
 8001856:	701a      	strb	r2, [r3, #0]
      break;
 8001858:	e0c3      	b.n	80019e2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800185a:	78fa      	ldrb	r2, [r7, #3]
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	1a9b      	subs	r3, r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	440b      	add	r3, r1
 8001868:	331a      	adds	r3, #26
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	f040 80b8 	bne.w	80019e2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	333c      	adds	r3, #60	; 0x3c
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10a      	bne.n	800189e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	332a      	adds	r3, #42	; 0x2a
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
      break;
 800189c:	e0a1      	b.n	80019e2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	332a      	adds	r3, #42	; 0x2a
 80018ae:	2202      	movs	r2, #2
 80018b0:	701a      	strb	r2, [r3, #0]
      break;
 80018b2:	e096      	b.n	80019e2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018b4:	78bb      	ldrb	r3, [r7, #2]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d120      	bne.n	80018fc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	333d      	adds	r3, #61	; 0x3d
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10a      	bne.n	80018e6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	332a      	adds	r3, #42	; 0x2a
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018e4:	e07e      	b.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	332a      	adds	r3, #42	; 0x2a
 80018f6:	2202      	movs	r2, #2
 80018f8:	701a      	strb	r2, [r3, #0]
      break;
 80018fa:	e073      	b.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	333c      	adds	r3, #60	; 0x3c
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10a      	bne.n	8001928 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001912:	78fa      	ldrb	r2, [r7, #3]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	332a      	adds	r3, #42	; 0x2a
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
      break;
 8001926:	e05d      	b.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001928:	78fa      	ldrb	r2, [r7, #3]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	1a9b      	subs	r3, r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	332a      	adds	r3, #42	; 0x2a
 8001938:	2202      	movs	r2, #2
 800193a:	701a      	strb	r2, [r3, #0]
      break;
 800193c:	e052      	b.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800193e:	78bb      	ldrb	r3, [r7, #2]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d120      	bne.n	8001986 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	333d      	adds	r3, #61	; 0x3d
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10a      	bne.n	8001970 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800195a:	78fa      	ldrb	r2, [r7, #3]
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	1a9b      	subs	r3, r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	332a      	adds	r3, #42	; 0x2a
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800196e:	e039      	b.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	332a      	adds	r3, #42	; 0x2a
 8001980:	2202      	movs	r2, #2
 8001982:	701a      	strb	r2, [r3, #0]
      break;
 8001984:	e02e      	b.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	1a9b      	subs	r3, r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	333c      	adds	r3, #60	; 0x3c
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10a      	bne.n	80019b2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	332a      	adds	r3, #42	; 0x2a
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
      break;
 80019b0:	e018      	b.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b2:	78fa      	ldrb	r2, [r7, #3]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	1a9b      	subs	r3, r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	332a      	adds	r3, #42	; 0x2a
 80019c2:	2202      	movs	r2, #2
 80019c4:	701a      	strb	r2, [r3, #0]
      break;
 80019c6:	e00d      	b.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	1a9b      	subs	r3, r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	332a      	adds	r3, #42	; 0x2a
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
      break;
 80019dc:	e002      	b.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80019de:	bf00      	nop
 80019e0:	e000      	b.n	80019e4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80019e2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	332c      	adds	r3, #44	; 0x2c
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	8b39      	ldrh	r1, [r7, #24]
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	1a9b      	subs	r3, r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4403      	add	r3, r0
 8001a08:	3334      	adds	r3, #52	; 0x34
 8001a0a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	334c      	adds	r3, #76	; 0x4c
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3338      	adds	r3, #56	; 0x38
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	3315      	adds	r3, #21
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a48:	78fa      	ldrb	r2, [r7, #3]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	334d      	adds	r3, #77	; 0x4d
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	4613      	mov	r3, r2
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	1a9b      	subs	r3, r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	3310      	adds	r3, #16
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	1d19      	adds	r1, r3, #4
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	799b      	ldrb	r3, [r3, #6]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f004 fb3a 	bl	80060f0 <USB_HC_StartXfer>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop

08001a88 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f004 f82e 	bl	8005b00 <USB_GetMode>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	f040 80fb 	bne.w	8001ca2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 fff1 	bl	8005a98 <USB_ReadInterrupts>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80f1 	beq.w	8001ca0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 ffe8 	bl	8005a98 <USB_ReadInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ad2:	d104      	bne.n	8001ade <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001adc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 ffd8 	bl	8005a98 <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001af2:	d104      	bne.n	8001afe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001afc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f003 ffc8 	bl	8005a98 <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b12:	d104      	bne.n	8001b1e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 ffb8 	bl	8005a98 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d103      	bne.n	8001b3a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2202      	movs	r2, #2
 8001b38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 ffaa 	bl	8005a98 <USB_ReadInterrupts>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b4e:	d120      	bne.n	8001b92 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b58:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d113      	bne.n	8001b92 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	6938      	ldr	r0, [r7, #16]
 8001b6e:	f003 fe9d 	bl	80058ac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b72:	6938      	ldr	r0, [r7, #16]
 8001b74:	f003 fecc 	bl	8005910 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7a5b      	ldrb	r3, [r3, #9]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d105      	bne.n	8001b8c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2101      	movs	r1, #1
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 f8be 	bl	8005d08 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f007 f895 	bl	8008cbc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 ff7e 	bl	8005a98 <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ba2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba6:	d102      	bne.n	8001bae <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f001 fd33 	bl	8003614 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 ff70 	bl	8005a98 <USB_ReadInterrupts>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d106      	bne.n	8001bd0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f007 f85e 	bl	8008c84 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2208      	movs	r2, #8
 8001bce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 ff5f 	bl	8005a98 <USB_ReadInterrupts>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001be4:	d139      	bne.n	8001c5a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f004 fcfa 	bl	80065e4 <USB_HC_ReadInterrupt>
 8001bf0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	e025      	b.n	8001c44 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d018      	beq.n	8001c3e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c22:	d106      	bne.n	8001c32 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4619      	mov	r1, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f905 	bl	8001e3a <HCD_HC_IN_IRQHandler>
 8001c30:	e005      	b.n	8001c3e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	4619      	mov	r1, r3
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 ff67 	bl	8002b0c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	795b      	ldrb	r3, [r3, #5]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d3d3      	bcc.n	8001bf8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 ff1a 	bl	8005a98 <USB_ReadInterrupts>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b10      	cmp	r3, #16
 8001c6c:	d101      	bne.n	8001c72 <HAL_HCD_IRQHandler+0x1ea>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_HCD_IRQHandler+0x1ec>
 8001c72:	2300      	movs	r3, #0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d014      	beq.n	8001ca2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699a      	ldr	r2, [r3, #24]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0210 	bic.w	r2, r2, #16
 8001c86:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f001 fbe4 	bl	8003456 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699a      	ldr	r2, [r3, #24]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0210 	orr.w	r2, r2, #16
 8001c9c:	619a      	str	r2, [r3, #24]
 8001c9e:	e000      	b.n	8001ca2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001ca0:	bf00      	nop
    }
  }
}
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_HCD_Start+0x16>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e013      	b.n	8001ce6 <HAL_HCD_Start+0x3e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2101      	movs	r1, #1
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f004 f882 	bl	8005dd6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 fd7a 	bl	80057d0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_HCD_Stop+0x16>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e00d      	b.n	8001d20 <HAL_HCD_Stop+0x32>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f004 fdd5 	bl	80068c0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f004 f824 	bl	8005d82 <USB_ResetPort>
 8001d3a:	4603      	mov	r3, r0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	1a9b      	subs	r3, r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	334c      	adds	r3, #76	; 0x4c
 8001d60:	781b      	ldrb	r3, [r3, #0]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d7a:	78fa      	ldrb	r2, [r7, #3]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	3338      	adds	r3, #56	; 0x38
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f004 f866 	bl	8005e76 <USB_GetCurrentFrame>
 8001daa:	4603      	mov	r3, r0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f004 f841 	bl	8005e48 <USB_GetHostSpeed>
 8001dc6:	4603      	mov	r3, r0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001ddc:	78fa      	ldrb	r2, [r7, #3]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	331a      	adds	r3, #26
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	331b      	adds	r3, #27
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	3325      	adds	r3, #37	; 0x25
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	3324      	adds	r3, #36	; 0x24
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	460b      	mov	r3, r1
 8001e44:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	78fa      	ldrb	r2, [r7, #3]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f003 fe30 	bl	8005abe <USB_ReadChInterrupts>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d11a      	bne.n	8001e9e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	461a      	mov	r2, r3
 8001e76:	2304      	movs	r3, #4
 8001e78:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	334d      	adds	r3, #77	; 0x4d
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	78fa      	ldrb	r2, [r7, #3]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f004 fbb5 	bl	8006606 <USB_HC_Halt>
 8001e9c:	e09e      	b.n	8001fdc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 fe09 	bl	8005abe <USB_ReadChInterrupts>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eb6:	d11b      	bne.n	8001ef0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	334d      	adds	r3, #77	; 0x4d
 8001edc:	2208      	movs	r2, #8
 8001ede:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f004 fb8c 	bl	8006606 <USB_HC_Halt>
 8001eee:	e075      	b.n	8001fdc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 fde0 	bl	8005abe <USB_ReadChInterrupts>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d11a      	bne.n	8001f3e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f14:	461a      	mov	r2, r3
 8001f16:	2308      	movs	r3, #8
 8001f18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	334d      	adds	r3, #77	; 0x4d
 8001f2a:	2206      	movs	r2, #6
 8001f2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	78fa      	ldrb	r2, [r7, #3]
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 fb65 	bl	8006606 <USB_HC_Halt>
 8001f3c:	e04e      	b.n	8001fdc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	78fa      	ldrb	r2, [r7, #3]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 fdb9 	bl	8005abe <USB_ReadChInterrupts>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f56:	d11b      	bne.n	8001f90 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f64:	461a      	mov	r2, r3
 8001f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	334d      	adds	r3, #77	; 0x4d
 8001f7c:	2209      	movs	r2, #9
 8001f7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f004 fb3c 	bl	8006606 <USB_HC_Halt>
 8001f8e:	e025      	b.n	8001fdc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f003 fd90 	bl	8005abe <USB_ReadChInterrupts>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa4:	2b80      	cmp	r3, #128	; 0x80
 8001fa6:	d119      	bne.n	8001fdc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	334d      	adds	r3, #77	; 0x4d
 8001fca:	2207      	movs	r2, #7
 8001fcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f004 fb15 	bl	8006606 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f003 fd6a 	bl	8005abe <USB_ReadChInterrupts>
 8001fea:	4603      	mov	r3, r0
 8001fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff4:	d112      	bne.n	800201c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	78fa      	ldrb	r2, [r7, #3]
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 fb01 	bl	8006606 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002010:	461a      	mov	r2, r3
 8002012:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002016:	6093      	str	r3, [r2, #8]
 8002018:	f000 bd75 	b.w	8002b06 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f003 fd4a 	bl	8005abe <USB_ReadChInterrupts>
 800202a:	4603      	mov	r3, r0
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	f040 8128 	bne.w	8002286 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4413      	add	r3, r2
 800203e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002042:	461a      	mov	r2, r3
 8002044:	2320      	movs	r3, #32
 8002046:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002048:	78fa      	ldrb	r2, [r7, #3]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	331b      	adds	r3, #27
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d119      	bne.n	8002092 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	1a9b      	subs	r3, r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	331b      	adds	r3, #27
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	0151      	lsls	r1, r2, #5
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	440a      	add	r2, r1
 8002088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800208c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002090:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	799b      	ldrb	r3, [r3, #6]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01b      	beq.n	80020d2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	3330      	adds	r3, #48	; 0x30
 80020aa:	6819      	ldr	r1, [r3, #0]
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020be:	78fa      	ldrb	r2, [r7, #3]
 80020c0:	1ac9      	subs	r1, r1, r3
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4403      	add	r3, r0
 80020ce:	3338      	adds	r3, #56	; 0x38
 80020d0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	334d      	adds	r3, #77	; 0x4d
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	3344      	adds	r3, #68	; 0x44
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4413      	add	r3, r2
 8002102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002106:	461a      	mov	r2, r3
 8002108:	2301      	movs	r3, #1
 800210a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800210c:	78fa      	ldrb	r2, [r7, #3]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	1a9b      	subs	r3, r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	3326      	adds	r3, #38	; 0x26
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	3326      	adds	r3, #38	; 0x26
 8002132:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002134:	2b02      	cmp	r3, #2
 8002136:	d110      	bne.n	800215a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f004 fa60 	bl	8006606 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4413      	add	r3, r2
 800214e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002152:	461a      	mov	r2, r3
 8002154:	2310      	movs	r3, #16
 8002156:	6093      	str	r3, [r2, #8]
 8002158:	e03d      	b.n	80021d6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	3326      	adds	r3, #38	; 0x26
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d00a      	beq.n	8002186 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	3326      	adds	r3, #38	; 0x26
 8002180:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002182:	2b01      	cmp	r3, #1
 8002184:	d127      	bne.n	80021d6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	0151      	lsls	r1, r2, #5
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	440a      	add	r2, r1
 800219c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021a4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	334c      	adds	r3, #76	; 0x4c
 80021b6:	2201      	movs	r2, #1
 80021b8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	334c      	adds	r3, #76	; 0x4c
 80021ca:	781a      	ldrb	r2, [r3, #0]
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	4619      	mov	r1, r3
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f006 fd81 	bl	8008cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	799b      	ldrb	r3, [r3, #6]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d13b      	bne.n	8002256 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	3338      	adds	r3, #56	; 0x38
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4403      	add	r3, r0
 80021fe:	3328      	adds	r3, #40	; 0x28
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	440b      	add	r3, r1
 8002204:	1e59      	subs	r1, r3, #1
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4403      	add	r3, r0
 8002214:	3328      	adds	r3, #40	; 0x28
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	fbb1 f3f3 	udiv	r3, r1, r3
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 8470 	beq.w	8002b06 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	333c      	adds	r3, #60	; 0x3c
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	f083 0301 	eor.w	r3, r3, #1
 800223e:	b2d8      	uxtb	r0, r3
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	333c      	adds	r3, #60	; 0x3c
 800224e:	4602      	mov	r2, r0
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	f000 bc58 	b.w	8002b06 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	333c      	adds	r3, #60	; 0x3c
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	f083 0301 	eor.w	r3, r3, #1
 800226e:	b2d8      	uxtb	r0, r3
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	333c      	adds	r3, #60	; 0x3c
 800227e:	4602      	mov	r2, r0
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	f000 bc40 	b.w	8002b06 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f003 fc15 	bl	8005abe <USB_ReadChInterrupts>
 8002294:	4603      	mov	r3, r0
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b20      	cmp	r3, #32
 800229c:	d131      	bne.n	8002302 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	461a      	mov	r2, r3
 80022ac:	2320      	movs	r3, #32
 80022ae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	331a      	adds	r3, #26
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	f040 841f 	bne.w	8002b06 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	331b      	adds	r3, #27
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	334d      	adds	r3, #77	; 0x4d
 80022ec:	2203      	movs	r2, #3
 80022ee:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 f984 	bl	8006606 <USB_HC_Halt>
 80022fe:	f000 bc02 	b.w	8002b06 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f003 fbd7 	bl	8005abe <USB_ReadChInterrupts>
 8002310:	4603      	mov	r3, r0
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b02      	cmp	r3, #2
 8002318:	f040 8305 	bne.w	8002926 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002328:	461a      	mov	r2, r3
 800232a:	2302      	movs	r3, #2
 800232c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	334d      	adds	r3, #77	; 0x4d
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d114      	bne.n	800236e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	334d      	adds	r3, #77	; 0x4d
 8002354:	2202      	movs	r2, #2
 8002356:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	334c      	adds	r3, #76	; 0x4c
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e2cc      	b.n	8002908 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	334d      	adds	r3, #77	; 0x4d
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b06      	cmp	r3, #6
 8002382:	d114      	bne.n	80023ae <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002384:	78fa      	ldrb	r2, [r7, #3]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	334d      	adds	r3, #77	; 0x4d
 8002394:	2202      	movs	r2, #2
 8002396:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	334c      	adds	r3, #76	; 0x4c
 80023a8:	2205      	movs	r2, #5
 80023aa:	701a      	strb	r2, [r3, #0]
 80023ac:	e2ac      	b.n	8002908 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	334d      	adds	r3, #77	; 0x4d
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b07      	cmp	r3, #7
 80023c2:	d00b      	beq.n	80023dc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	334d      	adds	r3, #77	; 0x4d
 80023d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023d6:	2b09      	cmp	r3, #9
 80023d8:	f040 80a6 	bne.w	8002528 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	334d      	adds	r3, #77	; 0x4d
 80023ec:	2202      	movs	r2, #2
 80023ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	3344      	adds	r3, #68	; 0x44
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1c59      	adds	r1, r3, #1
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4403      	add	r3, r0
 8002410:	3344      	adds	r3, #68	; 0x44
 8002412:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	3344      	adds	r3, #68	; 0x44
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d943      	bls.n	80024b2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	3344      	adds	r3, #68	; 0x44
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	331a      	adds	r3, #26
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d123      	bne.n	800249c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	331b      	adds	r3, #27
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	331c      	adds	r3, #28
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	78fa      	ldrb	r2, [r7, #3]
 800248c:	0151      	lsls	r1, r2, #5
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	440a      	add	r2, r1
 8002492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	334c      	adds	r3, #76	; 0x4c
 80024ac:	2204      	movs	r2, #4
 80024ae:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024b0:	e229      	b.n	8002906 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	334c      	adds	r3, #76	; 0x4c
 80024c2:	2202      	movs	r2, #2
 80024c4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024c6:	78fa      	ldrb	r2, [r7, #3]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	3326      	adds	r3, #38	; 0x26
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00b      	beq.n	80024f4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	3326      	adds	r3, #38	; 0x26
 80024ec:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	f040 8209 	bne.w	8002906 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800250a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002512:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	461a      	mov	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002526:	e1ee      	b.n	8002906 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	334d      	adds	r3, #77	; 0x4d
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b05      	cmp	r3, #5
 800253c:	f040 80c8 	bne.w	80026d0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	334d      	adds	r3, #77	; 0x4d
 8002550:	2202      	movs	r2, #2
 8002552:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	331b      	adds	r3, #27
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b01      	cmp	r3, #1
 8002568:	f040 81ce 	bne.w	8002908 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	3326      	adds	r3, #38	; 0x26
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d16b      	bne.n	800265a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	3348      	adds	r3, #72	; 0x48
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	1c59      	adds	r1, r3, #1
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4403      	add	r3, r0
 80025a2:	3348      	adds	r3, #72	; 0x48
 80025a4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	3348      	adds	r3, #72	; 0x48
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d943      	bls.n	8002644 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	3348      	adds	r3, #72	; 0x48
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	331b      	adds	r3, #27
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	3344      	adds	r3, #68	; 0x44
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d809      	bhi.n	800260e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	331c      	adds	r3, #28
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4413      	add	r3, r2
 8002616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	0151      	lsls	r1, r2, #5
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	440a      	add	r2, r1
 8002624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800262e:	78fa      	ldrb	r2, [r7, #3]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	334c      	adds	r3, #76	; 0x4c
 800263e:	2204      	movs	r2, #4
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e014      	b.n	800266e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	334c      	adds	r3, #76	; 0x4c
 8002654:	2202      	movs	r2, #2
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e009      	b.n	800266e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	1a9b      	subs	r3, r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	334c      	adds	r3, #76	; 0x4c
 800266a:	2202      	movs	r2, #2
 800266c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	3326      	adds	r3, #38	; 0x26
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	3326      	adds	r3, #38	; 0x26
 8002694:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002696:	2b02      	cmp	r3, #2
 8002698:	f040 8136 	bne.w	8002908 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026b2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026ba:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	461a      	mov	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e11b      	b.n	8002908 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	334d      	adds	r3, #77	; 0x4d
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	f040 8081 	bne.w	80027ea <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	334d      	adds	r3, #77	; 0x4d
 80026f8:	2202      	movs	r2, #2
 80026fa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	331b      	adds	r3, #27
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b01      	cmp	r3, #1
 8002710:	f040 80fa 	bne.w	8002908 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	334c      	adds	r3, #76	; 0x4c
 8002724:	2202      	movs	r2, #2
 8002726:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	0151      	lsls	r1, r2, #5
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	440a      	add	r2, r1
 800273e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002746:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	78fa      	ldrb	r2, [r7, #3]
 8002758:	0151      	lsls	r1, r2, #5
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	440a      	add	r2, r1
 800275e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002766:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	0151      	lsls	r1, r2, #5
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	440a      	add	r2, r1
 800277e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002782:	f023 0320 	bic.w	r3, r3, #32
 8002786:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	3326      	adds	r3, #38	; 0x26
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	3326      	adds	r3, #38	; 0x26
 80027ae:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	f040 80a9 	bne.w	8002908 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027cc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027d4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e2:	461a      	mov	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	e08e      	b.n	8002908 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	334d      	adds	r3, #77	; 0x4d
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d143      	bne.n	8002888 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	334d      	adds	r3, #77	; 0x4d
 8002810:	2202      	movs	r2, #2
 8002812:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	334c      	adds	r3, #76	; 0x4c
 8002824:	2202      	movs	r2, #2
 8002826:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	3326      	adds	r3, #38	; 0x26
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	3326      	adds	r3, #38	; 0x26
 800284e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002850:	2b02      	cmp	r3, #2
 8002852:	d159      	bne.n	8002908 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800286a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002872:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	461a      	mov	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e03f      	b.n	8002908 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	334d      	adds	r3, #77	; 0x4d
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b08      	cmp	r3, #8
 800289c:	d126      	bne.n	80028ec <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	1a9b      	subs	r3, r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	334d      	adds	r3, #77	; 0x4d
 80028ae:	2202      	movs	r2, #2
 80028b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	1a9b      	subs	r3, r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3344      	adds	r3, #68	; 0x44
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	1c59      	adds	r1, r3, #1
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4403      	add	r3, r0
 80028d2:	3344      	adds	r3, #68	; 0x44
 80028d4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80028d6:	78fa      	ldrb	r2, [r7, #3]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	1a9b      	subs	r3, r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	334c      	adds	r3, #76	; 0x4c
 80028e6:	2204      	movs	r2, #4
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	e00d      	b.n	8002908 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80028ec:	78fa      	ldrb	r2, [r7, #3]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	334d      	adds	r3, #77	; 0x4d
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	f000 8100 	beq.w	8002b04 <HCD_HC_IN_IRQHandler+0xcca>
 8002904:	e000      	b.n	8002908 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002906:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	334c      	adds	r3, #76	; 0x4c
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	4619      	mov	r1, r3
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f006 f9da 	bl	8008cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002924:	e0ef      	b.n	8002b06 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f003 f8c5 	bl	8005abe <USB_ReadChInterrupts>
 8002934:	4603      	mov	r3, r0
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b40      	cmp	r3, #64	; 0x40
 800293c:	d12f      	bne.n	800299e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	461a      	mov	r2, r3
 800294c:	2340      	movs	r3, #64	; 0x40
 800294e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	334d      	adds	r3, #77	; 0x4d
 8002960:	2205      	movs	r2, #5
 8002962:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	331a      	adds	r3, #26
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	3344      	adds	r3, #68	; 0x44
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fe35 	bl	8006606 <USB_HC_Halt>
 800299c:	e0b3      	b.n	8002b06 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 f889 	bl	8005abe <USB_ReadChInterrupts>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b10      	cmp	r3, #16
 80029b4:	f040 80a7 	bne.w	8002b06 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	3326      	adds	r3, #38	; 0x26
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d11b      	bne.n	8002a06 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	3344      	adds	r3, #68	; 0x44
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	334d      	adds	r3, #77	; 0x4d
 80029f2:	2204      	movs	r2, #4
 80029f4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f003 fe01 	bl	8006606 <USB_HC_Halt>
 8002a04:	e03f      	b.n	8002a86 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	3326      	adds	r3, #38	; 0x26
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	3326      	adds	r3, #38	; 0x26
 8002a2c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d129      	bne.n	8002a86 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	3344      	adds	r3, #68	; 0x44
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	799b      	ldrb	r3, [r3, #6]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HCD_HC_IN_IRQHandler+0xc2a>
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	331b      	adds	r3, #27
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d110      	bne.n	8002a86 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	334d      	adds	r3, #77	; 0x4d
 8002a74:	2204      	movs	r2, #4
 8002a76:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 fdc0 	bl	8006606 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	331b      	adds	r3, #27
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d129      	bne.n	8002af0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	331b      	adds	r3, #27
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	0151      	lsls	r1, r2, #5
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	440a      	add	r2, r1
 8002ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ace:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	0151      	lsls	r1, r2, #5
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	440a      	add	r2, r1
 8002ae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aea:	f043 0320 	orr.w	r3, r3, #32
 8002aee:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	461a      	mov	r2, r3
 8002afe:	2310      	movs	r3, #16
 8002b00:	6093      	str	r3, [r2, #8]
 8002b02:	e000      	b.n	8002b06 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b04:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f002 ffc7 	bl	8005abe <USB_ReadChInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d11b      	bne.n	8002b72 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	461a      	mov	r2, r3
 8002b48:	2304      	movs	r3, #4
 8002b4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	334d      	adds	r3, #77	; 0x4d
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f003 fd4c 	bl	8006606 <USB_HC_Halt>
 8002b6e:	f000 bc6f 	b.w	8003450 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 ff9f 	bl	8005abe <USB_ReadChInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	f040 8082 	bne.w	8002c90 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b98:	461a      	mov	r2, r3
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3319      	adds	r3, #25
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d124      	bne.n	8002bfe <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3319      	adds	r3, #25
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	334c      	adds	r3, #76	; 0x4c
 8002bd8:	2202      	movs	r2, #2
 8002bda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	334d      	adds	r3, #77	; 0x4d
 8002bec:	2203      	movs	r2, #3
 8002bee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 fd04 	bl	8006606 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	331a      	adds	r3, #26
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	f040 841d 	bne.w	8003450 <HCD_HC_OUT_IRQHandler+0x944>
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	331b      	adds	r3, #27
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f040 8411 	bne.w	8003450 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	1a9b      	subs	r3, r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3326      	adds	r3, #38	; 0x26
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d009      	beq.n	8002c58 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	331b      	adds	r3, #27
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	334d      	adds	r3, #77	; 0x4d
 8002c68:	2203      	movs	r2, #3
 8002c6a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 fcc6 	bl	8006606 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	3344      	adds	r3, #68	; 0x44
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	e3df      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f002 ff10 	bl	8005abe <USB_ReadChInterrupts>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca8:	d111      	bne.n	8002cce <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cbc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f003 fc9d 	bl	8006606 <USB_HC_Halt>
 8002ccc:	e3c0      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 fef1 	bl	8005abe <USB_ReadChInterrupts>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d168      	bne.n	8002db8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3344      	adds	r3, #68	; 0x44
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 fedb 	bl	8005abe <USB_ReadChInterrupts>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0e:	2b40      	cmp	r3, #64	; 0x40
 8002d10:	d112      	bne.n	8002d38 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	3319      	adds	r3, #25
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d32:	461a      	mov	r2, r3
 8002d34:	2340      	movs	r3, #64	; 0x40
 8002d36:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	331b      	adds	r3, #27
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d019      	beq.n	8002d82 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	331b      	adds	r3, #27
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	0151      	lsls	r1, r2, #5
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	440a      	add	r2, r1
 8002d78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d80:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2301      	movs	r3, #1
 8002d92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	334d      	adds	r3, #77	; 0x4d
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f003 fc28 	bl	8006606 <USB_HC_Halt>
 8002db6:	e34b      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 fe7c 	bl	8005abe <USB_ReadChInterrupts>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dcc:	2b40      	cmp	r3, #64	; 0x40
 8002dce:	d139      	bne.n	8002e44 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	334d      	adds	r3, #77	; 0x4d
 8002de0:	2205      	movs	r2, #5
 8002de2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	331a      	adds	r3, #26
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	3319      	adds	r3, #25
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	3344      	adds	r3, #68	; 0x44
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f003 fbeb 	bl	8006606 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2340      	movs	r3, #64	; 0x40
 8002e40:	6093      	str	r3, [r2, #8]
 8002e42:	e305      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 fe36 	bl	8005abe <USB_ReadChInterrupts>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d11a      	bne.n	8002e92 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	334d      	adds	r3, #77	; 0x4d
 8002e7e:	2206      	movs	r2, #6
 8002e80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f003 fbbb 	bl	8006606 <USB_HC_Halt>
 8002e90:	e2de      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f002 fe0f 	bl	8005abe <USB_ReadChInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b10      	cmp	r3, #16
 8002ea8:	d144      	bne.n	8002f34 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3344      	adds	r3, #68	; 0x44
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	334d      	adds	r3, #77	; 0x4d
 8002ece:	2204      	movs	r2, #4
 8002ed0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3319      	adds	r3, #25
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d114      	bne.n	8002f12 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3318      	adds	r3, #24
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3319      	adds	r3, #25
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f003 fb73 	bl	8006606 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2310      	movs	r3, #16
 8002f30:	6093      	str	r3, [r2, #8]
 8002f32:	e28d      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f002 fdbe 	bl	8005abe <USB_ReadChInterrupts>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f48:	2b80      	cmp	r3, #128	; 0x80
 8002f4a:	d169      	bne.n	8003020 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	799b      	ldrb	r3, [r3, #6]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d111      	bne.n	8002f78 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	334d      	adds	r3, #77	; 0x4d
 8002f64:	2207      	movs	r2, #7
 8002f66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f003 fb48 	bl	8006606 <USB_HC_Halt>
 8002f76:	e049      	b.n	800300c <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	3344      	adds	r3, #68	; 0x44
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	1c59      	adds	r1, r3, #1
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4403      	add	r3, r0
 8002f98:	3344      	adds	r3, #68	; 0x44
 8002f9a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	3344      	adds	r3, #68	; 0x44
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d922      	bls.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3344      	adds	r3, #68	; 0x44
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	334c      	adds	r3, #76	; 0x4c
 8002fd6:	2204      	movs	r2, #4
 8002fd8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	334c      	adds	r3, #76	; 0x4c
 8002fea:	781a      	ldrb	r2, [r3, #0]
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f005 fe71 	bl	8008cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ff6:	e009      	b.n	800300c <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	334c      	adds	r3, #76	; 0x4c
 8003008:	2202      	movs	r2, #2
 800300a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	461a      	mov	r2, r3
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	6093      	str	r3, [r2, #8]
 800301e:	e217      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f002 fd48 	bl	8005abe <USB_ReadChInterrupts>
 800302e:	4603      	mov	r3, r0
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003038:	d11b      	bne.n	8003072 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	334d      	adds	r3, #77	; 0x4d
 800304a:	2209      	movs	r2, #9
 800304c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f003 fad5 	bl	8006606 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003068:	461a      	mov	r2, r3
 800306a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800306e:	6093      	str	r3, [r2, #8]
 8003070:	e1ee      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f002 fd1f 	bl	8005abe <USB_ReadChInterrupts>
 8003080:	4603      	mov	r3, r0
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b02      	cmp	r3, #2
 8003088:	f040 81df 	bne.w	800344a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003098:	461a      	mov	r2, r3
 800309a:	2302      	movs	r3, #2
 800309c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	334d      	adds	r3, #77	; 0x4d
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	f040 8093 	bne.w	80031dc <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	334d      	adds	r3, #77	; 0x4d
 80030c6:	2202      	movs	r2, #2
 80030c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	334c      	adds	r3, #76	; 0x4c
 80030da:	2201      	movs	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	3326      	adds	r3, #38	; 0x26
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d00b      	beq.n	800310c <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3326      	adds	r3, #38	; 0x26
 8003104:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003106:	2b03      	cmp	r3, #3
 8003108:	f040 8190 	bne.w	800342c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	799b      	ldrb	r3, [r3, #6]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d115      	bne.n	8003140 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	333d      	adds	r3, #61	; 0x3d
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	f083 0301 	eor.w	r3, r3, #1
 800312c:	b2d8      	uxtb	r0, r3
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	333d      	adds	r3, #61	; 0x3d
 800313c:	4602      	mov	r2, r0
 800313e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	799b      	ldrb	r3, [r3, #6]
 8003144:	2b01      	cmp	r3, #1
 8003146:	f040 8171 	bne.w	800342c <HCD_HC_OUT_IRQHandler+0x920>
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	3334      	adds	r3, #52	; 0x34
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 8165 	beq.w	800342c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	3334      	adds	r3, #52	; 0x34
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4403      	add	r3, r0
 8003182:	3328      	adds	r3, #40	; 0x28
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	440b      	add	r3, r1
 8003188:	1e59      	subs	r1, r3, #1
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4403      	add	r3, r0
 8003198:	3328      	adds	r3, #40	; 0x28
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 813f 	beq.w	800342c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	333d      	adds	r3, #61	; 0x3d
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	f083 0301 	eor.w	r3, r3, #1
 80031c6:	b2d8      	uxtb	r0, r3
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	333d      	adds	r3, #61	; 0x3d
 80031d6:	4602      	mov	r2, r0
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	e127      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	334d      	adds	r3, #77	; 0x4d
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d120      	bne.n	8003234 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	334d      	adds	r3, #77	; 0x4d
 8003202:	2202      	movs	r2, #2
 8003204:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	331b      	adds	r3, #27
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	f040 8107 	bne.w	800342c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	334c      	adds	r3, #76	; 0x4c
 800322e:	2202      	movs	r2, #2
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e0fb      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	334d      	adds	r3, #77	; 0x4d
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b04      	cmp	r3, #4
 8003248:	d13a      	bne.n	80032c0 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	334d      	adds	r3, #77	; 0x4d
 800325a:	2202      	movs	r2, #2
 800325c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	334c      	adds	r3, #76	; 0x4c
 800326e:	2202      	movs	r2, #2
 8003270:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	331b      	adds	r3, #27
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b01      	cmp	r3, #1
 8003286:	f040 80d1 	bne.w	800342c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	331b      	adds	r3, #27
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	0151      	lsls	r1, r2, #5
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	440a      	add	r2, r1
 80032b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032bc:	6053      	str	r3, [r2, #4]
 80032be:	e0b5      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	334d      	adds	r3, #77	; 0x4d
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b05      	cmp	r3, #5
 80032d4:	d114      	bne.n	8003300 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	334d      	adds	r3, #77	; 0x4d
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	334c      	adds	r3, #76	; 0x4c
 80032fa:	2202      	movs	r2, #2
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	e095      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	334d      	adds	r3, #77	; 0x4d
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b06      	cmp	r3, #6
 8003314:	d114      	bne.n	8003340 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	334d      	adds	r3, #77	; 0x4d
 8003326:	2202      	movs	r2, #2
 8003328:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	334c      	adds	r3, #76	; 0x4c
 800333a:	2205      	movs	r2, #5
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	e075      	b.n	800342c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	334d      	adds	r3, #77	; 0x4d
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b07      	cmp	r3, #7
 8003354:	d00a      	beq.n	800336c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	334d      	adds	r3, #77	; 0x4d
 8003366:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003368:	2b09      	cmp	r3, #9
 800336a:	d170      	bne.n	800344e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	334d      	adds	r3, #77	; 0x4d
 800337c:	2202      	movs	r2, #2
 800337e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	3344      	adds	r3, #68	; 0x44
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	1c59      	adds	r1, r3, #1
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4403      	add	r3, r0
 80033a0:	3344      	adds	r3, #68	; 0x44
 80033a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	3344      	adds	r3, #68	; 0x44
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d914      	bls.n	80033e4 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	3344      	adds	r3, #68	; 0x44
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	334c      	adds	r3, #76	; 0x4c
 80033de:	2204      	movs	r2, #4
 80033e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033e2:	e022      	b.n	800342a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	334c      	adds	r3, #76	; 0x4c
 80033f4:	2202      	movs	r2, #2
 80033f6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800340e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003416:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4413      	add	r3, r2
 8003420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003424:	461a      	mov	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800342a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	334c      	adds	r3, #76	; 0x4c
 800343c:	781a      	ldrb	r2, [r3, #0]
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	4619      	mov	r1, r3
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f005 fc48 	bl	8008cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003448:	e002      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800344e:	bf00      	nop
  }
}
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b08a      	sub	sp, #40	; 0x28
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	0c5b      	lsrs	r3, r3, #17
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800348a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d004      	beq.n	800349c <HCD_RXQLVL_IRQHandler+0x46>
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b05      	cmp	r3, #5
 8003496:	f000 80b6 	beq.w	8003606 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800349a:	e0b7      	b.n	800360c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80b3 	beq.w	800360a <HCD_RXQLVL_IRQHandler+0x1b4>
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	332c      	adds	r3, #44	; 0x2c
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80a7 	beq.w	800360a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	3338      	adds	r3, #56	; 0x38
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	18d1      	adds	r1, r2, r3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4403      	add	r3, r0
 80034e0:	3334      	adds	r3, #52	; 0x34
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4299      	cmp	r1, r3
 80034e6:	f200 8083 	bhi.w	80035f0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	332c      	adds	r3, #44	; 0x2c
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	b292      	uxth	r2, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f002 fa6f 	bl	80059e8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4613      	mov	r3, r2
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	332c      	adds	r3, #44	; 0x2c
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	18d1      	adds	r1, r2, r3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4403      	add	r3, r0
 800352e:	332c      	adds	r3, #44	; 0x2c
 8003530:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3338      	adds	r3, #56	; 0x38
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	18d1      	adds	r1, r2, r3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4403      	add	r3, r0
 8003556:	3338      	adds	r3, #56	; 0x38
 8003558:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	4413      	add	r3, r2
 8003562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	0cdb      	lsrs	r3, r3, #19
 800356a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800356e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	3328      	adds	r3, #40	; 0x28
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4293      	cmp	r3, r2
 8003588:	d13f      	bne.n	800360a <HCD_RXQLVL_IRQHandler+0x1b4>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d03c      	beq.n	800360a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035a6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035ae:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035bc:	461a      	mov	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	333c      	adds	r3, #60	; 0x3c
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	f083 0301 	eor.w	r3, r3, #1
 80035d8:	b2d8      	uxtb	r0, r3
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	333c      	adds	r3, #60	; 0x3c
 80035ea:	4602      	mov	r2, r0
 80035ec:	701a      	strb	r2, [r3, #0]
      break;
 80035ee:	e00c      	b.n	800360a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	334c      	adds	r3, #76	; 0x4c
 8003600:	2204      	movs	r2, #4
 8003602:	701a      	strb	r2, [r3, #0]
      break;
 8003604:	e001      	b.n	800360a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003606:	bf00      	nop
 8003608:	e000      	b.n	800360c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800360a:	bf00      	nop
  }
}
 800360c:	bf00      	nop
 800360e:	3728      	adds	r7, #40	; 0x28
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003640:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b02      	cmp	r3, #2
 800364a:	d10b      	bne.n	8003664 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	d102      	bne.n	800365c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f005 fb22 	bl	8008ca0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f043 0302 	orr.w	r3, r3, #2
 8003662:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b08      	cmp	r3, #8
 800366c:	d132      	bne.n	80036d4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f043 0308 	orr.w	r3, r3, #8
 8003674:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b04      	cmp	r3, #4
 800367e:	d126      	bne.n	80036ce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7a5b      	ldrb	r3, [r3, #9]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d113      	bne.n	80036b0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800368e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003692:	d106      	bne.n	80036a2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2102      	movs	r1, #2
 800369a:	4618      	mov	r0, r3
 800369c:	f002 fb34 	bl	8005d08 <USB_InitFSLSPClkSel>
 80036a0:	e011      	b.n	80036c6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2101      	movs	r1, #1
 80036a8:	4618      	mov	r0, r3
 80036aa:	f002 fb2d 	bl	8005d08 <USB_InitFSLSPClkSel>
 80036ae:	e00a      	b.n	80036c6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	79db      	ldrb	r3, [r3, #7]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d106      	bne.n	80036c6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036be:	461a      	mov	r2, r3
 80036c0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80036c4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f005 fb14 	bl	8008cf4 <HAL_HCD_PortEnabled_Callback>
 80036cc:	e002      	b.n	80036d4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f005 fb1e 	bl	8008d10 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d103      	bne.n	80036e6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f043 0320 	orr.w	r3, r3, #32
 80036e4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	6013      	str	r3, [r2, #0]
}
 80036f2:	bf00      	nop
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e12b      	b.n	8003966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fd f954 	bl	80009d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2224      	movs	r2, #36	; 0x24
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800374e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800375e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003760:	f001 fa20 	bl	8004ba4 <HAL_RCC_GetPCLK1Freq>
 8003764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4a81      	ldr	r2, [pc, #516]	; (8003970 <HAL_I2C_Init+0x274>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d807      	bhi.n	8003780 <HAL_I2C_Init+0x84>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4a80      	ldr	r2, [pc, #512]	; (8003974 <HAL_I2C_Init+0x278>)
 8003774:	4293      	cmp	r3, r2
 8003776:	bf94      	ite	ls
 8003778:	2301      	movls	r3, #1
 800377a:	2300      	movhi	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e006      	b.n	800378e <HAL_I2C_Init+0x92>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a7d      	ldr	r2, [pc, #500]	; (8003978 <HAL_I2C_Init+0x27c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	bf94      	ite	ls
 8003788:	2301      	movls	r3, #1
 800378a:	2300      	movhi	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e0e7      	b.n	8003966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a78      	ldr	r2, [pc, #480]	; (800397c <HAL_I2C_Init+0x280>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	0c9b      	lsrs	r3, r3, #18
 80037a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a6a      	ldr	r2, [pc, #424]	; (8003970 <HAL_I2C_Init+0x274>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d802      	bhi.n	80037d0 <HAL_I2C_Init+0xd4>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3301      	adds	r3, #1
 80037ce:	e009      	b.n	80037e4 <HAL_I2C_Init+0xe8>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	4a69      	ldr	r2, [pc, #420]	; (8003980 <HAL_I2C_Init+0x284>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	3301      	adds	r3, #1
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	495c      	ldr	r1, [pc, #368]	; (8003970 <HAL_I2C_Init+0x274>)
 8003800:	428b      	cmp	r3, r1
 8003802:	d819      	bhi.n	8003838 <HAL_I2C_Init+0x13c>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e59      	subs	r1, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003812:	1c59      	adds	r1, r3, #1
 8003814:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003818:	400b      	ands	r3, r1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_I2C_Init+0x138>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1e59      	subs	r1, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fbb1 f3f3 	udiv	r3, r1, r3
 800382c:	3301      	adds	r3, #1
 800382e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003832:	e051      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003834:	2304      	movs	r3, #4
 8003836:	e04f      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d111      	bne.n	8003864 <HAL_I2C_Init+0x168>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1e58      	subs	r0, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6859      	ldr	r1, [r3, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	440b      	add	r3, r1
 800384e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003852:	3301      	adds	r3, #1
 8003854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e012      	b.n	800388a <HAL_I2C_Init+0x18e>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1e58      	subs	r0, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	0099      	lsls	r1, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	fbb0 f3f3 	udiv	r3, r0, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Init+0x196>
 800388e:	2301      	movs	r3, #1
 8003890:	e022      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10e      	bne.n	80038b8 <HAL_I2C_Init+0x1bc>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1e58      	subs	r0, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	440b      	add	r3, r1
 80038a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ac:	3301      	adds	r3, #1
 80038ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b6:	e00f      	b.n	80038d8 <HAL_I2C_Init+0x1dc>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e58      	subs	r0, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	0099      	lsls	r1, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	6809      	ldr	r1, [r1, #0]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69da      	ldr	r2, [r3, #28]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6911      	ldr	r1, [r2, #16]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68d2      	ldr	r2, [r2, #12]
 8003912:	4311      	orrs	r1, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	430b      	orrs	r3, r1
 800391a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	000186a0 	.word	0x000186a0
 8003974:	001e847f 	.word	0x001e847f
 8003978:	003d08ff 	.word	0x003d08ff
 800397c:	431bde83 	.word	0x431bde83
 8003980:	10624dd3 	.word	0x10624dd3

08003984 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e128      	b.n	8003be8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a90      	ldr	r2, [pc, #576]	; (8003bf0 <HAL_I2S_Init+0x26c>)
 80039ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7fd f855 	bl	8000a60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039cc:	f023 030f 	bic.w	r3, r3, #15
 80039d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2202      	movs	r2, #2
 80039d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d060      	beq.n	8003aa4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d102      	bne.n	80039f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039ea:	2310      	movs	r3, #16
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e001      	b.n	80039f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039f0:	2320      	movs	r3, #32
 80039f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d802      	bhi.n	8003a02 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a02:	2001      	movs	r0, #1
 8003a04:	f001 f9d8 	bl	8004db8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a08:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a12:	d125      	bne.n	8003a60 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d010      	beq.n	8003a3e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	461a      	mov	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	3305      	adds	r3, #5
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	e01f      	b.n	8003a7e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	461a      	mov	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	3305      	adds	r3, #5
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	e00e      	b.n	8003a7e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	461a      	mov	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7a:	3305      	adds	r3, #5
 8003a7c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4a5c      	ldr	r2, [pc, #368]	; (8003bf4 <HAL_I2S_Init+0x270>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	08db      	lsrs	r3, r3, #3
 8003a88:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	e003      	b.n	8003aac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d902      	bls.n	8003ab8 <HAL_I2S_Init+0x134>
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	2bff      	cmp	r3, #255	; 0xff
 8003ab6:	d907      	bls.n	8003ac8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	f043 0210 	orr.w	r2, r3, #16
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e08f      	b.n	8003be8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	ea42 0103 	orr.w	r1, r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ae6:	f023 030f 	bic.w	r3, r3, #15
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6851      	ldr	r1, [r2, #4]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6892      	ldr	r2, [r2, #8]
 8003af2:	4311      	orrs	r1, r2
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	68d2      	ldr	r2, [r2, #12]
 8003af8:	4311      	orrs	r1, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6992      	ldr	r2, [r2, #24]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b0a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d161      	bne.n	8003bd8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a38      	ldr	r2, [pc, #224]	; (8003bf8 <HAL_I2S_Init+0x274>)
 8003b18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a37      	ldr	r2, [pc, #220]	; (8003bfc <HAL_I2S_Init+0x278>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d101      	bne.n	8003b28 <HAL_I2S_Init+0x1a4>
 8003b24:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <HAL_I2S_Init+0x27c>)
 8003b26:	e001      	b.n	8003b2c <HAL_I2S_Init+0x1a8>
 8003b28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	4932      	ldr	r1, [pc, #200]	; (8003bfc <HAL_I2S_Init+0x278>)
 8003b34:	428a      	cmp	r2, r1
 8003b36:	d101      	bne.n	8003b3c <HAL_I2S_Init+0x1b8>
 8003b38:	4a31      	ldr	r2, [pc, #196]	; (8003c00 <HAL_I2S_Init+0x27c>)
 8003b3a:	e001      	b.n	8003b40 <HAL_I2S_Init+0x1bc>
 8003b3c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b40:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b44:	f023 030f 	bic.w	r3, r3, #15
 8003b48:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a2b      	ldr	r2, [pc, #172]	; (8003bfc <HAL_I2S_Init+0x278>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d101      	bne.n	8003b58 <HAL_I2S_Init+0x1d4>
 8003b54:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <HAL_I2S_Init+0x27c>)
 8003b56:	e001      	b.n	8003b5c <HAL_I2S_Init+0x1d8>
 8003b58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a25      	ldr	r2, [pc, #148]	; (8003bfc <HAL_I2S_Init+0x278>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d101      	bne.n	8003b6e <HAL_I2S_Init+0x1ea>
 8003b6a:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <HAL_I2S_Init+0x27c>)
 8003b6c:	e001      	b.n	8003b72 <HAL_I2S_Init+0x1ee>
 8003b6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7e:	d003      	beq.n	8003b88 <HAL_I2S_Init+0x204>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d103      	bne.n	8003b90 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	e001      	b.n	8003b94 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	897b      	ldrh	r3, [r7, #10]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bc0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a0d      	ldr	r2, [pc, #52]	; (8003bfc <HAL_I2S_Init+0x278>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2S_Init+0x24c>
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <HAL_I2S_Init+0x27c>)
 8003bce:	e001      	b.n	8003bd4 <HAL_I2S_Init+0x250>
 8003bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd4:	897a      	ldrh	r2, [r7, #10]
 8003bd6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3720      	adds	r7, #32
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	08003cfb 	.word	0x08003cfb
 8003bf4:	cccccccd 	.word	0xcccccccd
 8003bf8:	08003e11 	.word	0x08003e11
 8003bfc:	40003800 	.word	0x40003800
 8003c00:	40003400 	.word	0x40003400

08003c04 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	881a      	ldrh	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	1c9a      	adds	r2, r3, #2
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10e      	bne.n	8003c94 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c84:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff ffb8 	bl	8003c04 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	b292      	uxth	r2, r2
 8003cb0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	1c9a      	adds	r2, r3, #2
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10e      	bne.n	8003cf2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ce2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ff93 	bl	8003c18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b086      	sub	sp, #24
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d13a      	bne.n	8003d8c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d109      	bne.n	8003d34 <I2S_IRQHandler+0x3a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2a:	2b40      	cmp	r3, #64	; 0x40
 8003d2c:	d102      	bne.n	8003d34 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff ffb4 	bl	8003c9c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d126      	bne.n	8003d8c <I2S_IRQHandler+0x92>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d11f      	bne.n	8003d8c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	f043 0202 	orr.w	r2, r3, #2
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ff50 	bl	8003c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d136      	bne.n	8003e06 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d109      	bne.n	8003db6 <I2S_IRQHandler+0xbc>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dac:	2b80      	cmp	r3, #128	; 0x80
 8003dae:	d102      	bne.n	8003db6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff ff45 	bl	8003c40 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d122      	bne.n	8003e06 <I2S_IRQHandler+0x10c>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d11b      	bne.n	8003e06 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ddc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df8:	f043 0204 	orr.w	r2, r3, #4
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ff13 	bl	8003c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e06:	bf00      	nop
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a92      	ldr	r2, [pc, #584]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d101      	bne.n	8003e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e2a:	4b92      	ldr	r3, [pc, #584]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e2c:	e001      	b.n	8003e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a8b      	ldr	r2, [pc, #556]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d101      	bne.n	8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e48:	4b8a      	ldr	r3, [pc, #552]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e4a:	e001      	b.n	8003e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e5c:	d004      	beq.n	8003e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f040 8099 	bne.w	8003f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d107      	bne.n	8003e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f925 	bl	80040cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d107      	bne.n	8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f9c8 	bl	800422c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d13a      	bne.n	8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d035      	beq.n	8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a6e      	ldr	r2, [pc, #440]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003eba:	4b6e      	ldr	r3, [pc, #440]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ebc:	e001      	b.n	8003ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ebe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4969      	ldr	r1, [pc, #420]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eca:	428b      	cmp	r3, r1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ece:	4b69      	ldr	r3, [pc, #420]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ed0:	e001      	b.n	8003ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ed2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003eda:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	f043 0202 	orr.w	r2, r3, #2
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff fe88 	bl	8003c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	f040 80c3 	bne.w	80040ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80bd 	beq.w	80040ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a49      	ldr	r2, [pc, #292]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d101      	bne.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f4e:	4b49      	ldr	r3, [pc, #292]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f50:	e001      	b.n	8003f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4944      	ldr	r1, [pc, #272]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5e:	428b      	cmp	r3, r1
 8003f60:	d101      	bne.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f62:	4b44      	ldr	r3, [pc, #272]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f64:	e001      	b.n	8003f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f70:	2300      	movs	r3, #0
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	f043 0204 	orr.w	r2, r3, #4
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fe4a 	bl	8003c2c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f98:	e089      	b.n	80040ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d107      	bne.n	8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f8be 	bl	8004130 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d107      	bne.n	8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f8fd 	bl	80041c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d12f      	bne.n	8004038 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d02a      	beq.n	8004038 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ff0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d101      	bne.n	8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ffe:	e001      	b.n	8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004000:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4919      	ldr	r1, [pc, #100]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800400c:	428b      	cmp	r3, r1
 800400e:	d101      	bne.n	8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004010:	4b18      	ldr	r3, [pc, #96]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004012:	e001      	b.n	8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004014:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004018:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800401c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	f043 0202 	orr.w	r2, r3, #2
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff fdfa 	bl	8003c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b08      	cmp	r3, #8
 8004040:	d136      	bne.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d031      	beq.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a07      	ldr	r2, [pc, #28]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d101      	bne.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004058:	e001      	b.n	800405e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800405a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4902      	ldr	r1, [pc, #8]	; (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004066:	428b      	cmp	r3, r1
 8004068:	d106      	bne.n	8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800406a:	4b02      	ldr	r3, [pc, #8]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800406c:	e006      	b.n	800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800406e:	bf00      	nop
 8004070:	40003800 	.word	0x40003800
 8004074:	40003400 	.word	0x40003400
 8004078:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800407c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004080:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004090:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	f043 0204 	orr.w	r2, r3, #4
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff fdc0 	bl	8003c2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040ac:	e000      	b.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040ae:	bf00      	nop
}
 80040b0:	bf00      	nop
 80040b2:	3720      	adds	r7, #32
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	1c99      	adds	r1, r3, #2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6251      	str	r1, [r2, #36]	; 0x24
 80040de:	881a      	ldrh	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d113      	bne.n	8004126 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800410c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d106      	bne.n	8004126 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ffc9 	bl	80040b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	1c99      	adds	r1, r3, #2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6251      	str	r1, [r2, #36]	; 0x24
 8004142:	8819      	ldrh	r1, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1d      	ldr	r2, [pc, #116]	; (80041c0 <I2SEx_TxISR_I2SExt+0x90>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <I2SEx_TxISR_I2SExt+0x22>
 800414e:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <I2SEx_TxISR_I2SExt+0x94>)
 8004150:	e001      	b.n	8004156 <I2SEx_TxISR_I2SExt+0x26>
 8004152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004156:	460a      	mov	r2, r1
 8004158:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d121      	bne.n	80041b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a12      	ldr	r2, [pc, #72]	; (80041c0 <I2SEx_TxISR_I2SExt+0x90>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d101      	bne.n	8004180 <I2SEx_TxISR_I2SExt+0x50>
 800417c:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <I2SEx_TxISR_I2SExt+0x94>)
 800417e:	e001      	b.n	8004184 <I2SEx_TxISR_I2SExt+0x54>
 8004180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	490d      	ldr	r1, [pc, #52]	; (80041c0 <I2SEx_TxISR_I2SExt+0x90>)
 800418c:	428b      	cmp	r3, r1
 800418e:	d101      	bne.n	8004194 <I2SEx_TxISR_I2SExt+0x64>
 8004190:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <I2SEx_TxISR_I2SExt+0x94>)
 8004192:	e001      	b.n	8004198 <I2SEx_TxISR_I2SExt+0x68>
 8004194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004198:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800419c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ff81 	bl	80040b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40003800 	.word	0x40003800
 80041c4:	40003400 	.word	0x40003400

080041c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68d8      	ldr	r0, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	1c99      	adds	r1, r3, #2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041e0:	b282      	uxth	r2, r0
 80041e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d113      	bne.n	8004224 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800420a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff ff4a 	bl	80040b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a20      	ldr	r2, [pc, #128]	; (80042bc <I2SEx_RxISR_I2SExt+0x90>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d101      	bne.n	8004242 <I2SEx_RxISR_I2SExt+0x16>
 800423e:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <I2SEx_RxISR_I2SExt+0x94>)
 8004240:	e001      	b.n	8004246 <I2SEx_RxISR_I2SExt+0x1a>
 8004242:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004246:	68d8      	ldr	r0, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	1c99      	adds	r1, r3, #2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004252:	b282      	uxth	r2, r0
 8004254:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d121      	bne.n	80042b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a12      	ldr	r2, [pc, #72]	; (80042bc <I2SEx_RxISR_I2SExt+0x90>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d101      	bne.n	800427c <I2SEx_RxISR_I2SExt+0x50>
 8004278:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <I2SEx_RxISR_I2SExt+0x94>)
 800427a:	e001      	b.n	8004280 <I2SEx_RxISR_I2SExt+0x54>
 800427c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	490d      	ldr	r1, [pc, #52]	; (80042bc <I2SEx_RxISR_I2SExt+0x90>)
 8004288:	428b      	cmp	r3, r1
 800428a:	d101      	bne.n	8004290 <I2SEx_RxISR_I2SExt+0x64>
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <I2SEx_RxISR_I2SExt+0x94>)
 800428e:	e001      	b.n	8004294 <I2SEx_RxISR_I2SExt+0x68>
 8004290:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004294:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004298:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d106      	bne.n	80042b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff ff03 	bl	80040b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40003800 	.word	0x40003800
 80042c0:	40003400 	.word	0x40003400

080042c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e267      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d075      	beq.n	80043ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042e2:	4b88      	ldr	r3, [pc, #544]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d00c      	beq.n	8004308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ee:	4b85      	ldr	r3, [pc, #532]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d112      	bne.n	8004320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042fa:	4b82      	ldr	r3, [pc, #520]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004306:	d10b      	bne.n	8004320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004308:	4b7e      	ldr	r3, [pc, #504]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d05b      	beq.n	80043cc <HAL_RCC_OscConfig+0x108>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d157      	bne.n	80043cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e242      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d106      	bne.n	8004338 <HAL_RCC_OscConfig+0x74>
 800432a:	4b76      	ldr	r3, [pc, #472]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a75      	ldr	r2, [pc, #468]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e01d      	b.n	8004374 <HAL_RCC_OscConfig+0xb0>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x98>
 8004342:	4b70      	ldr	r3, [pc, #448]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a6f      	ldr	r2, [pc, #444]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	4b6d      	ldr	r3, [pc, #436]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6c      	ldr	r2, [pc, #432]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0xb0>
 800435c:	4b69      	ldr	r3, [pc, #420]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a68      	ldr	r2, [pc, #416]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b66      	ldr	r3, [pc, #408]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a65      	ldr	r2, [pc, #404]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 800436e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d013      	beq.n	80043a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fc fdac 	bl	8000ed8 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004384:	f7fc fda8 	bl	8000ed8 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e207      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b5b      	ldr	r3, [pc, #364]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0xc0>
 80043a2:	e014      	b.n	80043ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fc fd98 	bl	8000ed8 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043ac:	f7fc fd94 	bl	8000ed8 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e1f3      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043be:	4b51      	ldr	r3, [pc, #324]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0xe8>
 80043ca:	e000      	b.n	80043ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d063      	beq.n	80044a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043da:	4b4a      	ldr	r3, [pc, #296]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d11c      	bne.n	800442c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043f2:	4b44      	ldr	r3, [pc, #272]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d116      	bne.n	800442c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fe:	4b41      	ldr	r3, [pc, #260]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_RCC_OscConfig+0x152>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d001      	beq.n	8004416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e1c7      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004416:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4937      	ldr	r1, [pc, #220]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442a:	e03a      	b.n	80044a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d020      	beq.n	8004476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004434:	4b34      	ldr	r3, [pc, #208]	; (8004508 <HAL_RCC_OscConfig+0x244>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fc fd4d 	bl	8000ed8 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004442:	f7fc fd49 	bl	8000ed8 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e1a8      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004454:	4b2b      	ldr	r3, [pc, #172]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004460:	4b28      	ldr	r3, [pc, #160]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4925      	ldr	r1, [pc, #148]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]
 8004474:	e015      	b.n	80044a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004476:	4b24      	ldr	r3, [pc, #144]	; (8004508 <HAL_RCC_OscConfig+0x244>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fc fd2c 	bl	8000ed8 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004484:	f7fc fd28 	bl	8000ed8 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e187      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004496:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d036      	beq.n	800451c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d016      	beq.n	80044e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b6:	4b15      	ldr	r3, [pc, #84]	; (800450c <HAL_RCC_OscConfig+0x248>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044bc:	f7fc fd0c 	bl	8000ed8 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c4:	f7fc fd08 	bl	8000ed8 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e167      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <HAL_RCC_OscConfig+0x240>)
 80044d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x200>
 80044e2:	e01b      	b.n	800451c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCC_OscConfig+0x248>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ea:	f7fc fcf5 	bl	8000ed8 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f0:	e00e      	b.n	8004510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f2:	f7fc fcf1 	bl	8000ed8 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d907      	bls.n	8004510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e150      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
 8004504:	40023800 	.word	0x40023800
 8004508:	42470000 	.word	0x42470000
 800450c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004510:	4b88      	ldr	r3, [pc, #544]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1ea      	bne.n	80044f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8097 	beq.w	8004658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452a:	2300      	movs	r3, #0
 800452c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452e:	4b81      	ldr	r3, [pc, #516]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10f      	bne.n	800455a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	4b7d      	ldr	r3, [pc, #500]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	4a7c      	ldr	r2, [pc, #496]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004548:	6413      	str	r3, [r2, #64]	; 0x40
 800454a:	4b7a      	ldr	r3, [pc, #488]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004556:	2301      	movs	r3, #1
 8004558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455a:	4b77      	ldr	r3, [pc, #476]	; (8004738 <HAL_RCC_OscConfig+0x474>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d118      	bne.n	8004598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004566:	4b74      	ldr	r3, [pc, #464]	; (8004738 <HAL_RCC_OscConfig+0x474>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a73      	ldr	r2, [pc, #460]	; (8004738 <HAL_RCC_OscConfig+0x474>)
 800456c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004572:	f7fc fcb1 	bl	8000ed8 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457a:	f7fc fcad 	bl	8000ed8 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e10c      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458c:	4b6a      	ldr	r3, [pc, #424]	; (8004738 <HAL_RCC_OscConfig+0x474>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d106      	bne.n	80045ae <HAL_RCC_OscConfig+0x2ea>
 80045a0:	4b64      	ldr	r3, [pc, #400]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a4:	4a63      	ldr	r2, [pc, #396]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	6713      	str	r3, [r2, #112]	; 0x70
 80045ac:	e01c      	b.n	80045e8 <HAL_RCC_OscConfig+0x324>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b05      	cmp	r3, #5
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCC_OscConfig+0x30c>
 80045b6:	4b5f      	ldr	r3, [pc, #380]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	4a5e      	ldr	r2, [pc, #376]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045bc:	f043 0304 	orr.w	r3, r3, #4
 80045c0:	6713      	str	r3, [r2, #112]	; 0x70
 80045c2:	4b5c      	ldr	r3, [pc, #368]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	4a5b      	ldr	r2, [pc, #364]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	6713      	str	r3, [r2, #112]	; 0x70
 80045ce:	e00b      	b.n	80045e8 <HAL_RCC_OscConfig+0x324>
 80045d0:	4b58      	ldr	r3, [pc, #352]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	4a57      	ldr	r2, [pc, #348]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	6713      	str	r3, [r2, #112]	; 0x70
 80045dc:	4b55      	ldr	r3, [pc, #340]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	4a54      	ldr	r2, [pc, #336]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80045e2:	f023 0304 	bic.w	r3, r3, #4
 80045e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d015      	beq.n	800461c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f0:	f7fc fc72 	bl	8000ed8 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f6:	e00a      	b.n	800460e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f8:	f7fc fc6e 	bl	8000ed8 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e0cb      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460e:	4b49      	ldr	r3, [pc, #292]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0ee      	beq.n	80045f8 <HAL_RCC_OscConfig+0x334>
 800461a:	e014      	b.n	8004646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461c:	f7fc fc5c 	bl	8000ed8 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004622:	e00a      	b.n	800463a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004624:	f7fc fc58 	bl	8000ed8 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e0b5      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463a:	4b3e      	ldr	r3, [pc, #248]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1ee      	bne.n	8004624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004646:	7dfb      	ldrb	r3, [r7, #23]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d105      	bne.n	8004658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464c:	4b39      	ldr	r3, [pc, #228]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	4a38      	ldr	r2, [pc, #224]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80a1 	beq.w	80047a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004662:	4b34      	ldr	r3, [pc, #208]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	2b08      	cmp	r3, #8
 800466c:	d05c      	beq.n	8004728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d141      	bne.n	80046fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004676:	4b31      	ldr	r3, [pc, #196]	; (800473c <HAL_RCC_OscConfig+0x478>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7fc fc2c 	bl	8000ed8 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004684:	f7fc fc28 	bl	8000ed8 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e087      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004696:	4b27      	ldr	r3, [pc, #156]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69da      	ldr	r2, [r3, #28]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	019b      	lsls	r3, r3, #6
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	3b01      	subs	r3, #1
 80046bc:	041b      	lsls	r3, r3, #16
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	061b      	lsls	r3, r3, #24
 80046c6:	491b      	ldr	r1, [pc, #108]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046cc:	4b1b      	ldr	r3, [pc, #108]	; (800473c <HAL_RCC_OscConfig+0x478>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d2:	f7fc fc01 	bl	8000ed8 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046da:	f7fc fbfd 	bl	8000ed8 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e05c      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ec:	4b11      	ldr	r3, [pc, #68]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0x416>
 80046f8:	e054      	b.n	80047a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <HAL_RCC_OscConfig+0x478>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004700:	f7fc fbea 	bl	8000ed8 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004708:	f7fc fbe6 	bl	8000ed8 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e045      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <HAL_RCC_OscConfig+0x470>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x444>
 8004726:	e03d      	b.n	80047a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d107      	bne.n	8004740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e038      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
 8004734:	40023800 	.word	0x40023800
 8004738:	40007000 	.word	0x40007000
 800473c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004740:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <HAL_RCC_OscConfig+0x4ec>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d028      	beq.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d121      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d11a      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004770:	4013      	ands	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004778:	4293      	cmp	r3, r2
 800477a:	d111      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	3b01      	subs	r3, #1
 800478a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800478c:	429a      	cmp	r2, r3
 800478e:	d107      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d001      	beq.n	80047a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800

080047b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0cc      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c8:	4b68      	ldr	r3, [pc, #416]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d90c      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d6:	4b65      	ldr	r3, [pc, #404]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b63      	ldr	r3, [pc, #396]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e0b8      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d020      	beq.n	800483e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004808:	4b59      	ldr	r3, [pc, #356]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4a58      	ldr	r2, [pc, #352]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004820:	4b53      	ldr	r3, [pc, #332]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	4a52      	ldr	r2, [pc, #328]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800482a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800482c:	4b50      	ldr	r3, [pc, #320]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	494d      	ldr	r1, [pc, #308]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d044      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d107      	bne.n	8004862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	4b47      	ldr	r3, [pc, #284]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d119      	bne.n	8004892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e07f      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d003      	beq.n	8004872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486e:	2b03      	cmp	r3, #3
 8004870:	d107      	bne.n	8004882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004872:	4b3f      	ldr	r3, [pc, #252]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e06f      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004882:	4b3b      	ldr	r3, [pc, #236]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e067      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004892:	4b37      	ldr	r3, [pc, #220]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f023 0203 	bic.w	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4934      	ldr	r1, [pc, #208]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a4:	f7fc fb18 	bl	8000ed8 <HAL_GetTick>
 80048a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048aa:	e00a      	b.n	80048c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ac:	f7fc fb14 	bl	8000ed8 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e04f      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c2:	4b2b      	ldr	r3, [pc, #172]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 020c 	and.w	r2, r3, #12
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d1eb      	bne.n	80048ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048d4:	4b25      	ldr	r3, [pc, #148]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d20c      	bcs.n	80048fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e2:	4b22      	ldr	r3, [pc, #136]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ea:	4b20      	ldr	r3, [pc, #128]	; (800496c <HAL_RCC_ClockConfig+0x1b8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e032      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004908:	4b19      	ldr	r3, [pc, #100]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4916      	ldr	r1, [pc, #88]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004926:	4b12      	ldr	r3, [pc, #72]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	490e      	ldr	r1, [pc, #56]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	4313      	orrs	r3, r2
 8004938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800493a:	f000 f821 	bl	8004980 <HAL_RCC_GetSysClockFreq>
 800493e:	4602      	mov	r2, r0
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	490a      	ldr	r1, [pc, #40]	; (8004974 <HAL_RCC_ClockConfig+0x1c0>)
 800494c:	5ccb      	ldrb	r3, [r1, r3]
 800494e:	fa22 f303 	lsr.w	r3, r2, r3
 8004952:	4a09      	ldr	r2, [pc, #36]	; (8004978 <HAL_RCC_ClockConfig+0x1c4>)
 8004954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <HAL_RCC_ClockConfig+0x1c8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7fc fa78 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40023c00 	.word	0x40023c00
 8004970:	40023800 	.word	0x40023800
 8004974:	080093dc 	.word	0x080093dc
 8004978:	20000004 	.word	0x20000004
 800497c:	20000008 	.word	0x20000008

08004980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004984:	b094      	sub	sp, #80	; 0x50
 8004986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	647b      	str	r3, [r7, #68]	; 0x44
 800498c:	2300      	movs	r3, #0
 800498e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004990:	2300      	movs	r3, #0
 8004992:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004998:	4b79      	ldr	r3, [pc, #484]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 030c 	and.w	r3, r3, #12
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d00d      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0x40>
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	f200 80e1 	bhi.w	8004b6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0x34>
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d003      	beq.n	80049ba <HAL_RCC_GetSysClockFreq+0x3a>
 80049b2:	e0db      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b4:	4b73      	ldr	r3, [pc, #460]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x204>)
 80049b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049b8:	e0db      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049ba:	4b73      	ldr	r3, [pc, #460]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x208>)
 80049bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049be:	e0d8      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049c0:	4b6f      	ldr	r3, [pc, #444]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ca:	4b6d      	ldr	r3, [pc, #436]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d063      	beq.n	8004a9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d6:	4b6a      	ldr	r3, [pc, #424]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	2200      	movs	r2, #0
 80049de:	63bb      	str	r3, [r7, #56]	; 0x38
 80049e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e8:	633b      	str	r3, [r7, #48]	; 0x30
 80049ea:	2300      	movs	r3, #0
 80049ec:	637b      	str	r3, [r7, #52]	; 0x34
 80049ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049f2:	4622      	mov	r2, r4
 80049f4:	462b      	mov	r3, r5
 80049f6:	f04f 0000 	mov.w	r0, #0
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	0159      	lsls	r1, r3, #5
 8004a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a04:	0150      	lsls	r0, r2, #5
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	1a51      	subs	r1, r2, r1
 8004a0e:	6139      	str	r1, [r7, #16]
 8004a10:	4629      	mov	r1, r5
 8004a12:	eb63 0301 	sbc.w	r3, r3, r1
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a24:	4659      	mov	r1, fp
 8004a26:	018b      	lsls	r3, r1, #6
 8004a28:	4651      	mov	r1, sl
 8004a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a2e:	4651      	mov	r1, sl
 8004a30:	018a      	lsls	r2, r1, #6
 8004a32:	4651      	mov	r1, sl
 8004a34:	ebb2 0801 	subs.w	r8, r2, r1
 8004a38:	4659      	mov	r1, fp
 8004a3a:	eb63 0901 	sbc.w	r9, r3, r1
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a52:	4690      	mov	r8, r2
 8004a54:	4699      	mov	r9, r3
 8004a56:	4623      	mov	r3, r4
 8004a58:	eb18 0303 	adds.w	r3, r8, r3
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	462b      	mov	r3, r5
 8004a60:	eb49 0303 	adc.w	r3, r9, r3
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a72:	4629      	mov	r1, r5
 8004a74:	024b      	lsls	r3, r1, #9
 8004a76:	4621      	mov	r1, r4
 8004a78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	024a      	lsls	r2, r1, #9
 8004a80:	4610      	mov	r0, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a86:	2200      	movs	r2, #0
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a90:	f7fb fba2 	bl	80001d8 <__aeabi_uldivmod>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4613      	mov	r3, r2
 8004a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a9c:	e058      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9e:	4b38      	ldr	r3, [pc, #224]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	099b      	lsrs	r3, r3, #6
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aae:	623b      	str	r3, [r7, #32]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ab8:	4642      	mov	r2, r8
 8004aba:	464b      	mov	r3, r9
 8004abc:	f04f 0000 	mov.w	r0, #0
 8004ac0:	f04f 0100 	mov.w	r1, #0
 8004ac4:	0159      	lsls	r1, r3, #5
 8004ac6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aca:	0150      	lsls	r0, r2, #5
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ae8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004aec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004af0:	ebb2 040a 	subs.w	r4, r2, sl
 8004af4:	eb63 050b 	sbc.w	r5, r3, fp
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	00eb      	lsls	r3, r5, #3
 8004b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b06:	00e2      	lsls	r2, r4, #3
 8004b08:	4614      	mov	r4, r2
 8004b0a:	461d      	mov	r5, r3
 8004b0c:	4643      	mov	r3, r8
 8004b0e:	18e3      	adds	r3, r4, r3
 8004b10:	603b      	str	r3, [r7, #0]
 8004b12:	464b      	mov	r3, r9
 8004b14:	eb45 0303 	adc.w	r3, r5, r3
 8004b18:	607b      	str	r3, [r7, #4]
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b26:	4629      	mov	r1, r5
 8004b28:	028b      	lsls	r3, r1, #10
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b30:	4621      	mov	r1, r4
 8004b32:	028a      	lsls	r2, r1, #10
 8004b34:	4610      	mov	r0, r2
 8004b36:	4619      	mov	r1, r3
 8004b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	61fa      	str	r2, [r7, #28]
 8004b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b44:	f7fb fb48 	bl	80001d8 <__aeabi_uldivmod>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b6a:	e002      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3750      	adds	r7, #80	; 0x50
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023800 	.word	0x40023800
 8004b84:	00f42400 	.word	0x00f42400
 8004b88:	007a1200 	.word	0x007a1200

08004b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b90:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b92:	681b      	ldr	r3, [r3, #0]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000004 	.word	0x20000004

08004ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ba8:	f7ff fff0 	bl	8004b8c <HAL_RCC_GetHCLKFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	0a9b      	lsrs	r3, r3, #10
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	080093ec 	.word	0x080093ec

08004bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bd0:	f7ff ffdc 	bl	8004b8c <HAL_RCC_GetHCLKFreq>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	4b05      	ldr	r3, [pc, #20]	; (8004bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	0b5b      	lsrs	r3, r3, #13
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	4903      	ldr	r1, [pc, #12]	; (8004bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004be2:	5ccb      	ldrb	r3, [r1, r3]
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	080093ec 	.word	0x080093ec

08004bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d105      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d035      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c1c:	4b62      	ldr	r3, [pc, #392]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c22:	f7fc f959 	bl	8000ed8 <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c2a:	f7fc f955 	bl	8000ed8 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e0b0      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c3c:	4b5b      	ldr	r3, [pc, #364]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f0      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	019a      	lsls	r2, r3, #6
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	071b      	lsls	r3, r3, #28
 8004c54:	4955      	ldr	r1, [pc, #340]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c5c:	4b52      	ldr	r3, [pc, #328]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c62:	f7fc f939 	bl	8000ed8 <HAL_GetTick>
 8004c66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c68:	e008      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c6a:	f7fc f935 	bl	8000ed8 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e090      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c7c:	4b4b      	ldr	r3, [pc, #300]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8083 	beq.w	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	4b44      	ldr	r3, [pc, #272]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	4a43      	ldr	r2, [pc, #268]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca6:	4b41      	ldr	r3, [pc, #260]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cb2:	4b3f      	ldr	r3, [pc, #252]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a3e      	ldr	r2, [pc, #248]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cbe:	f7fc f90b 	bl	8000ed8 <HAL_GetTick>
 8004cc2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cc6:	f7fc f907 	bl	8000ed8 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e062      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cd8:	4b35      	ldr	r3, [pc, #212]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ce4:	4b31      	ldr	r3, [pc, #196]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d02f      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d028      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d02:	4b2a      	ldr	r3, [pc, #168]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d0c:	4b29      	ldr	r3, [pc, #164]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d12:	4b28      	ldr	r3, [pc, #160]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d18:	4a24      	ldr	r2, [pc, #144]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d1e:	4b23      	ldr	r3, [pc, #140]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d114      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d2a:	f7fc f8d5 	bl	8000ed8 <HAL_GetTick>
 8004d2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d30:	e00a      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d32:	f7fc f8d1 	bl	8000ed8 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e02a      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d48:	4b18      	ldr	r3, [pc, #96]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ee      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d60:	d10d      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d62:	4b12      	ldr	r3, [pc, #72]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d76:	490d      	ldr	r1, [pc, #52]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	608b      	str	r3, [r1, #8]
 8004d7c:	e005      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	4a0a      	ldr	r2, [pc, #40]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d88:	6093      	str	r3, [r2, #8]
 8004d8a:	4b08      	ldr	r3, [pc, #32]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d96:	4905      	ldr	r1, [pc, #20]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	42470068 	.word	0x42470068
 8004dac:	40023800 	.word	0x40023800
 8004db0:	40007000 	.word	0x40007000
 8004db4:	42470e40 	.word	0x42470e40

08004db8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d13f      	bne.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004dd6:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d006      	beq.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dec:	d12f      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dee:	4b1f      	ldr	r3, [pc, #124]	; (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004df0:	617b      	str	r3, [r7, #20]
          break;
 8004df2:	e02f      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004df4:	4b1c      	ldr	r3, [pc, #112]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e00:	d108      	bne.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e02:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e0a:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	e007      	b.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e14:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e1c:	4a15      	ldr	r2, [pc, #84]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e22:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e24:	4b10      	ldr	r3, [pc, #64]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e2a:	099b      	lsrs	r3, r3, #6
 8004e2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e38:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e3e:	0f1b      	lsrs	r3, r3, #28
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4a:	617b      	str	r3, [r7, #20]
          break;
 8004e4c:	e002      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
          break;
 8004e52:	bf00      	nop
        }
      }
      break;
 8004e54:	e000      	b.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004e56:	bf00      	nop
    }
  }
  return frequency;
 8004e58:	697b      	ldr	r3, [r7, #20]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	00bb8000 	.word	0x00bb8000
 8004e70:	007a1200 	.word	0x007a1200
 8004e74:	00f42400 	.word	0x00f42400

08004e78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e07b      	b.n	8004f82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d108      	bne.n	8004ea4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e9a:	d009      	beq.n	8004eb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	61da      	str	r2, [r3, #28]
 8004ea2:	e005      	b.n	8004eb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fb fe48 	bl	8000b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ee6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	ea42 0103 	orr.w	r1, r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	0c1b      	lsrs	r3, r3, #16
 8004f4e:	f003 0104 	and.w	r1, r3, #4
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	f003 0210 	and.w	r2, r3, #16
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e033      	b.n	8005004 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7fb fe1d 	bl	8000bf0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f90a 	bl	80051d8 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fd2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695a      	ldr	r2, [r3, #20]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fe2:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ff2:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	; 0x28
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	4613      	mov	r3, r2
 800501a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b01      	cmp	r3, #1
 8005026:	d17c      	bne.n	8005122 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <HAL_USART_Transmit+0x28>
 800502e:	88fb      	ldrh	r3, [r7, #6]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e075      	b.n	8005124 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_USART_Transmit+0x3a>
 8005042:	2302      	movs	r3, #2
 8005044:	e06e      	b.n	8005124 <HAL_USART_Transmit+0x118>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2212      	movs	r2, #18
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800505c:	f7fb ff3c 	bl	8000ed8 <HAL_GetTick>
 8005060:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	88fa      	ldrh	r2, [r7, #6]
 8005066:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	88fa      	ldrh	r2, [r7, #6]
 800506c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005076:	d108      	bne.n	800508a <HAL_USART_Transmit+0x7e>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8005080:	2300      	movs	r3, #0
 8005082:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	61bb      	str	r3, [r7, #24]
 8005088:	e003      	b.n	8005092 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8005092:	e02a      	b.n	80050ea <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	2200      	movs	r2, #0
 800509c:	2180      	movs	r1, #128	; 0x80
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f844 	bl	800512c <USART_WaitOnFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e03a      	b.n	8005124 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10b      	bne.n	80050cc <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050c2:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	3302      	adds	r3, #2
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	e007      	b.n	80050dc <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	781a      	ldrb	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	3301      	adds	r3, #1
 80050da:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1cf      	bne.n	8005094 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2200      	movs	r2, #0
 80050fc:	2140      	movs	r1, #64	; 0x40
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f814 	bl	800512c <USART_WaitOnFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e00a      	b.n	8005124 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	e000      	b.n	8005124 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8005122:	2302      	movs	r3, #2
  }
}
 8005124:	4618      	mov	r0, r3
 8005126:	3720      	adds	r7, #32
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800513c:	e038      	b.n	80051b0 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d034      	beq.n	80051b0 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <USART_WaitOnFlagUntilTimeout+0x30>
 800514c:	f7fb fec4 	bl	8000ed8 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	429a      	cmp	r2, r3
 800515a:	d229      	bcs.n	80051b0 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800516a:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0220 	bic.w	r2, r2, #32
 800517a:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800518a:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0201 	bic.w	r2, r2, #1
 800519a:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e00f      	b.n	80051d0 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	4013      	ands	r3, r2
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	429a      	cmp	r2, r3
 80051be:	bf0c      	ite	eq
 80051c0:	2301      	moveq	r3, #1
 80051c2:	2300      	movne	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	79fb      	ldrb	r3, [r7, #7]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d0b7      	beq.n	800513e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80051d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051dc:	b0c6      	sub	sp, #280	; 0x118
 80051de:	af00      	add	r7, sp, #0
 80051e0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80051ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68d9      	ldr	r1, [r3, #12]
 80051f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	f021 030c 	bic.w	r3, r1, #12
 80051fc:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80051fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 800520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005212:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8005216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800521a:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800521c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005220:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8005222:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8005224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	431a      	orrs	r2, r3
 800522c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005230:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8005232:	431a      	orrs	r2, r3
 8005234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005238:	4313      	orrs	r3, r2
 800523a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800523e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8005242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800524c:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 800524e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005262:	f023 030c 	bic.w	r3, r3, #12
 8005266:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800526a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	431a      	orrs	r2, r3
 8005278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	431a      	orrs	r2, r3
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005284:	4313      	orrs	r3, r2
 8005286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800528a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800528e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005298:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 800529a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6959      	ldr	r1, [r3, #20]
 80052a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 80052ac:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 80052ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4b8b      	ldr	r3, [pc, #556]	; (80054e4 <USART_SetConfig+0x30c>)
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d006      	beq.n	80052c8 <USART_SetConfig+0xf0>
 80052ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b89      	ldr	r3, [pc, #548]	; (80054e8 <USART_SetConfig+0x310>)
 80052c2:	429a      	cmp	r2, r3
 80052c4:	f040 8114 	bne.w	80054f0 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052c8:	f7ff fc80 	bl	8004bcc <HAL_RCC_GetPCLK2Freq>
 80052cc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80052d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052d4:	2200      	movs	r2, #0
 80052d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052da:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80052de:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80052e2:	4622      	mov	r2, r4
 80052e4:	462b      	mov	r3, r5
 80052e6:	1891      	adds	r1, r2, r2
 80052e8:	6739      	str	r1, [r7, #112]	; 0x70
 80052ea:	415b      	adcs	r3, r3
 80052ec:	677b      	str	r3, [r7, #116]	; 0x74
 80052ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80052f2:	4621      	mov	r1, r4
 80052f4:	eb12 0801 	adds.w	r8, r2, r1
 80052f8:	4629      	mov	r1, r5
 80052fa:	eb43 0901 	adc.w	r9, r3, r1
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800530a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800530e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005312:	4690      	mov	r8, r2
 8005314:	4699      	mov	r9, r3
 8005316:	4623      	mov	r3, r4
 8005318:	eb18 0303 	adds.w	r3, r8, r3
 800531c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005320:	462b      	mov	r3, r5
 8005322:	eb49 0303 	adc.w	r3, r9, r3
 8005326:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800532a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005336:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800533a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800533e:	460b      	mov	r3, r1
 8005340:	18db      	adds	r3, r3, r3
 8005342:	66bb      	str	r3, [r7, #104]	; 0x68
 8005344:	4613      	mov	r3, r2
 8005346:	eb42 0303 	adc.w	r3, r2, r3
 800534a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800534c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005350:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8005354:	f7fa ff40 	bl	80001d8 <__aeabi_uldivmod>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4b63      	ldr	r3, [pc, #396]	; (80054ec <USART_SetConfig+0x314>)
 800535e:	fba3 2302 	umull	r2, r3, r3, r2
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	011c      	lsls	r4, r3, #4
 8005366:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800536a:	2200      	movs	r2, #0
 800536c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005370:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005374:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8005378:	4642      	mov	r2, r8
 800537a:	464b      	mov	r3, r9
 800537c:	1891      	adds	r1, r2, r2
 800537e:	6639      	str	r1, [r7, #96]	; 0x60
 8005380:	415b      	adcs	r3, r3
 8005382:	667b      	str	r3, [r7, #100]	; 0x64
 8005384:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005388:	4641      	mov	r1, r8
 800538a:	1851      	adds	r1, r2, r1
 800538c:	65b9      	str	r1, [r7, #88]	; 0x58
 800538e:	4649      	mov	r1, r9
 8005390:	414b      	adcs	r3, r1
 8005392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80053a0:	4659      	mov	r1, fp
 80053a2:	00cb      	lsls	r3, r1, #3
 80053a4:	4651      	mov	r1, sl
 80053a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053aa:	4651      	mov	r1, sl
 80053ac:	00ca      	lsls	r2, r1, #3
 80053ae:	4610      	mov	r0, r2
 80053b0:	4619      	mov	r1, r3
 80053b2:	4603      	mov	r3, r0
 80053b4:	4642      	mov	r2, r8
 80053b6:	189b      	adds	r3, r3, r2
 80053b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053bc:	464b      	mov	r3, r9
 80053be:	460a      	mov	r2, r1
 80053c0:	eb42 0303 	adc.w	r3, r2, r3
 80053c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053d4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053d8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053dc:	460b      	mov	r3, r1
 80053de:	18db      	adds	r3, r3, r3
 80053e0:	653b      	str	r3, [r7, #80]	; 0x50
 80053e2:	4613      	mov	r3, r2
 80053e4:	eb42 0303 	adc.w	r3, r2, r3
 80053e8:	657b      	str	r3, [r7, #84]	; 0x54
 80053ea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053ee:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053f2:	f7fa fef1 	bl	80001d8 <__aeabi_uldivmod>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4611      	mov	r1, r2
 80053fc:	4b3b      	ldr	r3, [pc, #236]	; (80054ec <USART_SetConfig+0x314>)
 80053fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	2264      	movs	r2, #100	; 0x64
 8005406:	fb02 f303 	mul.w	r3, r2, r3
 800540a:	1acb      	subs	r3, r1, r3
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005412:	4b36      	ldr	r3, [pc, #216]	; (80054ec <USART_SetConfig+0x314>)
 8005414:	fba3 2302 	umull	r2, r3, r3, r2
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005420:	441c      	add	r4, r3
 8005422:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005426:	2200      	movs	r2, #0
 8005428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800542c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005430:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005434:	4642      	mov	r2, r8
 8005436:	464b      	mov	r3, r9
 8005438:	1891      	adds	r1, r2, r2
 800543a:	64b9      	str	r1, [r7, #72]	; 0x48
 800543c:	415b      	adcs	r3, r3
 800543e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005440:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005444:	4641      	mov	r1, r8
 8005446:	1851      	adds	r1, r2, r1
 8005448:	6439      	str	r1, [r7, #64]	; 0x40
 800544a:	4649      	mov	r1, r9
 800544c:	414b      	adcs	r3, r1
 800544e:	647b      	str	r3, [r7, #68]	; 0x44
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 800545c:	4659      	mov	r1, fp
 800545e:	00cb      	lsls	r3, r1, #3
 8005460:	4651      	mov	r1, sl
 8005462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005466:	4651      	mov	r1, sl
 8005468:	00ca      	lsls	r2, r1, #3
 800546a:	4610      	mov	r0, r2
 800546c:	4619      	mov	r1, r3
 800546e:	4603      	mov	r3, r0
 8005470:	4642      	mov	r2, r8
 8005472:	189b      	adds	r3, r3, r2
 8005474:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005478:	464b      	mov	r3, r9
 800547a:	460a      	mov	r2, r1
 800547c:	eb42 0303 	adc.w	r3, r2, r3
 8005480:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005490:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005494:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005498:	460b      	mov	r3, r1
 800549a:	18db      	adds	r3, r3, r3
 800549c:	63bb      	str	r3, [r7, #56]	; 0x38
 800549e:	4613      	mov	r3, r2
 80054a0:	eb42 0303 	adc.w	r3, r2, r3
 80054a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054ae:	f7fa fe93 	bl	80001d8 <__aeabi_uldivmod>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4b0d      	ldr	r3, [pc, #52]	; (80054ec <USART_SetConfig+0x314>)
 80054b8:	fba3 1302 	umull	r1, r3, r3, r2
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	2164      	movs	r1, #100	; 0x64
 80054c0:	fb01 f303 	mul.w	r3, r1, r3
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	3332      	adds	r3, #50	; 0x32
 80054ca:	4a08      	ldr	r2, [pc, #32]	; (80054ec <USART_SetConfig+0x314>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	f003 0207 	and.w	r2, r3, #7
 80054d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4422      	add	r2, r4
 80054de:	609a      	str	r2, [r3, #8]
 80054e0:	e109      	b.n	80056f6 <USART_SetConfig+0x51e>
 80054e2:	bf00      	nop
 80054e4:	40011000 	.word	0x40011000
 80054e8:	40011400 	.word	0x40011400
 80054ec:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80054f0:	f7ff fb58 	bl	8004ba4 <HAL_RCC_GetPCLK1Freq>
 80054f4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80054f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80054fc:	2200      	movs	r2, #0
 80054fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005502:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005506:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800550a:	4642      	mov	r2, r8
 800550c:	464b      	mov	r3, r9
 800550e:	1891      	adds	r1, r2, r2
 8005510:	6339      	str	r1, [r7, #48]	; 0x30
 8005512:	415b      	adcs	r3, r3
 8005514:	637b      	str	r3, [r7, #52]	; 0x34
 8005516:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800551a:	4641      	mov	r1, r8
 800551c:	1854      	adds	r4, r2, r1
 800551e:	4649      	mov	r1, r9
 8005520:	eb43 0501 	adc.w	r5, r3, r1
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	00eb      	lsls	r3, r5, #3
 800552e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005532:	00e2      	lsls	r2, r4, #3
 8005534:	4614      	mov	r4, r2
 8005536:	461d      	mov	r5, r3
 8005538:	4643      	mov	r3, r8
 800553a:	18e3      	adds	r3, r4, r3
 800553c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005540:	464b      	mov	r3, r9
 8005542:	eb45 0303 	adc.w	r3, r5, r3
 8005546:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800554a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005556:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800555a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800555e:	460b      	mov	r3, r1
 8005560:	18db      	adds	r3, r3, r3
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
 8005564:	4613      	mov	r3, r2
 8005566:	eb42 0303 	adc.w	r3, r2, r3
 800556a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800556c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005570:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005574:	f7fa fe30 	bl	80001d8 <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4b61      	ldr	r3, [pc, #388]	; (8005704 <USART_SetConfig+0x52c>)
 800557e:	fba3 2302 	umull	r2, r3, r3, r2
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	011c      	lsls	r4, r3, #4
 8005586:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800558a:	2200      	movs	r2, #0
 800558c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005590:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005594:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	1891      	adds	r1, r2, r2
 800559e:	6239      	str	r1, [r7, #32]
 80055a0:	415b      	adcs	r3, r3
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
 80055a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055a8:	4641      	mov	r1, r8
 80055aa:	eb12 0a01 	adds.w	sl, r2, r1
 80055ae:	4649      	mov	r1, r9
 80055b0:	eb43 0b01 	adc.w	fp, r3, r1
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055c8:	4692      	mov	sl, r2
 80055ca:	469b      	mov	fp, r3
 80055cc:	4643      	mov	r3, r8
 80055ce:	eb1a 0303 	adds.w	r3, sl, r3
 80055d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055d6:	464b      	mov	r3, r9
 80055d8:	eb4b 0303 	adc.w	r3, fp, r3
 80055dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055ec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055f0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80055f4:	460b      	mov	r3, r1
 80055f6:	18db      	adds	r3, r3, r3
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	4613      	mov	r3, r2
 80055fc:	eb42 0303 	adc.w	r3, r2, r3
 8005600:	61fb      	str	r3, [r7, #28]
 8005602:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005606:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800560a:	f7fa fde5 	bl	80001d8 <__aeabi_uldivmod>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4611      	mov	r1, r2
 8005614:	4b3b      	ldr	r3, [pc, #236]	; (8005704 <USART_SetConfig+0x52c>)
 8005616:	fba3 2301 	umull	r2, r3, r3, r1
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	2264      	movs	r2, #100	; 0x64
 800561e:	fb02 f303 	mul.w	r3, r2, r3
 8005622:	1acb      	subs	r3, r1, r3
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800562a:	4b36      	ldr	r3, [pc, #216]	; (8005704 <USART_SetConfig+0x52c>)
 800562c:	fba3 2302 	umull	r2, r3, r3, r2
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005638:	441c      	add	r4, r3
 800563a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800563e:	2200      	movs	r2, #0
 8005640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005644:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005648:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800564c:	4642      	mov	r2, r8
 800564e:	464b      	mov	r3, r9
 8005650:	1891      	adds	r1, r2, r2
 8005652:	6139      	str	r1, [r7, #16]
 8005654:	415b      	adcs	r3, r3
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800565c:	4641      	mov	r1, r8
 800565e:	1851      	adds	r1, r2, r1
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4649      	mov	r1, r9
 8005664:	414b      	adcs	r3, r1
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005674:	4659      	mov	r1, fp
 8005676:	00cb      	lsls	r3, r1, #3
 8005678:	4651      	mov	r1, sl
 800567a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800567e:	4651      	mov	r1, sl
 8005680:	00ca      	lsls	r2, r1, #3
 8005682:	4610      	mov	r0, r2
 8005684:	4619      	mov	r1, r3
 8005686:	4603      	mov	r3, r0
 8005688:	4642      	mov	r2, r8
 800568a:	189b      	adds	r3, r3, r2
 800568c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005690:	464b      	mov	r3, r9
 8005692:	460a      	mov	r2, r1
 8005694:	eb42 0303 	adc.w	r3, r2, r3
 8005698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800569c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80056a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80056ac:	460b      	mov	r3, r1
 80056ae:	18db      	adds	r3, r3, r3
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	4613      	mov	r3, r2
 80056b4:	eb42 0303 	adc.w	r3, r2, r3
 80056b8:	607b      	str	r3, [r7, #4]
 80056ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056c2:	f7fa fd89 	bl	80001d8 <__aeabi_uldivmod>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4b0e      	ldr	r3, [pc, #56]	; (8005704 <USART_SetConfig+0x52c>)
 80056cc:	fba3 1302 	umull	r1, r3, r3, r2
 80056d0:	095b      	lsrs	r3, r3, #5
 80056d2:	2164      	movs	r1, #100	; 0x64
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	3332      	adds	r3, #50	; 0x32
 80056de:	4a09      	ldr	r2, [pc, #36]	; (8005704 <USART_SetConfig+0x52c>)
 80056e0:	fba2 2303 	umull	r2, r3, r2, r3
 80056e4:	095b      	lsrs	r3, r3, #5
 80056e6:	f003 0207 	and.w	r2, r3, #7
 80056ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4422      	add	r2, r4
 80056f2:	609a      	str	r2, [r3, #8]
  }
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop
 80056f8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80056fc:	46bd      	mov	sp, r7
 80056fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005702:	bf00      	nop
 8005704:	51eb851f 	.word	0x51eb851f

08005708 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005708:	b084      	sub	sp, #16
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	f107 001c 	add.w	r0, r7, #28
 8005716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800571a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800571e:	2b01      	cmp	r3, #1
 8005720:	d123      	bne.n	800576a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800574a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800574e:	2b01      	cmp	r3, #1
 8005750:	d105      	bne.n	800575e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f9dc 	bl	8005b1c <USB_CoreReset>
 8005764:	4603      	mov	r3, r0
 8005766:	73fb      	strb	r3, [r7, #15]
 8005768:	e01b      	b.n	80057a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f9d0 	bl	8005b1c <USB_CoreReset>
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005780:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005784:	2b00      	cmp	r3, #0
 8005786:	d106      	bne.n	8005796 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	639a      	str	r2, [r3, #56]	; 0x38
 8005794:	e005      	b.n	80057a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057a2:	7fbb      	ldrb	r3, [r7, #30]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d10b      	bne.n	80057c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f043 0206 	orr.w	r2, r3, #6
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f043 0220 	orr.w	r2, r3, #32
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057cc:	b004      	add	sp, #16
 80057ce:	4770      	bx	lr

080057d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f043 0201 	orr.w	r2, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f023 0201 	bic.w	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d115      	bne.n	8005862 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005842:	200a      	movs	r0, #10
 8005844:	f7fb fb54 	bl	8000ef0 <HAL_Delay>
      ms += 10U;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	330a      	adds	r3, #10
 800584c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f956 	bl	8005b00 <USB_GetMode>
 8005854:	4603      	mov	r3, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	d01e      	beq.n	8005898 <USB_SetCurrentMode+0x84>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2bc7      	cmp	r3, #199	; 0xc7
 800585e:	d9f0      	bls.n	8005842 <USB_SetCurrentMode+0x2e>
 8005860:	e01a      	b.n	8005898 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d115      	bne.n	8005894 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005874:	200a      	movs	r0, #10
 8005876:	f7fb fb3b 	bl	8000ef0 <HAL_Delay>
      ms += 10U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	330a      	adds	r3, #10
 800587e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f93d 	bl	8005b00 <USB_GetMode>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <USB_SetCurrentMode+0x84>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2bc7      	cmp	r3, #199	; 0xc7
 8005890:	d9f0      	bls.n	8005874 <USB_SetCurrentMode+0x60>
 8005892:	e001      	b.n	8005898 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e005      	b.n	80058a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2bc8      	cmp	r3, #200	; 0xc8
 800589c:	d101      	bne.n	80058a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3301      	adds	r3, #1
 80058be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80058c6:	d901      	bls.n	80058cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e01b      	b.n	8005904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	daf2      	bge.n	80058ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	019b      	lsls	r3, r3, #6
 80058dc:	f043 0220 	orr.w	r2, r3, #32
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3301      	adds	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80058f0:	d901      	bls.n	80058f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e006      	b.n	8005904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b20      	cmp	r3, #32
 8005900:	d0f0      	beq.n	80058e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3301      	adds	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005928:	d901      	bls.n	800592e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e018      	b.n	8005960 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	daf2      	bge.n	800591c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2210      	movs	r2, #16
 800593e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3301      	adds	r3, #1
 8005944:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800594c:	d901      	bls.n	8005952 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e006      	b.n	8005960 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0310 	and.w	r3, r3, #16
 800595a:	2b10      	cmp	r3, #16
 800595c:	d0f0      	beq.n	8005940 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800596c:	b480      	push	{r7}
 800596e:	b089      	sub	sp, #36	; 0x24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	4611      	mov	r1, r2
 8005978:	461a      	mov	r2, r3
 800597a:	460b      	mov	r3, r1
 800597c:	71fb      	strb	r3, [r7, #7]
 800597e:	4613      	mov	r3, r2
 8005980:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800598a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800598e:	2b00      	cmp	r3, #0
 8005990:	d123      	bne.n	80059da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005992:	88bb      	ldrh	r3, [r7, #4]
 8005994:	3303      	adds	r3, #3
 8005996:	089b      	lsrs	r3, r3, #2
 8005998:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800599a:	2300      	movs	r3, #0
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	e018      	b.n	80059d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059a0:	79fb      	ldrb	r3, [r7, #7]
 80059a2:	031a      	lsls	r2, r3, #12
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ac:	461a      	mov	r2, r3
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	3301      	adds	r3, #1
 80059b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	3301      	adds	r3, #1
 80059be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	3301      	adds	r3, #1
 80059c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	3301      	adds	r3, #1
 80059ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	3301      	adds	r3, #1
 80059d0:	61bb      	str	r3, [r7, #24]
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d3e2      	bcc.n	80059a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3724      	adds	r7, #36	; 0x24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b08b      	sub	sp, #44	; 0x2c
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	4613      	mov	r3, r2
 80059f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059fe:	88fb      	ldrh	r3, [r7, #6]
 8005a00:	089b      	lsrs	r3, r3, #2
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a0e:	2300      	movs	r3, #0
 8005a10:	623b      	str	r3, [r7, #32]
 8005a12:	e014      	b.n	8005a3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	3301      	adds	r3, #1
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	3301      	adds	r3, #1
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	3301      	adds	r3, #1
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	3301      	adds	r3, #1
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	623b      	str	r3, [r7, #32]
 8005a3e:	6a3a      	ldr	r2, [r7, #32]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d3e6      	bcc.n	8005a14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a46:	8bfb      	ldrh	r3, [r7, #30]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01e      	beq.n	8005a8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a56:	461a      	mov	r2, r3
 8005a58:	f107 0310 	add.w	r3, r7, #16
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	701a      	strb	r2, [r3, #0]
      i++;
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	3301      	adds	r3, #1
 8005a76:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a7e:	8bfb      	ldrh	r3, [r7, #30]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a84:	8bfb      	ldrh	r3, [r7, #30]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1ea      	bne.n	8005a60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	372c      	adds	r7, #44	; 0x2c
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4013      	ands	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	4013      	ands	r3, r2
 8005af0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005af2:	68bb      	ldr	r3, [r7, #8]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	f003 0301 	and.w	r3, r3, #1
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b34:	d901      	bls.n	8005b3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e01b      	b.n	8005b72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	daf2      	bge.n	8005b28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f043 0201 	orr.w	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3301      	adds	r3, #1
 8005b56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005b5e:	d901      	bls.n	8005b64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e006      	b.n	8005b72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d0f0      	beq.n	8005b52 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
	...

08005b80 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b80:	b084      	sub	sp, #16
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b086      	sub	sp, #24
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d119      	bne.n	8005c0a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d10a      	bne.n	8005bf4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bec:	f043 0304 	orr.w	r3, r3, #4
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	e014      	b.n	8005c1e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c02:	f023 0304 	bic.w	r3, r3, #4
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	e009      	b.n	8005c1e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c18:	f023 0304 	bic.w	r3, r3, #4
 8005c1c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c1e:	2110      	movs	r1, #16
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff fe43 	bl	80058ac <USB_FlushTxFifo>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff fe6d 	bl	8005910 <USB_FlushRxFifo>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c40:	2300      	movs	r3, #0
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	e015      	b.n	8005c72 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c52:	461a      	mov	r2, r3
 8005c54:	f04f 33ff 	mov.w	r3, #4294967295
 8005c58:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c66:	461a      	mov	r2, r3
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005c76:	461a      	mov	r2, r3
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d3e3      	bcc.n	8005c46 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a18      	ldr	r2, [pc, #96]	; (8005cf0 <USB_HostInit+0x170>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d10b      	bne.n	8005cac <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c9a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <USB_HostInit+0x174>)
 8005ca0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a14      	ldr	r2, [pc, #80]	; (8005cf8 <USB_HostInit+0x178>)
 8005ca6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005caa:	e009      	b.n	8005cc0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2280      	movs	r2, #128	; 0x80
 8005cb0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a11      	ldr	r2, [pc, #68]	; (8005cfc <USB_HostInit+0x17c>)
 8005cb6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a11      	ldr	r2, [pc, #68]	; (8005d00 <USB_HostInit+0x180>)
 8005cbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d105      	bne.n	8005cd4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	f043 0210 	orr.w	r2, r3, #16
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699a      	ldr	r2, [r3, #24]
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <USB_HostInit+0x184>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cec:	b004      	add	sp, #16
 8005cee:	4770      	bx	lr
 8005cf0:	40040000 	.word	0x40040000
 8005cf4:	01000200 	.word	0x01000200
 8005cf8:	00e00300 	.word	0x00e00300
 8005cfc:	00600080 	.word	0x00600080
 8005d00:	004000e0 	.word	0x004000e0
 8005d04:	a3200008 	.word	0xa3200008

08005d08 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	68f9      	ldr	r1, [r7, #12]
 8005d3c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d40:	4313      	orrs	r3, r2
 8005d42:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d44:	78fb      	ldrb	r3, [r7, #3]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d107      	bne.n	8005d5a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d50:	461a      	mov	r2, r3
 8005d52:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d56:	6053      	str	r3, [r2, #4]
 8005d58:	e00c      	b.n	8005d74 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005d5a:	78fb      	ldrb	r3, [r7, #3]
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d107      	bne.n	8005d70 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d66:	461a      	mov	r2, r3
 8005d68:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d6c:	6053      	str	r3, [r2, #4]
 8005d6e:	e001      	b.n	8005d74 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005da2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005db2:	2064      	movs	r0, #100	; 0x64
 8005db4:	f7fb f89c 	bl	8000ef0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dc4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005dc6:	200a      	movs	r0, #10
 8005dc8:	f7fb f892 	bl	8000ef0 <HAL_Delay>

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b085      	sub	sp, #20
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	460b      	mov	r3, r1
 8005de0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005dfa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <USB_DriveVbus+0x44>
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d106      	bne.n	8005e1a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e18:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e24:	d109      	bne.n	8005e3a <USB_DriveVbus+0x64>
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d106      	bne.n	8005e3a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e38:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	0c5b      	lsrs	r3, r3, #17
 8005e66:	f003 0303 	and.w	r3, r3, #3
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	b29b      	uxth	r3, r3
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	70fb      	strb	r3, [r7, #3]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	70bb      	strb	r3, [r7, #2]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ecc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ece:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d87c      	bhi.n	8005fd0 <USB_HC_Init+0x138>
 8005ed6:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <USB_HC_Init+0x44>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005eed 	.word	0x08005eed
 8005ee0:	08005f93 	.word	0x08005f93
 8005ee4:	08005eed 	.word	0x08005eed
 8005ee8:	08005f55 	.word	0x08005f55
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f240 439d 	movw	r3, #1181	; 0x49d
 8005efe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	da10      	bge.n	8005f2a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	78fa      	ldrb	r2, [r7, #3]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f26:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005f28:	e055      	b.n	8005fd6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a6f      	ldr	r2, [pc, #444]	; (80060ec <USB_HC_Init+0x254>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d151      	bne.n	8005fd6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	78fa      	ldrb	r2, [r7, #3]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f4c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f50:	60d3      	str	r3, [r2, #12]
      break;
 8005f52:	e040      	b.n	8005fd6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f60:	461a      	mov	r2, r3
 8005f62:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f66:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	da34      	bge.n	8005fda <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	78fa      	ldrb	r2, [r7, #3]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f8e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f90:	e023      	b.n	8005fda <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f240 2325 	movw	r3, #549	; 0x225
 8005fa4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fa6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	da17      	bge.n	8005fde <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005fae:	78fb      	ldrb	r3, [r7, #3]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	78fa      	ldrb	r2, [r7, #3]
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fc8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005fcc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005fce:	e006      	b.n	8005fde <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	77fb      	strb	r3, [r7, #31]
      break;
 8005fd4:	e004      	b.n	8005fe0 <USB_HC_Init+0x148>
      break;
 8005fd6:	bf00      	nop
 8005fd8:	e002      	b.n	8005fe0 <USB_HC_Init+0x148>
      break;
 8005fda:	bf00      	nop
 8005fdc:	e000      	b.n	8005fe0 <USB_HC_Init+0x148>
      break;
 8005fde:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fec:	461a      	mov	r2, r3
 8005fee:	2300      	movs	r3, #0
 8005ff0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	78fa      	ldrb	r2, [r7, #3]
 8006002:	0151      	lsls	r1, r2, #5
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	440a      	add	r2, r1
 8006008:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800600c:	f043 0302 	orr.w	r3, r3, #2
 8006010:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	2101      	movs	r1, #1
 8006022:	fa01 f303 	lsl.w	r3, r1, r3
 8006026:	6939      	ldr	r1, [r7, #16]
 8006028:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800602c:	4313      	orrs	r3, r2
 800602e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800603c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006040:	2b00      	cmp	r3, #0
 8006042:	da03      	bge.n	800604c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006044:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	e001      	b.n	8006050 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff fef9 	bl	8005e48 <USB_GetHostSpeed>
 8006056:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006058:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800605c:	2b02      	cmp	r3, #2
 800605e:	d106      	bne.n	800606e <USB_HC_Init+0x1d6>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b02      	cmp	r3, #2
 8006064:	d003      	beq.n	800606e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	e001      	b.n	8006072 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006072:	787b      	ldrb	r3, [r7, #1]
 8006074:	059b      	lsls	r3, r3, #22
 8006076:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800607a:	78bb      	ldrb	r3, [r7, #2]
 800607c:	02db      	lsls	r3, r3, #11
 800607e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006082:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006084:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006088:	049b      	lsls	r3, r3, #18
 800608a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800608e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006090:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006092:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006096:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	431a      	orrs	r2, r3
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060a0:	78fa      	ldrb	r2, [r7, #3]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80060ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060b0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80060b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d003      	beq.n	80060c2 <USB_HC_Init+0x22a>
 80060ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d10f      	bne.n	80060e2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80060c2:	78fb      	ldrb	r3, [r7, #3]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	78fa      	ldrb	r2, [r7, #3]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060e0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80060e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3720      	adds	r7, #32
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40040000 	.word	0x40040000

080060f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08c      	sub	sp, #48	; 0x30
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	4613      	mov	r3, r2
 80060fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	785b      	ldrb	r3, [r3, #1]
 8006106:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006108:	f44f 7380 	mov.w	r3, #256	; 0x100
 800610c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4a5d      	ldr	r2, [pc, #372]	; (8006288 <USB_HC_StartXfer+0x198>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d12f      	bne.n	8006176 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d11c      	bne.n	8006156 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	7c9b      	ldrb	r3, [r3, #18]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <USB_HC_StartXfer+0x3c>
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	7c9b      	ldrb	r3, [r3, #18]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d124      	bne.n	8006176 <USB_HC_StartXfer+0x86>
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	799b      	ldrb	r3, [r3, #6]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d120      	bne.n	8006176 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	4413      	add	r3, r2
 800613c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	6a3a      	ldr	r2, [r7, #32]
 8006148:	440a      	add	r2, r1
 800614a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800614e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006152:	60d3      	str	r3, [r2, #12]
 8006154:	e00f      	b.n	8006176 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	791b      	ldrb	r3, [r3, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10b      	bne.n	8006176 <USB_HC_StartXfer+0x86>
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	795b      	ldrb	r3, [r3, #5]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d107      	bne.n	8006176 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	785b      	ldrb	r3, [r3, #1]
 800616a:	4619      	mov	r1, r3
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 fb6b 	bl	8006848 <USB_DoPing>
        return HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	e232      	b.n	80065dc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	799b      	ldrb	r3, [r3, #6]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d158      	bne.n	8006230 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800617e:	2301      	movs	r3, #1
 8006180:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	78db      	ldrb	r3, [r3, #3]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d007      	beq.n	800619a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800618a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	8a92      	ldrh	r2, [r2, #20]
 8006190:	fb03 f202 	mul.w	r2, r3, r2
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	61da      	str	r2, [r3, #28]
 8006198:	e07c      	b.n	8006294 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	7c9b      	ldrb	r3, [r3, #18]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d130      	bne.n	8006204 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	2bbc      	cmp	r3, #188	; 0xbc
 80061a8:	d918      	bls.n	80061dc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	8a9b      	ldrh	r3, [r3, #20]
 80061ae:	461a      	mov	r2, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d003      	beq.n	80061cc <USB_HC_StartXfer+0xdc>
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d103      	bne.n	80061d4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2202      	movs	r2, #2
 80061d0:	60da      	str	r2, [r3, #12]
 80061d2:	e05f      	b.n	8006294 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2201      	movs	r2, #1
 80061d8:	60da      	str	r2, [r3, #12]
 80061da:	e05b      	b.n	8006294 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	6a1a      	ldr	r2, [r3, #32]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d007      	beq.n	80061fc <USB_HC_StartXfer+0x10c>
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d003      	beq.n	80061fc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2204      	movs	r2, #4
 80061f8:	60da      	str	r2, [r3, #12]
 80061fa:	e04b      	b.n	8006294 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2203      	movs	r2, #3
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	e047      	b.n	8006294 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006204:	79fb      	ldrb	r3, [r7, #7]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d10d      	bne.n	8006226 <USB_HC_StartXfer+0x136>
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	8a92      	ldrh	r2, [r2, #20]
 8006212:	4293      	cmp	r3, r2
 8006214:	d907      	bls.n	8006226 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006216:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	8a92      	ldrh	r2, [r2, #20]
 800621c:	fb03 f202 	mul.w	r2, r3, r2
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	61da      	str	r2, [r3, #28]
 8006224:	e036      	b.n	8006294 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	6a1a      	ldr	r2, [r3, #32]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	61da      	str	r2, [r3, #28]
 800622e:	e031      	b.n	8006294 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d018      	beq.n	800626a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	8a92      	ldrh	r2, [r2, #20]
 8006240:	4413      	add	r3, r2
 8006242:	3b01      	subs	r3, #1
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	8a92      	ldrh	r2, [r2, #20]
 8006248:	fbb3 f3f2 	udiv	r3, r3, r2
 800624c:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800624e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006250:	8b7b      	ldrh	r3, [r7, #26]
 8006252:	429a      	cmp	r2, r3
 8006254:	d90b      	bls.n	800626e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006256:	8b7b      	ldrh	r3, [r7, #26]
 8006258:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800625a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	8a92      	ldrh	r2, [r2, #20]
 8006260:	fb03 f202 	mul.w	r2, r3, r2
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	61da      	str	r2, [r3, #28]
 8006268:	e001      	b.n	800626e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800626a:	2301      	movs	r3, #1
 800626c:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	78db      	ldrb	r3, [r3, #3]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006276:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	8a92      	ldrh	r2, [r2, #20]
 800627c:	fb03 f202 	mul.w	r2, r3, r2
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	61da      	str	r2, [r3, #28]
 8006284:	e006      	b.n	8006294 <USB_HC_StartXfer+0x1a4>
 8006286:	bf00      	nop
 8006288:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	6a1a      	ldr	r2, [r3, #32]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800629c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800629e:	04d9      	lsls	r1, r3, #19
 80062a0:	4ba3      	ldr	r3, [pc, #652]	; (8006530 <USB_HC_StartXfer+0x440>)
 80062a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	7d9b      	ldrb	r3, [r3, #22]
 80062aa:	075b      	lsls	r3, r3, #29
 80062ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062b0:	69f9      	ldr	r1, [r7, #28]
 80062b2:	0148      	lsls	r0, r1, #5
 80062b4:	6a39      	ldr	r1, [r7, #32]
 80062b6:	4401      	add	r1, r0
 80062b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80062c0:	79fb      	ldrb	r3, [r7, #7]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	6999      	ldr	r1, [r3, #24]
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d6:	460a      	mov	r2, r1
 80062d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	bf0c      	ite	eq
 80062ea:	2301      	moveq	r3, #1
 80062ec:	2300      	movne	r3, #0
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	69fa      	ldr	r2, [r7, #28]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	6a3a      	ldr	r2, [r7, #32]
 8006306:	440a      	add	r2, r1
 8006308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800630c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006310:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	7e7b      	ldrb	r3, [r7, #25]
 8006322:	075b      	lsls	r3, r3, #29
 8006324:	69f9      	ldr	r1, [r7, #28]
 8006326:	0148      	lsls	r0, r1, #5
 8006328:	6a39      	ldr	r1, [r7, #32]
 800632a:	4401      	add	r1, r0
 800632c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006330:	4313      	orrs	r3, r2
 8006332:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	799b      	ldrb	r3, [r3, #6]
 8006338:	2b01      	cmp	r3, #1
 800633a:	f040 80c3 	bne.w	80064c4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	7c5b      	ldrb	r3, [r3, #17]
 8006342:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006348:	4313      	orrs	r3, r2
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	6a3a      	ldr	r2, [r7, #32]
 8006350:	440a      	add	r2, r1
 8006352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800635a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	6a3a      	ldr	r2, [r7, #32]
 8006370:	440a      	add	r2, r1
 8006372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006376:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800637a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	79db      	ldrb	r3, [r3, #7]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d123      	bne.n	80063cc <USB_HC_StartXfer+0x2dc>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	78db      	ldrb	r3, [r3, #3]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d11f      	bne.n	80063cc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	4413      	add	r3, r2
 8006394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	0151      	lsls	r1, r2, #5
 800639e:	6a3a      	ldr	r2, [r7, #32]
 80063a0:	440a      	add	r2, r1
 80063a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063aa:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	6a3a      	ldr	r2, [r7, #32]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ca:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	7c9b      	ldrb	r3, [r3, #18]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d003      	beq.n	80063dc <USB_HC_StartXfer+0x2ec>
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	7c9b      	ldrb	r3, [r3, #18]
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d117      	bne.n	800640c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d113      	bne.n	800640c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	78db      	ldrb	r3, [r3, #3]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d10f      	bne.n	800640c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	6a3a      	ldr	r2, [r7, #32]
 8006400:	440a      	add	r2, r1
 8006402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800640a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	7c9b      	ldrb	r3, [r3, #18]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d162      	bne.n	80064da <USB_HC_StartXfer+0x3ea>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	78db      	ldrb	r3, [r3, #3]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d15e      	bne.n	80064da <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	3b01      	subs	r3, #1
 8006422:	2b03      	cmp	r3, #3
 8006424:	d858      	bhi.n	80064d8 <USB_HC_StartXfer+0x3e8>
 8006426:	a201      	add	r2, pc, #4	; (adr r2, 800642c <USB_HC_StartXfer+0x33c>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	0800643d 	.word	0x0800643d
 8006430:	0800645f 	.word	0x0800645f
 8006434:	08006481 	.word	0x08006481
 8006438:	080064a3 	.word	0x080064a3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	4413      	add	r3, r2
 8006444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	6a3a      	ldr	r2, [r7, #32]
 8006450:	440a      	add	r2, r1
 8006452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800645a:	6053      	str	r3, [r2, #4]
          break;
 800645c:	e03d      	b.n	80064da <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	4413      	add	r3, r2
 8006466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	69fa      	ldr	r2, [r7, #28]
 800646e:	0151      	lsls	r1, r2, #5
 8006470:	6a3a      	ldr	r2, [r7, #32]
 8006472:	440a      	add	r2, r1
 8006474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006478:	f043 030e 	orr.w	r3, r3, #14
 800647c:	6053      	str	r3, [r2, #4]
          break;
 800647e:	e02c      	b.n	80064da <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	4413      	add	r3, r2
 8006488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	6a3a      	ldr	r2, [r7, #32]
 8006494:	440a      	add	r2, r1
 8006496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800649a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800649e:	6053      	str	r3, [r2, #4]
          break;
 80064a0:	e01b      	b.n	80064da <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	0151      	lsls	r1, r2, #5
 80064b4:	6a3a      	ldr	r2, [r7, #32]
 80064b6:	440a      	add	r2, r1
 80064b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064c0:	6053      	str	r3, [r2, #4]
          break;
 80064c2:	e00a      	b.n	80064da <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d0:	461a      	mov	r2, r3
 80064d2:	2300      	movs	r3, #0
 80064d4:	6053      	str	r3, [r2, #4]
 80064d6:	e000      	b.n	80064da <USB_HC_StartXfer+0x3ea>
          break;
 80064d8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064f0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	78db      	ldrb	r3, [r3, #3]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	e003      	b.n	800650c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800650a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006512:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	4413      	add	r3, r2
 800651c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006520:	461a      	mov	r2, r3
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	e055      	b.n	80065dc <USB_HC_StartXfer+0x4ec>
 8006530:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	78db      	ldrb	r3, [r3, #3]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d14e      	bne.n	80065da <USB_HC_StartXfer+0x4ea>
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d04a      	beq.n	80065da <USB_HC_StartXfer+0x4ea>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	79db      	ldrb	r3, [r3, #7]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d146      	bne.n	80065da <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	7c9b      	ldrb	r3, [r3, #18]
 8006550:	2b03      	cmp	r3, #3
 8006552:	d831      	bhi.n	80065b8 <USB_HC_StartXfer+0x4c8>
 8006554:	a201      	add	r2, pc, #4	; (adr r2, 800655c <USB_HC_StartXfer+0x46c>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	0800656d 	.word	0x0800656d
 8006560:	08006591 	.word	0x08006591
 8006564:	0800656d 	.word	0x0800656d
 8006568:	08006591 	.word	0x08006591
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	3303      	adds	r3, #3
 8006572:	089b      	lsrs	r3, r3, #2
 8006574:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006576:	8afa      	ldrh	r2, [r7, #22]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	b29b      	uxth	r3, r3
 800657e:	429a      	cmp	r2, r3
 8006580:	d91c      	bls.n	80065bc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	f043 0220 	orr.w	r2, r3, #32
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	619a      	str	r2, [r3, #24]
        }
        break;
 800658e:	e015      	b.n	80065bc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	3303      	adds	r3, #3
 8006596:	089b      	lsrs	r3, r3, #2
 8006598:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800659a:	8afa      	ldrh	r2, [r7, #22]
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d90a      	bls.n	80065c0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	619a      	str	r2, [r3, #24]
        }
        break;
 80065b6:	e003      	b.n	80065c0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80065b8:	bf00      	nop
 80065ba:	e002      	b.n	80065c2 <USB_HC_StartXfer+0x4d2>
        break;
 80065bc:	bf00      	nop
 80065be:	e000      	b.n	80065c2 <USB_HC_StartXfer+0x4d2>
        break;
 80065c0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	6999      	ldr	r1, [r3, #24]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	785a      	ldrb	r2, [r3, #1]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2000      	movs	r0, #0
 80065d2:	9000      	str	r0, [sp, #0]
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f7ff f9c9 	bl	800596c <USB_WritePacket>
  }

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3728      	adds	r7, #40	; 0x28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	b29b      	uxth	r3, r3
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006606:	b480      	push	{r7}
 8006608:	b089      	sub	sp, #36	; 0x24
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
 800660e:	460b      	mov	r3, r1
 8006610:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	0c9b      	lsrs	r3, r3, #18
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4413      	add	r3, r2
 800663c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	0fdb      	lsrs	r3, r3, #31
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	4413      	add	r3, r2
 8006652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	0fdb      	lsrs	r3, r3, #31
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b20      	cmp	r3, #32
 800666a:	d10d      	bne.n	8006688 <USB_HC_Halt+0x82>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10a      	bne.n	8006688 <USB_HC_Halt+0x82>
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d002      	beq.n	8006684 <USB_HC_Halt+0x7e>
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b03      	cmp	r3, #3
 8006682:	d101      	bne.n	8006688 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006684:	2300      	movs	r3, #0
 8006686:	e0d8      	b.n	800683a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <USB_HC_Halt+0x8e>
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b02      	cmp	r3, #2
 8006692:	d173      	bne.n	800677c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	4413      	add	r3, r2
 800669c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	69fa      	ldr	r2, [r7, #28]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066b2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d14a      	bne.n	8006756 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d133      	bne.n	8006734 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066ea:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	0151      	lsls	r1, r2, #5
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	440a      	add	r2, r1
 8006702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006706:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800670a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	3301      	adds	r3, #1
 8006710:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006718:	d82e      	bhi.n	8006778 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	4413      	add	r3, r2
 8006722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800672c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006730:	d0ec      	beq.n	800670c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006732:	e081      	b.n	8006838 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	0151      	lsls	r1, r2, #5
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	440a      	add	r2, r1
 800674a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800674e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006752:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006754:	e070      	b.n	8006838 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	4413      	add	r3, r2
 800675e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	0151      	lsls	r1, r2, #5
 8006768:	69fa      	ldr	r2, [r7, #28]
 800676a:	440a      	add	r2, r1
 800676c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006774:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006776:	e05f      	b.n	8006838 <USB_HC_Halt+0x232>
            break;
 8006778:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800677a:	e05d      	b.n	8006838 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	4413      	add	r3, r2
 8006784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	0151      	lsls	r1, r2, #5
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	440a      	add	r2, r1
 8006792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006796:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800679a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d133      	bne.n	8006814 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	0151      	lsls	r1, r2, #5
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	440a      	add	r2, r1
 80067c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	0151      	lsls	r1, r2, #5
 80067de:	69fa      	ldr	r2, [r7, #28]
 80067e0:	440a      	add	r2, r1
 80067e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067ea:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	3301      	adds	r3, #1
 80067f0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067f8:	d81d      	bhi.n	8006836 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	4413      	add	r3, r2
 8006802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800680c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006810:	d0ec      	beq.n	80067ec <USB_HC_Halt+0x1e6>
 8006812:	e011      	b.n	8006838 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	4413      	add	r3, r2
 800681c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	69fa      	ldr	r2, [r7, #28]
 8006828:	440a      	add	r2, r1
 800682a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800682e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	e000      	b.n	8006838 <USB_HC_Halt+0x232>
          break;
 8006836:	bf00      	nop
    }
  }

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3724      	adds	r7, #36	; 0x24
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
	...

08006848 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006858:	78fb      	ldrb	r3, [r7, #3]
 800685a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800685c:	2301      	movs	r3, #1
 800685e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	04da      	lsls	r2, r3, #19
 8006864:	4b15      	ldr	r3, [pc, #84]	; (80068bc <USB_DoPing+0x74>)
 8006866:	4013      	ands	r3, r2
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	0151      	lsls	r1, r2, #5
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	440a      	add	r2, r1
 8006870:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006874:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006878:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	4413      	add	r3, r2
 8006882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006890:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006898:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a6:	461a      	mov	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	1ff80000 	.word	0x1ff80000

080068c0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b088      	sub	sp, #32
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7fe ff8c 	bl	80057f2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068da:	2110      	movs	r1, #16
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7fe ffe5 	bl	80058ac <USB_FlushTxFifo>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff f80f 	bl	8005910 <USB_FlushRxFifo>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80068fc:	2300      	movs	r3, #0
 80068fe:	61bb      	str	r3, [r7, #24]
 8006900:	e01f      	b.n	8006942 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	4413      	add	r3, r2
 800690a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006918:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006920:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006928:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	4413      	add	r3, r2
 8006932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006936:	461a      	mov	r2, r3
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	3301      	adds	r3, #1
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	2b0f      	cmp	r3, #15
 8006946:	d9dc      	bls.n	8006902 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006948:	2300      	movs	r3, #0
 800694a:	61bb      	str	r3, [r7, #24]
 800694c:	e034      	b.n	80069b8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	4413      	add	r3, r2
 8006956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006964:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800696c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006974:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	4413      	add	r3, r2
 800697e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006982:	461a      	mov	r2, r3
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3301      	adds	r3, #1
 800698c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006994:	d80c      	bhi.n	80069b0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ac:	d0ec      	beq.n	8006988 <USB_StopHost+0xc8>
 80069ae:	e000      	b.n	80069b2 <USB_StopHost+0xf2>
        break;
 80069b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	3301      	adds	r3, #1
 80069b6:	61bb      	str	r3, [r7, #24]
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	2b0f      	cmp	r3, #15
 80069bc:	d9c7      	bls.n	800694e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069c4:	461a      	mov	r2, r3
 80069c6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f04f 32ff 	mov.w	r2, #4294967295
 80069d2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fe fefb 	bl	80057d0 <USB_EnableGlobalInt>

  return ret;
 80069da:	7ffb      	ldrb	r3, [r7, #31]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3720      	adds	r7, #32
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80069e4:	b590      	push	{r4, r7, lr}
 80069e6:	b089      	sub	sp, #36	; 0x24
 80069e8:	af04      	add	r7, sp, #16
 80069ea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80069ec:	2301      	movs	r3, #1
 80069ee:	2202      	movs	r2, #2
 80069f0:	2102      	movs	r1, #2
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fc85 	bl	8007302 <USBH_FindInterface>
 80069f8:	4603      	mov	r3, r0
 80069fa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	2bff      	cmp	r3, #255	; 0xff
 8006a00:	d002      	beq.n	8006a08 <USBH_CDC_InterfaceInit+0x24>
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d901      	bls.n	8006a0c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e13d      	b.n	8006c88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fc5a 	bl	80072ca <USBH_SelectInterface>
 8006a16:	4603      	mov	r3, r0
 8006a18:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006a20:	2302      	movs	r3, #2
 8006a22:	e131      	b.n	8006c88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006a2a:	2050      	movs	r0, #80	; 0x50
 8006a2c:	f002 fb74 	bl	8009118 <malloc>
 8006a30:	4603      	mov	r3, r0
 8006a32:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006a44:	2302      	movs	r3, #2
 8006a46:	e11f      	b.n	8006c88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006a48:	2250      	movs	r2, #80	; 0x50
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	68b8      	ldr	r0, [r7, #8]
 8006a4e:	f002 fc1f 	bl	8009290 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	211a      	movs	r1, #26
 8006a58:	fb01 f303 	mul.w	r3, r1, r3
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	b25b      	sxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	da15      	bge.n	8006a96 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	211a      	movs	r1, #26
 8006a70:	fb01 f303 	mul.w	r3, r1, r3
 8006a74:	4413      	add	r3, r2
 8006a76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a7a:	781a      	ldrb	r2, [r3, #0]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	211a      	movs	r1, #26
 8006a86:	fb01 f303 	mul.w	r3, r1, r3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a90:	881a      	ldrh	r2, [r3, #0]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 ffce 	bl	8008a3e <USBH_AllocPipe>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	7819      	ldrb	r1, [r3, #0]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	7858      	ldrb	r0, [r3, #1]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	8952      	ldrh	r2, [r2, #10]
 8006ac2:	9202      	str	r2, [sp, #8]
 8006ac4:	2203      	movs	r2, #3
 8006ac6:	9201      	str	r2, [sp, #4]
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	4623      	mov	r3, r4
 8006acc:	4602      	mov	r2, r0
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 ff86 	bl	80089e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f002 fa95 	bl	800900c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	210a      	movs	r1, #10
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fc0a 	bl	8007302 <USBH_FindInterface>
 8006aee:	4603      	mov	r3, r0
 8006af0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	2bff      	cmp	r3, #255	; 0xff
 8006af6:	d002      	beq.n	8006afe <USBH_CDC_InterfaceInit+0x11a>
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d901      	bls.n	8006b02 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006afe:	2302      	movs	r3, #2
 8006b00:	e0c2      	b.n	8006c88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	211a      	movs	r1, #26
 8006b08:	fb01 f303 	mul.w	r3, r1, r3
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	b25b      	sxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	da16      	bge.n	8006b48 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	211a      	movs	r1, #26
 8006b20:	fb01 f303 	mul.w	r3, r1, r3
 8006b24:	4413      	add	r3, r2
 8006b26:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b2a:	781a      	ldrb	r2, [r3, #0]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	211a      	movs	r1, #26
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b40:	881a      	ldrh	r2, [r3, #0]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	835a      	strh	r2, [r3, #26]
 8006b46:	e015      	b.n	8006b74 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	211a      	movs	r1, #26
 8006b4e:	fb01 f303 	mul.w	r3, r1, r3
 8006b52:	4413      	add	r3, r2
 8006b54:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b58:	781a      	ldrb	r2, [r3, #0]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	211a      	movs	r1, #26
 8006b64:	fb01 f303 	mul.w	r3, r1, r3
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b6e:	881a      	ldrh	r2, [r3, #0]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	211a      	movs	r1, #26
 8006b7a:	fb01 f303 	mul.w	r3, r1, r3
 8006b7e:	4413      	add	r3, r2
 8006b80:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	b25b      	sxtb	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	da16      	bge.n	8006bba <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	211a      	movs	r1, #26
 8006b92:	fb01 f303 	mul.w	r3, r1, r3
 8006b96:	4413      	add	r3, r2
 8006b98:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b9c:	781a      	ldrb	r2, [r3, #0]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	211a      	movs	r1, #26
 8006ba8:	fb01 f303 	mul.w	r3, r1, r3
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006bb2:	881a      	ldrh	r2, [r3, #0]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	835a      	strh	r2, [r3, #26]
 8006bb8:	e015      	b.n	8006be6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	211a      	movs	r1, #26
 8006bc0:	fb01 f303 	mul.w	r3, r1, r3
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006bca:	781a      	ldrb	r2, [r3, #0]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	211a      	movs	r1, #26
 8006bd6:	fb01 f303 	mul.w	r3, r1, r3
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006be0:	881a      	ldrh	r2, [r3, #0]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	7b9b      	ldrb	r3, [r3, #14]
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 ff26 	bl	8008a3e <USBH_AllocPipe>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	7bdb      	ldrb	r3, [r3, #15]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 ff1c 	bl	8008a3e <USBH_AllocPipe>
 8006c06:	4603      	mov	r3, r0
 8006c08:	461a      	mov	r2, r3
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	7b59      	ldrb	r1, [r3, #13]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	7b98      	ldrb	r0, [r3, #14]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	8b12      	ldrh	r2, [r2, #24]
 8006c26:	9202      	str	r2, [sp, #8]
 8006c28:	2202      	movs	r2, #2
 8006c2a:	9201      	str	r2, [sp, #4]
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	4623      	mov	r3, r4
 8006c30:	4602      	mov	r2, r0
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 fed4 	bl	80089e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	7b19      	ldrb	r1, [r3, #12]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	7bd8      	ldrb	r0, [r3, #15]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	8b52      	ldrh	r2, [r2, #26]
 8006c50:	9202      	str	r2, [sp, #8]
 8006c52:	2202      	movs	r2, #2
 8006c54:	9201      	str	r2, [sp, #4]
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	4623      	mov	r3, r4
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 febf 	bl	80089e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	7b5b      	ldrb	r3, [r3, #13]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f002 f9ca 	bl	800900c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	7b1b      	ldrb	r3, [r3, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f002 f9c3 	bl	800900c <USBH_LL_SetToggle>

  return USBH_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd90      	pop	{r4, r7, pc}

08006c90 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00e      	beq.n	8006cc8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 feb4 	bl	8008a1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f001 fedf 	bl	8008a80 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	7b1b      	ldrb	r3, [r3, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00e      	beq.n	8006cee <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	7b1b      	ldrb	r3, [r3, #12]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 fea1 	bl	8008a1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	7b1b      	ldrb	r3, [r3, #12]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 fecc 	bl	8008a80 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	7b5b      	ldrb	r3, [r3, #13]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00e      	beq.n	8006d14 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	7b5b      	ldrb	r3, [r3, #13]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 fe8e 	bl	8008a1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	7b5b      	ldrb	r3, [r3, #13]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 feb9 	bl	8008a80 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00b      	beq.n	8006d38 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f002 f9fd 	bl	8009128 <free>
    phost->pActiveClass->pData = 0U;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d34:	2200      	movs	r2, #0
 8006d36:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3340      	adds	r3, #64	; 0x40
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f8b1 	bl	8006ec2 <GetLineCoding>
 8006d60:	4603      	mov	r3, r0
 8006d62:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006d64:	7afb      	ldrb	r3, [r7, #11]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d105      	bne.n	8006d76 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d70:	2102      	movs	r1, #2
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006d76:	7afb      	ldrb	r3, [r7, #11]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d877      	bhi.n	8006e94 <USBH_CDC_Process+0x114>
 8006da4:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <USBH_CDC_Process+0x2c>)
 8006da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006daa:	bf00      	nop
 8006dac:	08006dc1 	.word	0x08006dc1
 8006db0:	08006dc7 	.word	0x08006dc7
 8006db4:	08006df7 	.word	0x08006df7
 8006db8:	08006e6b 	.word	0x08006e6b
 8006dbc:	08006e79 	.word	0x08006e79
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc4:	e06d      	b.n	8006ea2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f897 	bl	8006f00 <SetLineCoding>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d104      	bne.n	8006de6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006de4:	e058      	b.n	8006e98 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006de6:	7bbb      	ldrb	r3, [r7, #14]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d055      	beq.n	8006e98 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2204      	movs	r2, #4
 8006df0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006df4:	e050      	b.n	8006e98 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	3340      	adds	r3, #64	; 0x40
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f860 	bl	8006ec2 <GetLineCoding>
 8006e02:	4603      	mov	r3, r0
 8006e04:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e06:	7bbb      	ldrb	r3, [r7, #14]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d126      	bne.n	8006e5a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1e:	791b      	ldrb	r3, [r3, #4]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d13b      	bne.n	8006e9c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d133      	bne.n	8006e9c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d12b      	bne.n	8006e9c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e4c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d124      	bne.n	8006e9c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f958 	bl	8007108 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e58:	e020      	b.n	8006e9c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006e5a:	7bbb      	ldrb	r3, [r7, #14]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d01d      	beq.n	8006e9c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2204      	movs	r2, #4
 8006e64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e68:	e018      	b.n	8006e9c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f867 	bl	8006f3e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f8da 	bl	800702a <CDC_ProcessReception>
      break;
 8006e76:	e014      	b.n	8006ea2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006e78:	2100      	movs	r1, #0
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 f822 	bl	8007ec4 <USBH_ClrFeature>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10a      	bne.n	8006ea0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006e92:	e005      	b.n	8006ea0 <USBH_CDC_Process+0x120>

    default:
      break;
 8006e94:	bf00      	nop
 8006e96:	e004      	b.n	8006ea2 <USBH_CDC_Process+0x122>
      break;
 8006e98:	bf00      	nop
 8006e9a:	e002      	b.n	8006ea2 <USBH_CDC_Process+0x122>
      break;
 8006e9c:	bf00      	nop
 8006e9e:	e000      	b.n	8006ea2 <USBH_CDC_Process+0x122>
      break;
 8006ea0:	bf00      	nop

  }

  return status;
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	22a1      	movs	r2, #161	; 0xa1
 8006ed0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2221      	movs	r2, #33	; 0x21
 8006ed6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2207      	movs	r2, #7
 8006ee8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2207      	movs	r2, #7
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 fb23 	bl	800853c <USBH_CtlReq>
 8006ef6:	4603      	mov	r3, r0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2221      	movs	r2, #33	; 0x21
 8006f0e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2220      	movs	r2, #32
 8006f14:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2207      	movs	r2, #7
 8006f26:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2207      	movs	r2, #7
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f001 fb04 	bl	800853c <USBH_CtlReq>
 8006f34:	4603      	mov	r3, r0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b086      	sub	sp, #24
 8006f42:	af02      	add	r7, sp, #8
 8006f44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f50:	2300      	movs	r3, #0
 8006f52:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d002      	beq.n	8006f64 <CDC_ProcessTransmission+0x26>
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d023      	beq.n	8006faa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006f62:	e05e      	b.n	8007022 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	8b12      	ldrh	r2, [r2, #24]
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d90b      	bls.n	8006f88 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	69d9      	ldr	r1, [r3, #28]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8b1a      	ldrh	r2, [r3, #24]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	7b5b      	ldrb	r3, [r3, #13]
 8006f7c:	2001      	movs	r0, #1
 8006f7e:	9000      	str	r0, [sp, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 fcea 	bl	800895a <USBH_BulkSendData>
 8006f86:	e00b      	b.n	8006fa0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	7b5b      	ldrb	r3, [r3, #13]
 8006f96:	2001      	movs	r0, #1
 8006f98:	9000      	str	r0, [sp, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 fcdd 	bl	800895a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006fa8:	e03b      	b.n	8007022 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	7b5b      	ldrb	r3, [r3, #13]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f002 f801 	bl	8008fb8 <USBH_LL_GetURBState>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006fba:	7afb      	ldrb	r3, [r7, #11]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d128      	bne.n	8007012 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	8b12      	ldrh	r2, [r2, #24]
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d90e      	bls.n	8006fea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	8b12      	ldrh	r2, [r2, #24]
 8006fd4:	1a9a      	subs	r2, r3, r2
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	8b12      	ldrh	r2, [r2, #24]
 8006fe2:	441a      	add	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	61da      	str	r2, [r3, #28]
 8006fe8:	e002      	b.n	8006ff0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d004      	beq.n	8007002 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007000:	e00e      	b.n	8007020 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f868 	bl	80070e0 <USBH_CDC_TransmitCallback>
      break;
 8007010:	e006      	b.n	8007020 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007012:	7afb      	ldrb	r3, [r7, #11]
 8007014:	2b02      	cmp	r3, #2
 8007016:	d103      	bne.n	8007020 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007020:	bf00      	nop
  }
}
 8007022:	bf00      	nop
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b086      	sub	sp, #24
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800703c:	2300      	movs	r3, #0
 800703e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007046:	2b03      	cmp	r3, #3
 8007048:	d002      	beq.n	8007050 <CDC_ProcessReception+0x26>
 800704a:	2b04      	cmp	r3, #4
 800704c:	d00e      	beq.n	800706c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800704e:	e043      	b.n	80070d8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	6a19      	ldr	r1, [r3, #32]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	8b5a      	ldrh	r2, [r3, #26]
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	7b1b      	ldrb	r3, [r3, #12]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fca1 	bl	80089a4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2204      	movs	r2, #4
 8007066:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800706a:	e035      	b.n	80070d8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	7b1b      	ldrb	r3, [r3, #12]
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 ffa0 	bl	8008fb8 <USBH_LL_GetURBState>
 8007078:	4603      	mov	r3, r0
 800707a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800707c:	7cfb      	ldrb	r3, [r7, #19]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d129      	bne.n	80070d6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	7b1b      	ldrb	r3, [r3, #12]
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 ff03 	bl	8008e94 <USBH_LL_GetLastXferSize>
 800708e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	429a      	cmp	r2, r3
 8007098:	d016      	beq.n	80070c8 <CDC_ProcessReception+0x9e>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	8b5b      	ldrh	r3, [r3, #26]
 800709e:	461a      	mov	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d910      	bls.n	80070c8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	1ad2      	subs	r2, r2, r3
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	6a1a      	ldr	r2, [r3, #32]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	441a      	add	r2, r3
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2203      	movs	r2, #3
 80070c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80070c6:	e006      	b.n	80070d6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f80f 	bl	80070f4 <USBH_CDC_ReceiveCallback>
      break;
 80070d6:	bf00      	nop
  }
}
 80070d8:	bf00      	nop
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	4613      	mov	r3, r2
 8007128:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007130:	2302      	movs	r3, #2
 8007132:	e029      	b.n	8007188 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	79fa      	ldrb	r2, [r7, #7]
 8007138:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f81f 	bl	8007190 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f001 fdd3 	bl	8008d2c <USBH_LL_Init>

  return USBH_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	e009      	b.n	80071b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	33e0      	adds	r3, #224	; 0xe0
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	2200      	movs	r2, #0
 80071ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3301      	adds	r3, #1
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b0f      	cmp	r3, #15
 80071ba:	d9f2      	bls.n	80071a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e009      	b.n	80071d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80071cc:	2200      	movs	r2, #0
 80071ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071dc:	d3f1      	bcc.n	80071c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2240      	movs	r2, #64	; 0x40
 8007202:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	331c      	adds	r3, #28
 800722e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007232:	2100      	movs	r1, #0
 8007234:	4618      	mov	r0, r3
 8007236:	f002 f82b 	bl	8009290 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007244:	2100      	movs	r1, #0
 8007246:	4618      	mov	r0, r3
 8007248:	f002 f822 	bl	8009290 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007252:	2212      	movs	r2, #18
 8007254:	2100      	movs	r1, #0
 8007256:	4618      	mov	r0, r3
 8007258:	f002 f81a 	bl	8009290 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007262:	223e      	movs	r2, #62	; 0x3e
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f002 f812 	bl	8009290 <memset>

  return USBH_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007276:	b480      	push	{r7}
 8007278:	b085      	sub	sp, #20
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d016      	beq.n	80072b8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10e      	bne.n	80072b2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800729a:	1c59      	adds	r1, r3, #1
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	33de      	adds	r3, #222	; 0xde
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	73fb      	strb	r3, [r7, #15]
 80072b0:	e004      	b.n	80072bc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80072b2:	2302      	movs	r3, #2
 80072b4:	73fb      	strb	r3, [r7, #15]
 80072b6:	e001      	b.n	80072bc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80072b8:	2302      	movs	r3, #2
 80072ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	460b      	mov	r3, r1
 80072d4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80072e0:	78fa      	ldrb	r2, [r7, #3]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d204      	bcs.n	80072f0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	78fa      	ldrb	r2, [r7, #3]
 80072ea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80072ee:	e001      	b.n	80072f4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80072f0:	2302      	movs	r3, #2
 80072f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007302:	b480      	push	{r7}
 8007304:	b087      	sub	sp, #28
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	4608      	mov	r0, r1
 800730c:	4611      	mov	r1, r2
 800730e:	461a      	mov	r2, r3
 8007310:	4603      	mov	r3, r0
 8007312:	70fb      	strb	r3, [r7, #3]
 8007314:	460b      	mov	r3, r1
 8007316:	70bb      	strb	r3, [r7, #2]
 8007318:	4613      	mov	r3, r2
 800731a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007320:	2300      	movs	r3, #0
 8007322:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800732a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800732c:	e025      	b.n	800737a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	221a      	movs	r2, #26
 8007332:	fb02 f303 	mul.w	r3, r2, r3
 8007336:	3308      	adds	r3, #8
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	3302      	adds	r3, #2
 800733e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	795b      	ldrb	r3, [r3, #5]
 8007344:	78fa      	ldrb	r2, [r7, #3]
 8007346:	429a      	cmp	r2, r3
 8007348:	d002      	beq.n	8007350 <USBH_FindInterface+0x4e>
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	2bff      	cmp	r3, #255	; 0xff
 800734e:	d111      	bne.n	8007374 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007354:	78ba      	ldrb	r2, [r7, #2]
 8007356:	429a      	cmp	r2, r3
 8007358:	d002      	beq.n	8007360 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800735a:	78bb      	ldrb	r3, [r7, #2]
 800735c:	2bff      	cmp	r3, #255	; 0xff
 800735e:	d109      	bne.n	8007374 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007364:	787a      	ldrb	r2, [r7, #1]
 8007366:	429a      	cmp	r2, r3
 8007368:	d002      	beq.n	8007370 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800736a:	787b      	ldrb	r3, [r7, #1]
 800736c:	2bff      	cmp	r3, #255	; 0xff
 800736e:	d101      	bne.n	8007374 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	e006      	b.n	8007382 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007374:	7dfb      	ldrb	r3, [r7, #23]
 8007376:	3301      	adds	r3, #1
 8007378:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d9d6      	bls.n	800732e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007380:	23ff      	movs	r3, #255	; 0xff
}
 8007382:	4618      	mov	r0, r3
 8007384:	371c      	adds	r7, #28
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b082      	sub	sp, #8
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 fd04 	bl	8008da4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800739c:	2101      	movs	r1, #1
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f001 fe1d 	bl	8008fde <USBH_LL_DriverVBUS>

  return USBH_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
	...

080073b0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af04      	add	r7, sp, #16
 80073b6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80073b8:	2302      	movs	r3, #2
 80073ba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d102      	bne.n	80073d2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2203      	movs	r2, #3
 80073d0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b0b      	cmp	r3, #11
 80073da:	f200 81be 	bhi.w	800775a <USBH_Process+0x3aa>
 80073de:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <USBH_Process+0x34>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	08007415 	.word	0x08007415
 80073e8:	08007447 	.word	0x08007447
 80073ec:	080074af 	.word	0x080074af
 80073f0:	080076f5 	.word	0x080076f5
 80073f4:	0800775b 	.word	0x0800775b
 80073f8:	08007553 	.word	0x08007553
 80073fc:	0800769b 	.word	0x0800769b
 8007400:	08007589 	.word	0x08007589
 8007404:	080075a9 	.word	0x080075a9
 8007408:	080075c9 	.word	0x080075c9
 800740c:	0800760d 	.word	0x0800760d
 8007410:	080076dd 	.word	0x080076dd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 819e 	beq.w	800775e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007428:	20c8      	movs	r0, #200	; 0xc8
 800742a:	f001 fe22 	bl	8009072 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f001 fd15 	bl	8008e5e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007444:	e18b      	b.n	800775e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800744c:	2b01      	cmp	r3, #1
 800744e:	d107      	bne.n	8007460 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800745e:	e18d      	b.n	800777c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800746a:	d914      	bls.n	8007496 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007472:	3301      	adds	r3, #1
 8007474:	b2da      	uxtb	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007482:	2b03      	cmp	r3, #3
 8007484:	d903      	bls.n	800748e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	220d      	movs	r2, #13
 800748a:	701a      	strb	r2, [r3, #0]
      break;
 800748c:	e176      	b.n	800777c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	701a      	strb	r2, [r3, #0]
      break;
 8007494:	e172      	b.n	800777c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800749c:	f103 020a 	add.w	r2, r3, #10
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80074a6:	200a      	movs	r0, #10
 80074a8:	f001 fde3 	bl	8009072 <USBH_Delay>
      break;
 80074ac:	e166      	b.n	800777c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074be:	2104      	movs	r1, #4
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80074c4:	2064      	movs	r0, #100	; 0x64
 80074c6:	f001 fdd4 	bl	8009072 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 fca0 	bl	8008e10 <USBH_LL_GetSpeed>
 80074d0:	4603      	mov	r3, r0
 80074d2:	461a      	mov	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2205      	movs	r2, #5
 80074de:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 faab 	bl	8008a3e <USBH_AllocPipe>
 80074e8:	4603      	mov	r3, r0
 80074ea:	461a      	mov	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80074f0:	2180      	movs	r1, #128	; 0x80
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 faa3 	bl	8008a3e <USBH_AllocPipe>
 80074f8:	4603      	mov	r3, r0
 80074fa:	461a      	mov	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	7919      	ldrb	r1, [r3, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007514:	b292      	uxth	r2, r2
 8007516:	9202      	str	r2, [sp, #8]
 8007518:	2200      	movs	r2, #0
 800751a:	9201      	str	r2, [sp, #4]
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	4603      	mov	r3, r0
 8007520:	2280      	movs	r2, #128	; 0x80
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f001 fa5c 	bl	80089e0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	7959      	ldrb	r1, [r3, #5]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800753c:	b292      	uxth	r2, r2
 800753e:	9202      	str	r2, [sp, #8]
 8007540:	2200      	movs	r2, #0
 8007542:	9201      	str	r2, [sp, #4]
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	4603      	mov	r3, r0
 8007548:	2200      	movs	r2, #0
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 fa48 	bl	80089e0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007550:	e114      	b.n	800777c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f918 	bl	8007788 <USBH_HandleEnum>
 8007558:	4603      	mov	r3, r0
 800755a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800755c:	7bbb      	ldrb	r3, [r7, #14]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	f040 80fe 	bne.w	8007762 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007574:	2b01      	cmp	r3, #1
 8007576:	d103      	bne.n	8007580 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2208      	movs	r2, #8
 800757c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800757e:	e0f0      	b.n	8007762 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2207      	movs	r2, #7
 8007584:	701a      	strb	r2, [r3, #0]
      break;
 8007586:	e0ec      	b.n	8007762 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 80e9 	beq.w	8007766 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800759a:	2101      	movs	r1, #1
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2208      	movs	r2, #8
 80075a4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80075a6:	e0de      	b.n	8007766 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fc3f 	bl	8007e36 <USBH_SetCfg>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f040 80d5 	bne.w	800776a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2209      	movs	r2, #9
 80075c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075c6:	e0d0      	b.n	800776a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d016      	beq.n	8007604 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80075d6:	2101      	movs	r1, #1
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fc4f 	bl	8007e7c <USBH_SetFeature>
 80075de:	4603      	mov	r3, r0
 80075e0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d103      	bne.n	80075f2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	220a      	movs	r2, #10
 80075ee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075f0:	e0bd      	b.n	800776e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	f040 80b9 	bne.w	800776e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	220a      	movs	r2, #10
 8007600:	701a      	strb	r2, [r3, #0]
      break;
 8007602:	e0b4      	b.n	800776e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	220a      	movs	r2, #10
 8007608:	701a      	strb	r2, [r3, #0]
      break;
 800760a:	e0b0      	b.n	800776e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 80ad 	beq.w	8007772 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]
 8007624:	e016      	b.n	8007654 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007626:	7bfa      	ldrb	r2, [r7, #15]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	32de      	adds	r2, #222	; 0xde
 800762c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007630:	791a      	ldrb	r2, [r3, #4]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007638:	429a      	cmp	r2, r3
 800763a:	d108      	bne.n	800764e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800763c:	7bfa      	ldrb	r2, [r7, #15]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	32de      	adds	r2, #222	; 0xde
 8007642:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800764c:	e005      	b.n	800765a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	3301      	adds	r3, #1
 8007652:	73fb      	strb	r3, [r7, #15]
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0e5      	beq.n	8007626 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d016      	beq.n	8007692 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	4798      	blx	r3
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d109      	bne.n	800768a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2206      	movs	r2, #6
 800767a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007682:	2103      	movs	r1, #3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007688:	e073      	b.n	8007772 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	220d      	movs	r2, #13
 800768e:	701a      	strb	r2, [r3, #0]
      break;
 8007690:	e06f      	b.n	8007772 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	220d      	movs	r2, #13
 8007696:	701a      	strb	r2, [r3, #0]
      break;
 8007698:	e06b      	b.n	8007772 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d017      	beq.n	80076d4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	4798      	blx	r3
 80076b0:	4603      	mov	r3, r0
 80076b2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d103      	bne.n	80076c4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	220b      	movs	r2, #11
 80076c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076c2:	e058      	b.n	8007776 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80076c4:	7bbb      	ldrb	r3, [r7, #14]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d154      	bne.n	8007776 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	220d      	movs	r2, #13
 80076d0:	701a      	strb	r2, [r3, #0]
      break;
 80076d2:	e050      	b.n	8007776 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	220d      	movs	r2, #13
 80076d8:	701a      	strb	r2, [r3, #0]
      break;
 80076da:	e04c      	b.n	8007776 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d049      	beq.n	800777a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4798      	blx	r3
      }
      break;
 80076f2:	e042      	b.n	800777a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff fd47 	bl	8007190 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d009      	beq.n	8007720 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007730:	2105      	movs	r1, #5
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b01      	cmp	r3, #1
 8007740:	d107      	bne.n	8007752 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff fe1f 	bl	800738e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007750:	e014      	b.n	800777c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 fb26 	bl	8008da4 <USBH_LL_Start>
      break;
 8007758:	e010      	b.n	800777c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800775a:	bf00      	nop
 800775c:	e00e      	b.n	800777c <USBH_Process+0x3cc>
      break;
 800775e:	bf00      	nop
 8007760:	e00c      	b.n	800777c <USBH_Process+0x3cc>
      break;
 8007762:	bf00      	nop
 8007764:	e00a      	b.n	800777c <USBH_Process+0x3cc>
    break;
 8007766:	bf00      	nop
 8007768:	e008      	b.n	800777c <USBH_Process+0x3cc>
      break;
 800776a:	bf00      	nop
 800776c:	e006      	b.n	800777c <USBH_Process+0x3cc>
      break;
 800776e:	bf00      	nop
 8007770:	e004      	b.n	800777c <USBH_Process+0x3cc>
      break;
 8007772:	bf00      	nop
 8007774:	e002      	b.n	800777c <USBH_Process+0x3cc>
      break;
 8007776:	bf00      	nop
 8007778:	e000      	b.n	800777c <USBH_Process+0x3cc>
      break;
 800777a:	bf00      	nop
  }
  return USBH_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop

08007788 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b088      	sub	sp, #32
 800778c:	af04      	add	r7, sp, #16
 800778e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007790:	2301      	movs	r3, #1
 8007792:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007794:	2301      	movs	r3, #1
 8007796:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	785b      	ldrb	r3, [r3, #1]
 800779c:	2b07      	cmp	r3, #7
 800779e:	f200 81c1 	bhi.w	8007b24 <USBH_HandleEnum+0x39c>
 80077a2:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <USBH_HandleEnum+0x20>)
 80077a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a8:	080077c9 	.word	0x080077c9
 80077ac:	08007887 	.word	0x08007887
 80077b0:	080078f1 	.word	0x080078f1
 80077b4:	0800797f 	.word	0x0800797f
 80077b8:	080079e9 	.word	0x080079e9
 80077bc:	08007a59 	.word	0x08007a59
 80077c0:	08007a9f 	.word	0x08007a9f
 80077c4:	08007ae5 	.word	0x08007ae5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80077c8:	2108      	movs	r1, #8
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fa50 	bl	8007c70 <USBH_Get_DevDesc>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d130      	bne.n	800783c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	7919      	ldrb	r1, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80077fe:	b292      	uxth	r2, r2
 8007800:	9202      	str	r2, [sp, #8]
 8007802:	2200      	movs	r2, #0
 8007804:	9201      	str	r2, [sp, #4]
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	4603      	mov	r3, r0
 800780a:	2280      	movs	r2, #128	; 0x80
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f001 f8e7 	bl	80089e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	7959      	ldrb	r1, [r3, #5]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007826:	b292      	uxth	r2, r2
 8007828:	9202      	str	r2, [sp, #8]
 800782a:	2200      	movs	r2, #0
 800782c:	9201      	str	r2, [sp, #4]
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	4603      	mov	r3, r0
 8007832:	2200      	movs	r2, #0
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f001 f8d3 	bl	80089e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800783a:	e175      	b.n	8007b28 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	2b03      	cmp	r3, #3
 8007840:	f040 8172 	bne.w	8007b28 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800784a:	3301      	adds	r3, #1
 800784c:	b2da      	uxtb	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800785a:	2b03      	cmp	r3, #3
 800785c:	d903      	bls.n	8007866 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	220d      	movs	r2, #13
 8007862:	701a      	strb	r2, [r3, #0]
      break;
 8007864:	e160      	b.n	8007b28 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	795b      	ldrb	r3, [r3, #5]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 f907 	bl	8008a80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	791b      	ldrb	r3, [r3, #4]
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 f901 	bl	8008a80 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	701a      	strb	r2, [r3, #0]
      break;
 8007884:	e150      	b.n	8007b28 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007886:	2112      	movs	r1, #18
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f9f1 	bl	8007c70 <USBH_Get_DevDesc>
 800788e:	4603      	mov	r3, r0
 8007890:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007892:	7bbb      	ldrb	r3, [r7, #14]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d103      	bne.n	80078a0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800789e:	e145      	b.n	8007b2c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	f040 8142 	bne.w	8007b2c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078ae:	3301      	adds	r3, #1
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d903      	bls.n	80078ca <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	220d      	movs	r2, #13
 80078c6:	701a      	strb	r2, [r3, #0]
      break;
 80078c8:	e130      	b.n	8007b2c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	795b      	ldrb	r3, [r3, #5]
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 f8d5 	bl	8008a80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	791b      	ldrb	r3, [r3, #4]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 f8cf 	bl	8008a80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	701a      	strb	r2, [r3, #0]
      break;
 80078ee:	e11d      	b.n	8007b2c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80078f0:	2101      	movs	r1, #1
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa7b 	bl	8007dee <USBH_SetAddress>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d132      	bne.n	8007968 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007902:	2002      	movs	r0, #2
 8007904:	f001 fbb5 	bl	8009072 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2203      	movs	r2, #3
 8007914:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	7919      	ldrb	r1, [r3, #4]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800792a:	b292      	uxth	r2, r2
 800792c:	9202      	str	r2, [sp, #8]
 800792e:	2200      	movs	r2, #0
 8007930:	9201      	str	r2, [sp, #4]
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	4603      	mov	r3, r0
 8007936:	2280      	movs	r2, #128	; 0x80
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 f851 	bl	80089e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	7959      	ldrb	r1, [r3, #5]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007952:	b292      	uxth	r2, r2
 8007954:	9202      	str	r2, [sp, #8]
 8007956:	2200      	movs	r2, #0
 8007958:	9201      	str	r2, [sp, #4]
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	4603      	mov	r3, r0
 800795e:	2200      	movs	r2, #0
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 f83d 	bl	80089e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007966:	e0e3      	b.n	8007b30 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	2b03      	cmp	r3, #3
 800796c:	f040 80e0 	bne.w	8007b30 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	220d      	movs	r2, #13
 8007974:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	705a      	strb	r2, [r3, #1]
      break;
 800797c:	e0d8      	b.n	8007b30 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800797e:	2109      	movs	r1, #9
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f9a1 	bl	8007cc8 <USBH_Get_CfgDesc>
 8007986:	4603      	mov	r3, r0
 8007988:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d103      	bne.n	8007998 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2204      	movs	r2, #4
 8007994:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007996:	e0cd      	b.n	8007b34 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b03      	cmp	r3, #3
 800799c:	f040 80ca 	bne.w	8007b34 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079a6:	3301      	adds	r3, #1
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d903      	bls.n	80079c2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	220d      	movs	r2, #13
 80079be:	701a      	strb	r2, [r3, #0]
      break;
 80079c0:	e0b8      	b.n	8007b34 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	795b      	ldrb	r3, [r3, #5]
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 f859 	bl	8008a80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	791b      	ldrb	r3, [r3, #4]
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 f853 	bl	8008a80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
      break;
 80079e6:	e0a5      	b.n	8007b34 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f969 	bl	8007cc8 <USBH_Get_CfgDesc>
 80079f6:	4603      	mov	r3, r0
 80079f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d103      	bne.n	8007a08 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2205      	movs	r2, #5
 8007a04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a06:	e097      	b.n	8007b38 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	f040 8094 	bne.w	8007b38 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a16:	3301      	adds	r3, #1
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	d903      	bls.n	8007a32 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	220d      	movs	r2, #13
 8007a2e:	701a      	strb	r2, [r3, #0]
      break;
 8007a30:	e082      	b.n	8007b38 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	795b      	ldrb	r3, [r3, #5]
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 f821 	bl	8008a80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	791b      	ldrb	r3, [r3, #4]
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 f81b 	bl	8008a80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	701a      	strb	r2, [r3, #0]
      break;
 8007a56:	e06f      	b.n	8007b38 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d019      	beq.n	8007a96 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a6e:	23ff      	movs	r3, #255	; 0xff
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f953 	bl	8007d1c <USBH_Get_StringDesc>
 8007a76:	4603      	mov	r3, r0
 8007a78:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d103      	bne.n	8007a88 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2206      	movs	r2, #6
 8007a84:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a86:	e059      	b.n	8007b3c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d156      	bne.n	8007b3c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2206      	movs	r2, #6
 8007a92:	705a      	strb	r2, [r3, #1]
      break;
 8007a94:	e052      	b.n	8007b3c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2206      	movs	r2, #6
 8007a9a:	705a      	strb	r2, [r3, #1]
      break;
 8007a9c:	e04e      	b.n	8007b3c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d019      	beq.n	8007adc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ab4:	23ff      	movs	r3, #255	; 0xff
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f930 	bl	8007d1c <USBH_Get_StringDesc>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d103      	bne.n	8007ace <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2207      	movs	r2, #7
 8007aca:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007acc:	e038      	b.n	8007b40 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d135      	bne.n	8007b40 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2207      	movs	r2, #7
 8007ad8:	705a      	strb	r2, [r3, #1]
      break;
 8007ada:	e031      	b.n	8007b40 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2207      	movs	r2, #7
 8007ae0:	705a      	strb	r2, [r3, #1]
      break;
 8007ae2:	e02d      	b.n	8007b40 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d017      	beq.n	8007b1e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007afa:	23ff      	movs	r3, #255	; 0xff
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f90d 	bl	8007d1c <USBH_Get_StringDesc>
 8007b02:	4603      	mov	r3, r0
 8007b04:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d102      	bne.n	8007b12 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007b10:	e018      	b.n	8007b44 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	2b03      	cmp	r3, #3
 8007b16:	d115      	bne.n	8007b44 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b1c:	e012      	b.n	8007b44 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	73fb      	strb	r3, [r7, #15]
      break;
 8007b22:	e00f      	b.n	8007b44 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007b24:	bf00      	nop
 8007b26:	e00e      	b.n	8007b46 <USBH_HandleEnum+0x3be>
      break;
 8007b28:	bf00      	nop
 8007b2a:	e00c      	b.n	8007b46 <USBH_HandleEnum+0x3be>
      break;
 8007b2c:	bf00      	nop
 8007b2e:	e00a      	b.n	8007b46 <USBH_HandleEnum+0x3be>
      break;
 8007b30:	bf00      	nop
 8007b32:	e008      	b.n	8007b46 <USBH_HandleEnum+0x3be>
      break;
 8007b34:	bf00      	nop
 8007b36:	e006      	b.n	8007b46 <USBH_HandleEnum+0x3be>
      break;
 8007b38:	bf00      	nop
 8007b3a:	e004      	b.n	8007b46 <USBH_HandleEnum+0x3be>
      break;
 8007b3c:	bf00      	nop
 8007b3e:	e002      	b.n	8007b46 <USBH_HandleEnum+0x3be>
      break;
 8007b40:	bf00      	nop
 8007b42:	e000      	b.n	8007b46 <USBH_HandleEnum+0x3be>
      break;
 8007b44:	bf00      	nop
  }
  return Status;
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007b62:	bf00      	nop
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b082      	sub	sp, #8
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f804 	bl	8007b92 <USBH_HandleSof>
}
 8007b8a:	bf00      	nop
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b0b      	cmp	r3, #11
 8007ba2:	d10a      	bne.n	8007bba <USBH_HandleSof+0x28>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	4798      	blx	r3
  }
}
 8007bba:	bf00      	nop
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b083      	sub	sp, #12
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007bd2:	bf00      	nop
}
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b083      	sub	sp, #12
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007bee:	bf00      	nop
}
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b083      	sub	sp, #12
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 f8c6 	bl	8008dda <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	791b      	ldrb	r3, [r3, #4]
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 ff13 	bl	8008a80 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	795b      	ldrb	r3, [r3, #5]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 ff0d 	bl	8008a80 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af02      	add	r7, sp, #8
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007c7c:	887b      	ldrh	r3, [r7, #2]
 8007c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c82:	d901      	bls.n	8007c88 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e01b      	b.n	8007cc0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007c8e:	887b      	ldrh	r3, [r7, #2]
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	4613      	mov	r3, r2
 8007c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c98:	2100      	movs	r1, #0
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f872 	bl	8007d84 <USBH_GetDescriptor>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d109      	bne.n	8007cbe <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007cb0:	887a      	ldrh	r2, [r7, #2]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f929 	bl	8007f0c <USBH_ParseDevDesc>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af02      	add	r7, sp, #8
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	331c      	adds	r3, #28
 8007cd8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007cda:	887b      	ldrh	r3, [r7, #2]
 8007cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ce0:	d901      	bls.n	8007ce6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e016      	b.n	8007d14 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007ce6:	887b      	ldrh	r3, [r7, #2]
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f846 	bl	8007d84 <USBH_GetDescriptor>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d107      	bne.n	8007d12 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007d02:	887b      	ldrh	r3, [r7, #2]
 8007d04:	461a      	mov	r2, r3
 8007d06:	68b9      	ldr	r1, [r7, #8]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f9b3 	bl	8008074 <USBH_ParseCfgDesc>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af02      	add	r7, sp, #8
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	607a      	str	r2, [r7, #4]
 8007d26:	461a      	mov	r2, r3
 8007d28:	460b      	mov	r3, r1
 8007d2a:	72fb      	strb	r3, [r7, #11]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007d30:	893b      	ldrh	r3, [r7, #8]
 8007d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d36:	d802      	bhi.n	8007d3e <USBH_Get_StringDesc+0x22>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d101      	bne.n	8007d42 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e01c      	b.n	8007d7c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007d42:	7afb      	ldrb	r3, [r7, #11]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d4a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007d52:	893b      	ldrh	r3, [r7, #8]
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	460b      	mov	r3, r1
 8007d58:	2100      	movs	r1, #0
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 f812 	bl	8007d84 <USBH_GetDescriptor>
 8007d60:	4603      	mov	r3, r0
 8007d62:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d107      	bne.n	8007d7a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d70:	893a      	ldrh	r2, [r7, #8]
 8007d72:	6879      	ldr	r1, [r7, #4]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 fb93 	bl	80084a0 <USBH_ParseStringDesc>
  }

  return status;
 8007d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	607b      	str	r3, [r7, #4]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	72fb      	strb	r3, [r7, #11]
 8007d92:	4613      	mov	r3, r2
 8007d94:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	789b      	ldrb	r3, [r3, #2]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d11c      	bne.n	8007dd8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007d9e:	7afb      	ldrb	r3, [r7, #11]
 8007da0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2206      	movs	r2, #6
 8007dae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	893a      	ldrh	r2, [r7, #8]
 8007db4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007db6:	893b      	ldrh	r3, [r7, #8]
 8007db8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dc0:	d104      	bne.n	8007dcc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f240 4209 	movw	r2, #1033	; 0x409
 8007dc8:	829a      	strh	r2, [r3, #20]
 8007dca:	e002      	b.n	8007dd2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8b3a      	ldrh	r2, [r7, #24]
 8007dd6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007dd8:	8b3b      	ldrh	r3, [r7, #24]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	6879      	ldr	r1, [r7, #4]
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 fbac 	bl	800853c <USBH_CtlReq>
 8007de4:	4603      	mov	r3, r0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b082      	sub	sp, #8
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	460b      	mov	r3, r1
 8007df8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	789b      	ldrb	r3, [r3, #2]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d10f      	bne.n	8007e22 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2205      	movs	r2, #5
 8007e0c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007e0e:	78fb      	ldrb	r3, [r7, #3]
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e22:	2200      	movs	r2, #0
 8007e24:	2100      	movs	r1, #0
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fb88 	bl	800853c <USBH_CtlReq>
 8007e2c:	4603      	mov	r3, r0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	789b      	ldrb	r3, [r3, #2]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d10e      	bne.n	8007e68 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2209      	movs	r2, #9
 8007e54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	887a      	ldrh	r2, [r7, #2]
 8007e5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fb65 	bl	800853c <USBH_CtlReq>
 8007e72:	4603      	mov	r3, r0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	460b      	mov	r3, r1
 8007e86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	789b      	ldrb	r3, [r3, #2]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d10f      	bne.n	8007eb0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2203      	movs	r2, #3
 8007e9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fb41 	bl	800853c <USBH_CtlReq>
 8007eba:	4603      	mov	r3, r0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	789b      	ldrb	r3, [r3, #2]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d10f      	bne.n	8007ef8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007eea:	78fb      	ldrb	r3, [r7, #3]
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ef8:	2200      	movs	r2, #0
 8007efa:	2100      	movs	r1, #0
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fb1d 	bl	800853c <USBH_CtlReq>
 8007f02:	4603      	mov	r3, r0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	4613      	mov	r3, r2
 8007f18:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f203 3326 	addw	r3, r3, #806	; 0x326
 8007f20:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e098      	b.n	8008062 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	781a      	ldrb	r2, [r3, #0]
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	785a      	ldrb	r2, [r3, #1]
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	3302      	adds	r3, #2
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	3303      	adds	r3, #3
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	4313      	orrs	r3, r2
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	791a      	ldrb	r2, [r3, #4]
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	795a      	ldrb	r2, [r3, #5]
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	799a      	ldrb	r2, [r3, #6]
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	79da      	ldrb	r2, [r3, #7]
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d004      	beq.n	8007f90 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d11b      	bne.n	8007fc8 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	79db      	ldrb	r3, [r3, #7]
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	dc0f      	bgt.n	8007fb8 <USBH_ParseDevDesc+0xac>
 8007f98:	2b08      	cmp	r3, #8
 8007f9a:	db0f      	blt.n	8007fbc <USBH_ParseDevDesc+0xb0>
 8007f9c:	3b08      	subs	r3, #8
 8007f9e:	4a34      	ldr	r2, [pc, #208]	; (8008070 <USBH_ParseDevDesc+0x164>)
 8007fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	bf14      	ite	ne
 8007fac:	2301      	movne	r3, #1
 8007fae:	2300      	moveq	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d106      	bne.n	8007fc4 <USBH_ParseDevDesc+0xb8>
 8007fb6:	e001      	b.n	8007fbc <USBH_ParseDevDesc+0xb0>
 8007fb8:	2b40      	cmp	r3, #64	; 0x40
 8007fba:	d003      	beq.n	8007fc4 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	2208      	movs	r2, #8
 8007fc0:	71da      	strb	r2, [r3, #7]
        break;
 8007fc2:	e000      	b.n	8007fc6 <USBH_ParseDevDesc+0xba>
        break;
 8007fc4:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007fc6:	e00e      	b.n	8007fe6 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d107      	bne.n	8007fe2 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	79db      	ldrb	r3, [r3, #7]
 8007fd6:	2b08      	cmp	r3, #8
 8007fd8:	d005      	beq.n	8007fe6 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	2208      	movs	r2, #8
 8007fde:	71da      	strb	r2, [r3, #7]
 8007fe0:	e001      	b.n	8007fe6 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007fe6:	88fb      	ldrh	r3, [r7, #6]
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	d939      	bls.n	8008060 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	3308      	adds	r3, #8
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	3309      	adds	r3, #9
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	021b      	lsls	r3, r3, #8
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	4313      	orrs	r3, r2
 8008002:	b29a      	uxth	r2, r3
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	330a      	adds	r3, #10
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	b29a      	uxth	r2, r3
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	330b      	adds	r3, #11
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	b29b      	uxth	r3, r3
 8008018:	021b      	lsls	r3, r3, #8
 800801a:	b29b      	uxth	r3, r3
 800801c:	4313      	orrs	r3, r2
 800801e:	b29a      	uxth	r2, r3
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	330c      	adds	r3, #12
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	b29a      	uxth	r2, r3
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	330d      	adds	r3, #13
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	021b      	lsls	r3, r3, #8
 8008036:	b29b      	uxth	r3, r3
 8008038:	4313      	orrs	r3, r2
 800803a:	b29a      	uxth	r2, r3
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	7b9a      	ldrb	r2, [r3, #14]
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	7bda      	ldrb	r2, [r3, #15]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	7c1a      	ldrb	r2, [r3, #16]
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	7c5a      	ldrb	r2, [r3, #17]
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008060:	7dfb      	ldrb	r3, [r7, #23]
}
 8008062:	4618      	mov	r0, r3
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	01000101 	.word	0x01000101

08008074 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b08c      	sub	sp, #48	; 0x30
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	4613      	mov	r3, r2
 8008080:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008088:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008090:	2300      	movs	r3, #0
 8008092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80080a2:	2302      	movs	r3, #2
 80080a4:	e0db      	b.n	800825e <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	781a      	ldrb	r2, [r3, #0]
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	785a      	ldrb	r2, [r3, #1]
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	3302      	adds	r3, #2
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	3303      	adds	r3, #3
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	021b      	lsls	r3, r3, #8
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	4313      	orrs	r3, r2
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d6:	bf28      	it	cs
 80080d8:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80080dc:	b29a      	uxth	r2, r3
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	791a      	ldrb	r2, [r3, #4]
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	795a      	ldrb	r2, [r3, #5]
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	799a      	ldrb	r2, [r3, #6]
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	79da      	ldrb	r2, [r3, #7]
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	7a1a      	ldrb	r2, [r3, #8]
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800810a:	6a3b      	ldr	r3, [r7, #32]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b09      	cmp	r3, #9
 8008110:	d002      	beq.n	8008118 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	2209      	movs	r2, #9
 8008116:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008118:	88fb      	ldrh	r3, [r7, #6]
 800811a:	2b09      	cmp	r3, #9
 800811c:	f240 809d 	bls.w	800825a <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8008120:	2309      	movs	r3, #9
 8008122:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008124:	2300      	movs	r3, #0
 8008126:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008128:	e081      	b.n	800822e <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800812a:	f107 0316 	add.w	r3, r7, #22
 800812e:	4619      	mov	r1, r3
 8008130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008132:	f000 f9e8 	bl	8008506 <USBH_GetNextDesc>
 8008136:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813a:	785b      	ldrb	r3, [r3, #1]
 800813c:	2b04      	cmp	r3, #4
 800813e:	d176      	bne.n	800822e <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b09      	cmp	r3, #9
 8008146:	d002      	beq.n	800814e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814a:	2209      	movs	r2, #9
 800814c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800814e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008152:	221a      	movs	r2, #26
 8008154:	fb02 f303 	mul.w	r3, r2, r3
 8008158:	3308      	adds	r3, #8
 800815a:	6a3a      	ldr	r2, [r7, #32]
 800815c:	4413      	add	r3, r2
 800815e:	3302      	adds	r3, #2
 8008160:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008164:	69f8      	ldr	r0, [r7, #28]
 8008166:	f000 f87e 	bl	8008266 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008170:	2300      	movs	r3, #0
 8008172:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008174:	e043      	b.n	80081fe <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008176:	f107 0316 	add.w	r3, r7, #22
 800817a:	4619      	mov	r1, r3
 800817c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800817e:	f000 f9c2 	bl	8008506 <USBH_GetNextDesc>
 8008182:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008186:	785b      	ldrb	r3, [r3, #1]
 8008188:	2b05      	cmp	r3, #5
 800818a:	d138      	bne.n	80081fe <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	795b      	ldrb	r3, [r3, #5]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d113      	bne.n	80081bc <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008198:	2b02      	cmp	r3, #2
 800819a:	d003      	beq.n	80081a4 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	799b      	ldrb	r3, [r3, #6]
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d10b      	bne.n	80081bc <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	79db      	ldrb	r3, [r3, #7]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10b      	bne.n	80081c4 <USBH_ParseCfgDesc+0x150>
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b09      	cmp	r3, #9
 80081b2:	d007      	beq.n	80081c4 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	2209      	movs	r2, #9
 80081b8:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80081ba:	e003      	b.n	80081c4 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	2207      	movs	r2, #7
 80081c0:	701a      	strb	r2, [r3, #0]
 80081c2:	e000      	b.n	80081c6 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80081c4:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80081c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80081ce:	3201      	adds	r2, #1
 80081d0:	00d2      	lsls	r2, r2, #3
 80081d2:	211a      	movs	r1, #26
 80081d4:	fb01 f303 	mul.w	r3, r1, r3
 80081d8:	4413      	add	r3, r2
 80081da:	3308      	adds	r3, #8
 80081dc:	6a3a      	ldr	r2, [r7, #32]
 80081de:	4413      	add	r3, r2
 80081e0:	3304      	adds	r3, #4
 80081e2:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80081e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081e6:	69b9      	ldr	r1, [r7, #24]
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 f870 	bl	80082ce <USBH_ParseEPDesc>
 80081ee:	4603      	mov	r3, r0
 80081f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80081f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081f8:	3301      	adds	r3, #1
 80081fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	791b      	ldrb	r3, [r3, #4]
 8008202:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008206:	429a      	cmp	r2, r3
 8008208:	d204      	bcs.n	8008214 <USBH_ParseCfgDesc+0x1a0>
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	885a      	ldrh	r2, [r3, #2]
 800820e:	8afb      	ldrh	r3, [r7, #22]
 8008210:	429a      	cmp	r2, r3
 8008212:	d8b0      	bhi.n	8008176 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	791b      	ldrb	r3, [r3, #4]
 8008218:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800821c:	429a      	cmp	r2, r3
 800821e:	d201      	bcs.n	8008224 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8008220:	2303      	movs	r3, #3
 8008222:	e01c      	b.n	800825e <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8008224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008228:	3301      	adds	r3, #1
 800822a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800822e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008232:	2b01      	cmp	r3, #1
 8008234:	d805      	bhi.n	8008242 <USBH_ParseCfgDesc+0x1ce>
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	885a      	ldrh	r2, [r3, #2]
 800823a:	8afb      	ldrh	r3, [r7, #22]
 800823c:	429a      	cmp	r2, r3
 800823e:	f63f af74 	bhi.w	800812a <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	791b      	ldrb	r3, [r3, #4]
 8008246:	2b02      	cmp	r3, #2
 8008248:	bf28      	it	cs
 800824a:	2302      	movcs	r3, #2
 800824c:	b2db      	uxtb	r3, r3
 800824e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008252:	429a      	cmp	r2, r3
 8008254:	d201      	bcs.n	800825a <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8008256:	2303      	movs	r3, #3
 8008258:	e001      	b.n	800825e <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800825a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800825e:	4618      	mov	r0, r3
 8008260:	3730      	adds	r7, #48	; 0x30
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781a      	ldrb	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	785a      	ldrb	r2, [r3, #1]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	789a      	ldrb	r2, [r3, #2]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	78da      	ldrb	r2, [r3, #3]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	3304      	adds	r3, #4
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	2b02      	cmp	r3, #2
 8008298:	bf28      	it	cs
 800829a:	2302      	movcs	r3, #2
 800829c:	b2da      	uxtb	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	795a      	ldrb	r2, [r3, #5]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	799a      	ldrb	r2, [r3, #6]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	79da      	ldrb	r2, [r3, #7]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	7a1a      	ldrb	r2, [r3, #8]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	721a      	strb	r2, [r3, #8]
}
 80082c2:	bf00      	nop
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b087      	sub	sp, #28
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	781a      	ldrb	r2, [r3, #0]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	785a      	ldrb	r2, [r3, #1]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	789a      	ldrb	r2, [r3, #2]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	78da      	ldrb	r2, [r3, #3]
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	3304      	adds	r3, #4
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	b29a      	uxth	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	3305      	adds	r3, #5
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	b29b      	uxth	r3, r3
 800830e:	021b      	lsls	r3, r3, #8
 8008310:	b29b      	uxth	r3, r3
 8008312:	4313      	orrs	r3, r2
 8008314:	b29a      	uxth	r2, r3
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	799a      	ldrb	r2, [r3, #6]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	889b      	ldrh	r3, [r3, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d009      	beq.n	800833e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800832e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008332:	d804      	bhi.n	800833e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800833c:	d901      	bls.n	8008342 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800833e:	2303      	movs	r3, #3
 8008340:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008348:	2b00      	cmp	r3, #0
 800834a:	d136      	bne.n	80083ba <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	78db      	ldrb	r3, [r3, #3]
 8008350:	f003 0303 	and.w	r3, r3, #3
 8008354:	2b02      	cmp	r3, #2
 8008356:	d108      	bne.n	800836a <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	889b      	ldrh	r3, [r3, #4]
 800835c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008360:	f240 8097 	bls.w	8008492 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008364:	2303      	movs	r3, #3
 8008366:	75fb      	strb	r3, [r7, #23]
 8008368:	e093      	b.n	8008492 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	78db      	ldrb	r3, [r3, #3]
 800836e:	f003 0303 	and.w	r3, r3, #3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d107      	bne.n	8008386 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	889b      	ldrh	r3, [r3, #4]
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	f240 8089 	bls.w	8008492 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008380:	2303      	movs	r3, #3
 8008382:	75fb      	strb	r3, [r7, #23]
 8008384:	e085      	b.n	8008492 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	78db      	ldrb	r3, [r3, #3]
 800838a:	f003 0303 	and.w	r3, r3, #3
 800838e:	2b01      	cmp	r3, #1
 8008390:	d005      	beq.n	800839e <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	78db      	ldrb	r3, [r3, #3]
 8008396:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800839a:	2b03      	cmp	r3, #3
 800839c:	d10a      	bne.n	80083b4 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	799b      	ldrb	r3, [r3, #6]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <USBH_ParseEPDesc+0xe0>
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	799b      	ldrb	r3, [r3, #6]
 80083aa:	2b10      	cmp	r3, #16
 80083ac:	d970      	bls.n	8008490 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80083ae:	2303      	movs	r3, #3
 80083b0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80083b2:	e06d      	b.n	8008490 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80083b4:	2303      	movs	r3, #3
 80083b6:	75fb      	strb	r3, [r7, #23]
 80083b8:	e06b      	b.n	8008492 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d13c      	bne.n	800843e <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	78db      	ldrb	r3, [r3, #3]
 80083c8:	f003 0303 	and.w	r3, r3, #3
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d005      	beq.n	80083dc <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	78db      	ldrb	r3, [r3, #3]
 80083d4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d106      	bne.n	80083ea <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	889b      	ldrh	r3, [r3, #4]
 80083e0:	2b40      	cmp	r3, #64	; 0x40
 80083e2:	d956      	bls.n	8008492 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80083e4:	2303      	movs	r3, #3
 80083e6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80083e8:	e053      	b.n	8008492 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	78db      	ldrb	r3, [r3, #3]
 80083ee:	f003 0303 	and.w	r3, r3, #3
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d10e      	bne.n	8008414 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	799b      	ldrb	r3, [r3, #6]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d007      	beq.n	800840e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008402:	2b10      	cmp	r3, #16
 8008404:	d803      	bhi.n	800840e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800840a:	2b40      	cmp	r3, #64	; 0x40
 800840c:	d941      	bls.n	8008492 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800840e:	2303      	movs	r3, #3
 8008410:	75fb      	strb	r3, [r7, #23]
 8008412:	e03e      	b.n	8008492 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	78db      	ldrb	r3, [r3, #3]
 8008418:	f003 0303 	and.w	r3, r3, #3
 800841c:	2b03      	cmp	r3, #3
 800841e:	d10b      	bne.n	8008438 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	799b      	ldrb	r3, [r3, #6]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d004      	beq.n	8008432 <USBH_ParseEPDesc+0x164>
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	889b      	ldrh	r3, [r3, #4]
 800842c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008430:	d32f      	bcc.n	8008492 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008432:	2303      	movs	r3, #3
 8008434:	75fb      	strb	r3, [r7, #23]
 8008436:	e02c      	b.n	8008492 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008438:	2303      	movs	r3, #3
 800843a:	75fb      	strb	r3, [r7, #23]
 800843c:	e029      	b.n	8008492 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008444:	2b02      	cmp	r3, #2
 8008446:	d120      	bne.n	800848a <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	78db      	ldrb	r3, [r3, #3]
 800844c:	f003 0303 	and.w	r3, r3, #3
 8008450:	2b00      	cmp	r3, #0
 8008452:	d106      	bne.n	8008462 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	889b      	ldrh	r3, [r3, #4]
 8008458:	2b08      	cmp	r3, #8
 800845a:	d01a      	beq.n	8008492 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800845c:	2303      	movs	r3, #3
 800845e:	75fb      	strb	r3, [r7, #23]
 8008460:	e017      	b.n	8008492 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	78db      	ldrb	r3, [r3, #3]
 8008466:	f003 0303 	and.w	r3, r3, #3
 800846a:	2b03      	cmp	r3, #3
 800846c:	d10a      	bne.n	8008484 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	799b      	ldrb	r3, [r3, #6]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <USBH_ParseEPDesc+0x1b0>
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	889b      	ldrh	r3, [r3, #4]
 800847a:	2b08      	cmp	r3, #8
 800847c:	d909      	bls.n	8008492 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800847e:	2303      	movs	r3, #3
 8008480:	75fb      	strb	r3, [r7, #23]
 8008482:	e006      	b.n	8008492 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008484:	2303      	movs	r3, #3
 8008486:	75fb      	strb	r3, [r7, #23]
 8008488:	e003      	b.n	8008492 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800848a:	2303      	movs	r3, #3
 800848c:	75fb      	strb	r3, [r7, #23]
 800848e:	e000      	b.n	8008492 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008490:	bf00      	nop
  }

  return status;
 8008492:	7dfb      	ldrb	r3, [r7, #23]
}
 8008494:	4618      	mov	r0, r3
 8008496:	371c      	adds	r7, #28
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	4613      	mov	r3, r2
 80084ac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3301      	adds	r3, #1
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	d120      	bne.n	80084fa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	1e9a      	subs	r2, r3, #2
 80084be:	88fb      	ldrh	r3, [r7, #6]
 80084c0:	4293      	cmp	r3, r2
 80084c2:	bf28      	it	cs
 80084c4:	4613      	movcs	r3, r2
 80084c6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	3302      	adds	r3, #2
 80084cc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80084ce:	2300      	movs	r3, #0
 80084d0:	82fb      	strh	r3, [r7, #22]
 80084d2:	e00b      	b.n	80084ec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80084d4:	8afb      	ldrh	r3, [r7, #22]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	4413      	add	r3, r2
 80084da:	781a      	ldrb	r2, [r3, #0]
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	701a      	strb	r2, [r3, #0]
      pdest++;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	3301      	adds	r3, #1
 80084e4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80084e6:	8afb      	ldrh	r3, [r7, #22]
 80084e8:	3302      	adds	r3, #2
 80084ea:	82fb      	strh	r3, [r7, #22]
 80084ec:	8afa      	ldrh	r2, [r7, #22]
 80084ee:	8abb      	ldrh	r3, [r7, #20]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d3ef      	bcc.n	80084d4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2200      	movs	r2, #0
 80084f8:	701a      	strb	r2, [r3, #0]
  }
}
 80084fa:	bf00      	nop
 80084fc:	371c      	adds	r7, #28
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008506:	b480      	push	{r7}
 8008508:	b085      	sub	sp, #20
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	881a      	ldrh	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	b29b      	uxth	r3, r3
 800851a:	4413      	add	r3, r2
 800851c:	b29a      	uxth	r2, r3
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4413      	add	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800852e:	68fb      	ldr	r3, [r7, #12]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	4613      	mov	r3, r2
 8008548:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800854a:	2301      	movs	r3, #1
 800854c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	789b      	ldrb	r3, [r3, #2]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d002      	beq.n	800855c <USBH_CtlReq+0x20>
 8008556:	2b02      	cmp	r3, #2
 8008558:	d00f      	beq.n	800857a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800855a:	e027      	b.n	80085ac <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	88fa      	ldrh	r2, [r7, #6]
 8008566:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2201      	movs	r2, #1
 800856c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2202      	movs	r2, #2
 8008572:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008574:	2301      	movs	r3, #1
 8008576:	75fb      	strb	r3, [r7, #23]
      break;
 8008578:	e018      	b.n	80085ac <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f000 f81c 	bl	80085b8 <USBH_HandleControl>
 8008580:	4603      	mov	r3, r0
 8008582:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008584:	7dfb      	ldrb	r3, [r7, #23]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <USBH_CtlReq+0x54>
 800858a:	7dfb      	ldrb	r3, [r7, #23]
 800858c:	2b03      	cmp	r3, #3
 800858e:	d106      	bne.n	800859e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2201      	movs	r2, #1
 8008594:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	761a      	strb	r2, [r3, #24]
      break;
 800859c:	e005      	b.n	80085aa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800859e:	7dfb      	ldrb	r3, [r7, #23]
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d102      	bne.n	80085aa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2201      	movs	r2, #1
 80085a8:	709a      	strb	r2, [r3, #2]
      break;
 80085aa:	bf00      	nop
  }
  return status;
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
	...

080085b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af02      	add	r7, sp, #8
 80085be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80085c0:	2301      	movs	r3, #1
 80085c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	7e1b      	ldrb	r3, [r3, #24]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	2b0a      	cmp	r3, #10
 80085d0:	f200 8156 	bhi.w	8008880 <USBH_HandleControl+0x2c8>
 80085d4:	a201      	add	r2, pc, #4	; (adr r2, 80085dc <USBH_HandleControl+0x24>)
 80085d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085da:	bf00      	nop
 80085dc:	08008609 	.word	0x08008609
 80085e0:	08008623 	.word	0x08008623
 80085e4:	0800868d 	.word	0x0800868d
 80085e8:	080086b3 	.word	0x080086b3
 80085ec:	080086eb 	.word	0x080086eb
 80085f0:	08008715 	.word	0x08008715
 80085f4:	08008767 	.word	0x08008767
 80085f8:	08008789 	.word	0x08008789
 80085fc:	080087c5 	.word	0x080087c5
 8008600:	080087eb 	.word	0x080087eb
 8008604:	08008829 	.word	0x08008829
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f103 0110 	add.w	r1, r3, #16
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	795b      	ldrb	r3, [r3, #5]
 8008612:	461a      	mov	r2, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f943 	bl	80088a0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2202      	movs	r2, #2
 800861e:	761a      	strb	r2, [r3, #24]
      break;
 8008620:	e139      	b.n	8008896 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	795b      	ldrb	r3, [r3, #5]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fcc5 	bl	8008fb8 <USBH_LL_GetURBState>
 800862e:	4603      	mov	r3, r0
 8008630:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d11e      	bne.n	8008676 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	7c1b      	ldrb	r3, [r3, #16]
 800863c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008640:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	8adb      	ldrh	r3, [r3, #22]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00a      	beq.n	8008660 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800864a:	7b7b      	ldrb	r3, [r7, #13]
 800864c:	2b80      	cmp	r3, #128	; 0x80
 800864e:	d103      	bne.n	8008658 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2203      	movs	r2, #3
 8008654:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008656:	e115      	b.n	8008884 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2205      	movs	r2, #5
 800865c:	761a      	strb	r2, [r3, #24]
      break;
 800865e:	e111      	b.n	8008884 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008660:	7b7b      	ldrb	r3, [r7, #13]
 8008662:	2b80      	cmp	r3, #128	; 0x80
 8008664:	d103      	bne.n	800866e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2209      	movs	r2, #9
 800866a:	761a      	strb	r2, [r3, #24]
      break;
 800866c:	e10a      	b.n	8008884 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2207      	movs	r2, #7
 8008672:	761a      	strb	r2, [r3, #24]
      break;
 8008674:	e106      	b.n	8008884 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008676:	7bbb      	ldrb	r3, [r7, #14]
 8008678:	2b04      	cmp	r3, #4
 800867a:	d003      	beq.n	8008684 <USBH_HandleControl+0xcc>
 800867c:	7bbb      	ldrb	r3, [r7, #14]
 800867e:	2b02      	cmp	r3, #2
 8008680:	f040 8100 	bne.w	8008884 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	220b      	movs	r2, #11
 8008688:	761a      	strb	r2, [r3, #24]
      break;
 800868a:	e0fb      	b.n	8008884 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008692:	b29a      	uxth	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6899      	ldr	r1, [r3, #8]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	899a      	ldrh	r2, [r3, #12]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	791b      	ldrb	r3, [r3, #4]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f93a 	bl	800891e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2204      	movs	r2, #4
 80086ae:	761a      	strb	r2, [r3, #24]
      break;
 80086b0:	e0f1      	b.n	8008896 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	791b      	ldrb	r3, [r3, #4]
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fc7d 	bl	8008fb8 <USBH_LL_GetURBState>
 80086be:	4603      	mov	r3, r0
 80086c0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d102      	bne.n	80086ce <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2209      	movs	r2, #9
 80086cc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	2b05      	cmp	r3, #5
 80086d2:	d102      	bne.n	80086da <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80086d4:	2303      	movs	r3, #3
 80086d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086d8:	e0d6      	b.n	8008888 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80086da:	7bbb      	ldrb	r3, [r7, #14]
 80086dc:	2b04      	cmp	r3, #4
 80086de:	f040 80d3 	bne.w	8008888 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	220b      	movs	r2, #11
 80086e6:	761a      	strb	r2, [r3, #24]
      break;
 80086e8:	e0ce      	b.n	8008888 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6899      	ldr	r1, [r3, #8]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	899a      	ldrh	r2, [r3, #12]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	795b      	ldrb	r3, [r3, #5]
 80086f6:	2001      	movs	r0, #1
 80086f8:	9000      	str	r0, [sp, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f8ea 	bl	80088d4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008706:	b29a      	uxth	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2206      	movs	r2, #6
 8008710:	761a      	strb	r2, [r3, #24]
      break;
 8008712:	e0c0      	b.n	8008896 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	795b      	ldrb	r3, [r3, #5]
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fc4c 	bl	8008fb8 <USBH_LL_GetURBState>
 8008720:	4603      	mov	r3, r0
 8008722:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008724:	7bbb      	ldrb	r3, [r7, #14]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d103      	bne.n	8008732 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2207      	movs	r2, #7
 800872e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008730:	e0ac      	b.n	800888c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	2b05      	cmp	r3, #5
 8008736:	d105      	bne.n	8008744 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	220c      	movs	r2, #12
 800873c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800873e:	2303      	movs	r3, #3
 8008740:	73fb      	strb	r3, [r7, #15]
      break;
 8008742:	e0a3      	b.n	800888c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	2b02      	cmp	r3, #2
 8008748:	d103      	bne.n	8008752 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2205      	movs	r2, #5
 800874e:	761a      	strb	r2, [r3, #24]
      break;
 8008750:	e09c      	b.n	800888c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	2b04      	cmp	r3, #4
 8008756:	f040 8099 	bne.w	800888c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	220b      	movs	r2, #11
 800875e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008760:	2302      	movs	r3, #2
 8008762:	73fb      	strb	r3, [r7, #15]
      break;
 8008764:	e092      	b.n	800888c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	791b      	ldrb	r3, [r3, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	2100      	movs	r1, #0
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f8d5 	bl	800891e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800877a:	b29a      	uxth	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2208      	movs	r2, #8
 8008784:	761a      	strb	r2, [r3, #24]

      break;
 8008786:	e086      	b.n	8008896 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	791b      	ldrb	r3, [r3, #4]
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fc12 	bl	8008fb8 <USBH_LL_GetURBState>
 8008794:	4603      	mov	r3, r0
 8008796:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d105      	bne.n	80087aa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	220d      	movs	r2, #13
 80087a2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087a8:	e072      	b.n	8008890 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	2b04      	cmp	r3, #4
 80087ae:	d103      	bne.n	80087b8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	220b      	movs	r2, #11
 80087b4:	761a      	strb	r2, [r3, #24]
      break;
 80087b6:	e06b      	b.n	8008890 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	2b05      	cmp	r3, #5
 80087bc:	d168      	bne.n	8008890 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80087be:	2303      	movs	r3, #3
 80087c0:	73fb      	strb	r3, [r7, #15]
      break;
 80087c2:	e065      	b.n	8008890 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	795b      	ldrb	r3, [r3, #5]
 80087c8:	2201      	movs	r2, #1
 80087ca:	9200      	str	r2, [sp, #0]
 80087cc:	2200      	movs	r2, #0
 80087ce:	2100      	movs	r1, #0
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f87f 	bl	80088d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087dc:	b29a      	uxth	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	220a      	movs	r2, #10
 80087e6:	761a      	strb	r2, [r3, #24]
      break;
 80087e8:	e055      	b.n	8008896 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	795b      	ldrb	r3, [r3, #5]
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fbe1 	bl	8008fb8 <USBH_LL_GetURBState>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d105      	bne.n	800880c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	220d      	movs	r2, #13
 8008808:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800880a:	e043      	b.n	8008894 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	2b02      	cmp	r3, #2
 8008810:	d103      	bne.n	800881a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2209      	movs	r2, #9
 8008816:	761a      	strb	r2, [r3, #24]
      break;
 8008818:	e03c      	b.n	8008894 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	2b04      	cmp	r3, #4
 800881e:	d139      	bne.n	8008894 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	220b      	movs	r2, #11
 8008824:	761a      	strb	r2, [r3, #24]
      break;
 8008826:	e035      	b.n	8008894 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	7e5b      	ldrb	r3, [r3, #25]
 800882c:	3301      	adds	r3, #1
 800882e:	b2da      	uxtb	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	765a      	strb	r2, [r3, #25]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	7e5b      	ldrb	r3, [r3, #25]
 8008838:	2b02      	cmp	r3, #2
 800883a:	d806      	bhi.n	800884a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008848:	e025      	b.n	8008896 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008850:	2106      	movs	r1, #6
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	795b      	ldrb	r3, [r3, #5]
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f90c 	bl	8008a80 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	791b      	ldrb	r3, [r3, #4]
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f906 	bl	8008a80 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800887a:	2302      	movs	r3, #2
 800887c:	73fb      	strb	r3, [r7, #15]
      break;
 800887e:	e00a      	b.n	8008896 <USBH_HandleControl+0x2de>

    default:
      break;
 8008880:	bf00      	nop
 8008882:	e008      	b.n	8008896 <USBH_HandleControl+0x2de>
      break;
 8008884:	bf00      	nop
 8008886:	e006      	b.n	8008896 <USBH_HandleControl+0x2de>
      break;
 8008888:	bf00      	nop
 800888a:	e004      	b.n	8008896 <USBH_HandleControl+0x2de>
      break;
 800888c:	bf00      	nop
 800888e:	e002      	b.n	8008896 <USBH_HandleControl+0x2de>
      break;
 8008890:	bf00      	nop
 8008892:	e000      	b.n	8008896 <USBH_HandleControl+0x2de>
      break;
 8008894:	bf00      	nop
  }

  return status;
 8008896:	7bfb      	ldrb	r3, [r7, #15]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b088      	sub	sp, #32
 80088a4:	af04      	add	r7, sp, #16
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	4613      	mov	r3, r2
 80088ac:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088ae:	79f9      	ldrb	r1, [r7, #7]
 80088b0:	2300      	movs	r3, #0
 80088b2:	9303      	str	r3, [sp, #12]
 80088b4:	2308      	movs	r3, #8
 80088b6:	9302      	str	r3, [sp, #8]
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	2300      	movs	r3, #0
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	2300      	movs	r3, #0
 80088c2:	2200      	movs	r2, #0
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 fb46 	bl	8008f56 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b088      	sub	sp, #32
 80088d8:	af04      	add	r7, sp, #16
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	4611      	mov	r1, r2
 80088e0:	461a      	mov	r2, r3
 80088e2:	460b      	mov	r3, r1
 80088e4:	80fb      	strh	r3, [r7, #6]
 80088e6:	4613      	mov	r3, r2
 80088e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088f8:	7979      	ldrb	r1, [r7, #5]
 80088fa:	7e3b      	ldrb	r3, [r7, #24]
 80088fc:	9303      	str	r3, [sp, #12]
 80088fe:	88fb      	ldrh	r3, [r7, #6]
 8008900:	9302      	str	r3, [sp, #8]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	9301      	str	r3, [sp, #4]
 8008906:	2301      	movs	r3, #1
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	2300      	movs	r3, #0
 800890c:	2200      	movs	r2, #0
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 fb21 	bl	8008f56 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b088      	sub	sp, #32
 8008922:	af04      	add	r7, sp, #16
 8008924:	60f8      	str	r0, [r7, #12]
 8008926:	60b9      	str	r1, [r7, #8]
 8008928:	4611      	mov	r1, r2
 800892a:	461a      	mov	r2, r3
 800892c:	460b      	mov	r3, r1
 800892e:	80fb      	strh	r3, [r7, #6]
 8008930:	4613      	mov	r3, r2
 8008932:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008934:	7979      	ldrb	r1, [r7, #5]
 8008936:	2300      	movs	r3, #0
 8008938:	9303      	str	r3, [sp, #12]
 800893a:	88fb      	ldrh	r3, [r7, #6]
 800893c:	9302      	str	r3, [sp, #8]
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	9301      	str	r3, [sp, #4]
 8008942:	2301      	movs	r3, #1
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	2300      	movs	r3, #0
 8008948:	2201      	movs	r2, #1
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 fb03 	bl	8008f56 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008950:	2300      	movs	r3, #0

}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b088      	sub	sp, #32
 800895e:	af04      	add	r7, sp, #16
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	4611      	mov	r1, r2
 8008966:	461a      	mov	r2, r3
 8008968:	460b      	mov	r3, r1
 800896a:	80fb      	strh	r3, [r7, #6]
 800896c:	4613      	mov	r3, r2
 800896e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800897e:	7979      	ldrb	r1, [r7, #5]
 8008980:	7e3b      	ldrb	r3, [r7, #24]
 8008982:	9303      	str	r3, [sp, #12]
 8008984:	88fb      	ldrh	r3, [r7, #6]
 8008986:	9302      	str	r3, [sp, #8]
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	9301      	str	r3, [sp, #4]
 800898c:	2301      	movs	r3, #1
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	2302      	movs	r3, #2
 8008992:	2200      	movs	r2, #0
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f000 fade 	bl	8008f56 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b088      	sub	sp, #32
 80089a8:	af04      	add	r7, sp, #16
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	4611      	mov	r1, r2
 80089b0:	461a      	mov	r2, r3
 80089b2:	460b      	mov	r3, r1
 80089b4:	80fb      	strh	r3, [r7, #6]
 80089b6:	4613      	mov	r3, r2
 80089b8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089ba:	7979      	ldrb	r1, [r7, #5]
 80089bc:	2300      	movs	r3, #0
 80089be:	9303      	str	r3, [sp, #12]
 80089c0:	88fb      	ldrh	r3, [r7, #6]
 80089c2:	9302      	str	r3, [sp, #8]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	9301      	str	r3, [sp, #4]
 80089c8:	2301      	movs	r3, #1
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	2302      	movs	r3, #2
 80089ce:	2201      	movs	r2, #1
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f000 fac0 	bl	8008f56 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af04      	add	r7, sp, #16
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	4608      	mov	r0, r1
 80089ea:	4611      	mov	r1, r2
 80089ec:	461a      	mov	r2, r3
 80089ee:	4603      	mov	r3, r0
 80089f0:	70fb      	strb	r3, [r7, #3]
 80089f2:	460b      	mov	r3, r1
 80089f4:	70bb      	strb	r3, [r7, #2]
 80089f6:	4613      	mov	r3, r2
 80089f8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80089fa:	7878      	ldrb	r0, [r7, #1]
 80089fc:	78ba      	ldrb	r2, [r7, #2]
 80089fe:	78f9      	ldrb	r1, [r7, #3]
 8008a00:	8b3b      	ldrh	r3, [r7, #24]
 8008a02:	9302      	str	r3, [sp, #8]
 8008a04:	7d3b      	ldrb	r3, [r7, #20]
 8008a06:	9301      	str	r3, [sp, #4]
 8008a08:	7c3b      	ldrb	r3, [r7, #16]
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa53 	bl	8008eba <USBH_LL_OpenPipe>

  return USBH_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008a2a:	78fb      	ldrb	r3, [r7, #3]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fa72 	bl	8008f18 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	460b      	mov	r3, r1
 8008a48:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f836 	bl	8008abc <USBH_GetFreePipe>
 8008a50:	4603      	mov	r3, r0
 8008a52:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008a54:	89fb      	ldrh	r3, [r7, #14]
 8008a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d00a      	beq.n	8008a74 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008a5e:	78fa      	ldrb	r2, [r7, #3]
 8008a60:	89fb      	ldrh	r3, [r7, #14]
 8008a62:	f003 030f 	and.w	r3, r3, #15
 8008a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	33e0      	adds	r3, #224	; 0xe0
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	440b      	add	r3, r1
 8008a72:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008a74:	89fb      	ldrh	r3, [r7, #14]
 8008a76:	b2db      	uxtb	r3, r3
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008a8c:	78fb      	ldrb	r3, [r7, #3]
 8008a8e:	2b0f      	cmp	r3, #15
 8008a90:	d80d      	bhi.n	8008aae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008a92:	78fb      	ldrb	r3, [r7, #3]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	33e0      	adds	r3, #224	; 0xe0
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	78fb      	ldrb	r3, [r7, #3]
 8008aa0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008aa4:	6879      	ldr	r1, [r7, #4]
 8008aa6:	33e0      	adds	r3, #224	; 0xe0
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	440b      	add	r3, r1
 8008aac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	73fb      	strb	r3, [r7, #15]
 8008acc:	e00f      	b.n	8008aee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	33e0      	adds	r3, #224	; 0xe0
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d102      	bne.n	8008ae8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	e007      	b.n	8008af8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	3301      	adds	r3, #1
 8008aec:	73fb      	strb	r3, [r7, #15]
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	2b0f      	cmp	r3, #15
 8008af2:	d9ec      	bls.n	8008ace <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008b08:	2201      	movs	r2, #1
 8008b0a:	490e      	ldr	r1, [pc, #56]	; (8008b44 <MX_USB_HOST_Init+0x40>)
 8008b0c:	480e      	ldr	r0, [pc, #56]	; (8008b48 <MX_USB_HOST_Init+0x44>)
 8008b0e:	f7fe fb05 	bl	800711c <USBH_Init>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008b18:	f7f7 ff2c 	bl	8000974 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008b1c:	490b      	ldr	r1, [pc, #44]	; (8008b4c <MX_USB_HOST_Init+0x48>)
 8008b1e:	480a      	ldr	r0, [pc, #40]	; (8008b48 <MX_USB_HOST_Init+0x44>)
 8008b20:	f7fe fba9 	bl	8007276 <USBH_RegisterClass>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d001      	beq.n	8008b2e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008b2a:	f7f7 ff23 	bl	8000974 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008b2e:	4806      	ldr	r0, [pc, #24]	; (8008b48 <MX_USB_HOST_Init+0x44>)
 8008b30:	f7fe fc2d 	bl	800738e <USBH_Start>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008b3a:	f7f7 ff1b 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008b3e:	bf00      	nop
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	08008b65 	.word	0x08008b65
 8008b48:	200001dc 	.word	0x200001dc
 8008b4c:	20000010 	.word	0x20000010

08008b50 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008b54:	4802      	ldr	r0, [pc, #8]	; (8008b60 <MX_USB_HOST_Process+0x10>)
 8008b56:	f7fe fc2b 	bl	80073b0 <USBH_Process>
}
 8008b5a:	bf00      	nop
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	200001dc 	.word	0x200001dc

08008b64 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008b70:	78fb      	ldrb	r3, [r7, #3]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	2b04      	cmp	r3, #4
 8008b76:	d819      	bhi.n	8008bac <USBH_UserProcess+0x48>
 8008b78:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <USBH_UserProcess+0x1c>)
 8008b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7e:	bf00      	nop
 8008b80:	08008bad 	.word	0x08008bad
 8008b84:	08008b9d 	.word	0x08008b9d
 8008b88:	08008bad 	.word	0x08008bad
 8008b8c:	08008ba5 	.word	0x08008ba5
 8008b90:	08008b95 	.word	0x08008b95
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008b94:	4b09      	ldr	r3, [pc, #36]	; (8008bbc <USBH_UserProcess+0x58>)
 8008b96:	2203      	movs	r2, #3
 8008b98:	701a      	strb	r2, [r3, #0]
  break;
 8008b9a:	e008      	b.n	8008bae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008b9c:	4b07      	ldr	r3, [pc, #28]	; (8008bbc <USBH_UserProcess+0x58>)
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	701a      	strb	r2, [r3, #0]
  break;
 8008ba2:	e004      	b.n	8008bae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008ba4:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <USBH_UserProcess+0x58>)
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	701a      	strb	r2, [r3, #0]
  break;
 8008baa:	e000      	b.n	8008bae <USBH_UserProcess+0x4a>

  default:
  break;
 8008bac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008bae:	bf00      	nop
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	200005b4 	.word	0x200005b4

08008bc0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b08a      	sub	sp, #40	; 0x28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bc8:	f107 0314 	add.w	r3, r7, #20
 8008bcc:	2200      	movs	r2, #0
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	605a      	str	r2, [r3, #4]
 8008bd2:	609a      	str	r2, [r3, #8]
 8008bd4:	60da      	str	r2, [r3, #12]
 8008bd6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008be0:	d147      	bne.n	8008c72 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008be2:	2300      	movs	r3, #0
 8008be4:	613b      	str	r3, [r7, #16]
 8008be6:	4b25      	ldr	r3, [pc, #148]	; (8008c7c <HAL_HCD_MspInit+0xbc>)
 8008be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bea:	4a24      	ldr	r2, [pc, #144]	; (8008c7c <HAL_HCD_MspInit+0xbc>)
 8008bec:	f043 0301 	orr.w	r3, r3, #1
 8008bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8008bf2:	4b22      	ldr	r3, [pc, #136]	; (8008c7c <HAL_HCD_MspInit+0xbc>)
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	613b      	str	r3, [r7, #16]
 8008bfc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c04:	2300      	movs	r3, #0
 8008c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008c0c:	f107 0314 	add.w	r3, r7, #20
 8008c10:	4619      	mov	r1, r3
 8008c12:	481b      	ldr	r0, [pc, #108]	; (8008c80 <HAL_HCD_MspInit+0xc0>)
 8008c14:	f7f8 faa2 	bl	800115c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008c18:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c1e:	2302      	movs	r3, #2
 8008c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c22:	2300      	movs	r3, #0
 8008c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c26:	2300      	movs	r3, #0
 8008c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c2a:	230a      	movs	r3, #10
 8008c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c2e:	f107 0314 	add.w	r3, r7, #20
 8008c32:	4619      	mov	r1, r3
 8008c34:	4812      	ldr	r0, [pc, #72]	; (8008c80 <HAL_HCD_MspInit+0xc0>)
 8008c36:	f7f8 fa91 	bl	800115c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c3a:	4b10      	ldr	r3, [pc, #64]	; (8008c7c <HAL_HCD_MspInit+0xbc>)
 8008c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3e:	4a0f      	ldr	r2, [pc, #60]	; (8008c7c <HAL_HCD_MspInit+0xbc>)
 8008c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c44:	6353      	str	r3, [r2, #52]	; 0x34
 8008c46:	2300      	movs	r3, #0
 8008c48:	60fb      	str	r3, [r7, #12]
 8008c4a:	4b0c      	ldr	r3, [pc, #48]	; (8008c7c <HAL_HCD_MspInit+0xbc>)
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4e:	4a0b      	ldr	r2, [pc, #44]	; (8008c7c <HAL_HCD_MspInit+0xbc>)
 8008c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c54:	6453      	str	r3, [r2, #68]	; 0x44
 8008c56:	4b09      	ldr	r3, [pc, #36]	; (8008c7c <HAL_HCD_MspInit+0xbc>)
 8008c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c5e:	60fb      	str	r3, [r7, #12]
 8008c60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c62:	2200      	movs	r2, #0
 8008c64:	2100      	movs	r1, #0
 8008c66:	2043      	movs	r0, #67	; 0x43
 8008c68:	f7f8 fa41 	bl	80010ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c6c:	2043      	movs	r0, #67	; 0x43
 8008c6e:	f7f8 fa5a 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c72:	bf00      	nop
 8008c74:	3728      	adds	r7, #40	; 0x28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	40023800 	.word	0x40023800
 8008c80:	40020000 	.word	0x40020000

08008c84 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe ff6b 	bl	8007b6e <USBH_LL_IncTimer>
}
 8008c98:	bf00      	nop
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe ffa3 	bl	8007bfa <USBH_LL_Connect>
}
 8008cb4:	bf00      	nop
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe ffac 	bl	8007c28 <USBH_LL_Disconnect>
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	70fb      	strb	r3, [r7, #3]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe ff5d 	bl	8007bc2 <USBH_LL_PortEnabled>
}
 8008d08:	bf00      	nop
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe ff5d 	bl	8007bde <USBH_LL_PortDisabled>
}
 8008d24:	bf00      	nop
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d12a      	bne.n	8008d94 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008d3e:	4a18      	ldr	r2, [pc, #96]	; (8008da0 <USBH_LL_Init+0x74>)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a15      	ldr	r2, [pc, #84]	; (8008da0 <USBH_LL_Init+0x74>)
 8008d4a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d4e:	4b14      	ldr	r3, [pc, #80]	; (8008da0 <USBH_LL_Init+0x74>)
 8008d50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d54:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008d56:	4b12      	ldr	r3, [pc, #72]	; (8008da0 <USBH_LL_Init+0x74>)
 8008d58:	2208      	movs	r2, #8
 8008d5a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008d5c:	4b10      	ldr	r3, [pc, #64]	; (8008da0 <USBH_LL_Init+0x74>)
 8008d5e:	2201      	movs	r2, #1
 8008d60:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d62:	4b0f      	ldr	r3, [pc, #60]	; (8008da0 <USBH_LL_Init+0x74>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008d68:	4b0d      	ldr	r3, [pc, #52]	; (8008da0 <USBH_LL_Init+0x74>)
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d6e:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <USBH_LL_Init+0x74>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008d74:	480a      	ldr	r0, [pc, #40]	; (8008da0 <USBH_LL_Init+0x74>)
 8008d76:	f7f8 fba6 	bl	80014c6 <HAL_HCD_Init>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008d80:	f7f7 fdf8 	bl	8000974 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008d84:	4806      	ldr	r0, [pc, #24]	; (8008da0 <USBH_LL_Init+0x74>)
 8008d86:	f7f9 f807 	bl	8001d98 <HAL_HCD_GetCurrentFrame>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7fe fede 	bl	8007b50 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	200005b8 	.word	0x200005b8

08008da4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7f8 ff74 	bl	8001ca8 <HAL_HCD_Start>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 f95e 	bl	8009088 <USBH_Get_USB_Status>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b084      	sub	sp, #16
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7f8 ff7c 	bl	8001cee <HAL_HCD_Stop>
 8008df6:	4603      	mov	r3, r0
 8008df8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 f943 	bl	8009088 <USBH_Get_USB_Status>
 8008e02:	4603      	mov	r3, r0
 8008e04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7f8 ffc6 	bl	8001db4 <HAL_HCD_GetCurrentSpeed>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d00c      	beq.n	8008e48 <USBH_LL_GetSpeed+0x38>
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d80d      	bhi.n	8008e4e <USBH_LL_GetSpeed+0x3e>
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <USBH_LL_GetSpeed+0x2c>
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d003      	beq.n	8008e42 <USBH_LL_GetSpeed+0x32>
 8008e3a:	e008      	b.n	8008e4e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e40:	e008      	b.n	8008e54 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008e42:	2301      	movs	r3, #1
 8008e44:	73fb      	strb	r3, [r7, #15]
    break;
 8008e46:	e005      	b.n	8008e54 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008e48:	2302      	movs	r3, #2
 8008e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e4c:	e002      	b.n	8008e54 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	73fb      	strb	r3, [r7, #15]
    break;
 8008e52:	bf00      	nop
  }
  return  speed;
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b084      	sub	sp, #16
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7f8 ff57 	bl	8001d28 <HAL_HCD_ResetPort>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 f901 	bl	8009088 <USBH_Get_USB_Status>
 8008e86:	4603      	mov	r3, r0
 8008e88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ea6:	78fa      	ldrb	r2, [r7, #3]
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7f8 ff5f 	bl	8001d6e <HAL_HCD_HC_GetXferCount>
 8008eb0:	4603      	mov	r3, r0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008eba:	b590      	push	{r4, r7, lr}
 8008ebc:	b089      	sub	sp, #36	; 0x24
 8008ebe:	af04      	add	r7, sp, #16
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	4608      	mov	r0, r1
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	4603      	mov	r3, r0
 8008eca:	70fb      	strb	r3, [r7, #3]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70bb      	strb	r3, [r7, #2]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008ee2:	787c      	ldrb	r4, [r7, #1]
 8008ee4:	78ba      	ldrb	r2, [r7, #2]
 8008ee6:	78f9      	ldrb	r1, [r7, #3]
 8008ee8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008eea:	9302      	str	r3, [sp, #8]
 8008eec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ef0:	9301      	str	r3, [sp, #4]
 8008ef2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	4623      	mov	r3, r4
 8008efa:	f7f8 fb4b 	bl	8001594 <HAL_HCD_HC_Init>
 8008efe:	4603      	mov	r3, r0
 8008f00:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 f8bf 	bl	8009088 <USBH_Get_USB_Status>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd90      	pop	{r4, r7, pc}

08008f18 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f32:	78fa      	ldrb	r2, [r7, #3]
 8008f34:	4611      	mov	r1, r2
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7f8 fbe4 	bl	8001704 <HAL_HCD_HC_Halt>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 f8a0 	bl	8009088 <USBH_Get_USB_Status>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008f56:	b590      	push	{r4, r7, lr}
 8008f58:	b089      	sub	sp, #36	; 0x24
 8008f5a:	af04      	add	r7, sp, #16
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	4608      	mov	r0, r1
 8008f60:	4611      	mov	r1, r2
 8008f62:	461a      	mov	r2, r3
 8008f64:	4603      	mov	r3, r0
 8008f66:	70fb      	strb	r3, [r7, #3]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	70bb      	strb	r3, [r7, #2]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008f7e:	787c      	ldrb	r4, [r7, #1]
 8008f80:	78ba      	ldrb	r2, [r7, #2]
 8008f82:	78f9      	ldrb	r1, [r7, #3]
 8008f84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f88:	9303      	str	r3, [sp, #12]
 8008f8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f8c:	9302      	str	r3, [sp, #8]
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f90:	9301      	str	r3, [sp, #4]
 8008f92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	4623      	mov	r3, r4
 8008f9a:	f7f8 fbd7 	bl	800174c <HAL_HCD_HC_SubmitRequest>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 f86f 	bl	8009088 <USBH_Get_USB_Status>
 8008faa:	4603      	mov	r3, r0
 8008fac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd90      	pop	{r4, r7, pc}

08008fb8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fca:	78fa      	ldrb	r2, [r7, #3]
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7f8 feb8 	bl	8001d44 <HAL_HCD_HC_GetURBState>
 8008fd4:	4603      	mov	r3, r0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b082      	sub	sp, #8
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d103      	bne.n	8008ffc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 f872 	bl	80090e0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008ffc:	20c8      	movs	r0, #200	; 0xc8
 8008ffe:	f7f7 ff77 	bl	8000ef0 <HAL_Delay>
  return USBH_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	70fb      	strb	r3, [r7, #3]
 8009018:	4613      	mov	r3, r2
 800901a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009022:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009024:	78fa      	ldrb	r2, [r7, #3]
 8009026:	68f9      	ldr	r1, [r7, #12]
 8009028:	4613      	mov	r3, r2
 800902a:	011b      	lsls	r3, r3, #4
 800902c:	1a9b      	subs	r3, r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	440b      	add	r3, r1
 8009032:	3317      	adds	r3, #23
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800903a:	78fa      	ldrb	r2, [r7, #3]
 800903c:	68f9      	ldr	r1, [r7, #12]
 800903e:	4613      	mov	r3, r2
 8009040:	011b      	lsls	r3, r3, #4
 8009042:	1a9b      	subs	r3, r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	440b      	add	r3, r1
 8009048:	333c      	adds	r3, #60	; 0x3c
 800904a:	78ba      	ldrb	r2, [r7, #2]
 800904c:	701a      	strb	r2, [r3, #0]
 800904e:	e009      	b.n	8009064 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009050:	78fa      	ldrb	r2, [r7, #3]
 8009052:	68f9      	ldr	r1, [r7, #12]
 8009054:	4613      	mov	r3, r2
 8009056:	011b      	lsls	r3, r3, #4
 8009058:	1a9b      	subs	r3, r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	440b      	add	r3, r1
 800905e:	333d      	adds	r3, #61	; 0x3d
 8009060:	78ba      	ldrb	r2, [r7, #2]
 8009062:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr

08009072 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b082      	sub	sp, #8
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7f7 ff38 	bl	8000ef0 <HAL_Delay>
}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	4603      	mov	r3, r0
 8009090:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009096:	79fb      	ldrb	r3, [r7, #7]
 8009098:	2b03      	cmp	r3, #3
 800909a:	d817      	bhi.n	80090cc <USBH_Get_USB_Status+0x44>
 800909c:	a201      	add	r2, pc, #4	; (adr r2, 80090a4 <USBH_Get_USB_Status+0x1c>)
 800909e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a2:	bf00      	nop
 80090a4:	080090b5 	.word	0x080090b5
 80090a8:	080090bb 	.word	0x080090bb
 80090ac:	080090c1 	.word	0x080090c1
 80090b0:	080090c7 	.word	0x080090c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]
    break;
 80090b8:	e00b      	b.n	80090d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80090ba:	2302      	movs	r3, #2
 80090bc:	73fb      	strb	r3, [r7, #15]
    break;
 80090be:	e008      	b.n	80090d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80090c0:	2301      	movs	r3, #1
 80090c2:	73fb      	strb	r3, [r7, #15]
    break;
 80090c4:	e005      	b.n	80090d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80090c6:	2302      	movs	r3, #2
 80090c8:	73fb      	strb	r3, [r7, #15]
    break;
 80090ca:	e002      	b.n	80090d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80090cc:	2302      	movs	r3, #2
 80090ce:	73fb      	strb	r3, [r7, #15]
    break;
 80090d0:	bf00      	nop
  }
  return usb_status;
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	4603      	mov	r3, r0
 80090e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80090ea:	79fb      	ldrb	r3, [r7, #7]
 80090ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80090ee:	79fb      	ldrb	r3, [r7, #7]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d102      	bne.n	80090fa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80090f4:	2300      	movs	r3, #0
 80090f6:	73fb      	strb	r3, [r7, #15]
 80090f8:	e001      	b.n	80090fe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80090fa:	2301      	movs	r3, #1
 80090fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	461a      	mov	r2, r3
 8009102:	2101      	movs	r1, #1
 8009104:	4803      	ldr	r0, [pc, #12]	; (8009114 <MX_DriverVbusFS+0x34>)
 8009106:	f7f8 f9c5 	bl	8001494 <HAL_GPIO_WritePin>
}
 800910a:	bf00      	nop
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	40020800 	.word	0x40020800

08009118 <malloc>:
 8009118:	4b02      	ldr	r3, [pc, #8]	; (8009124 <malloc+0xc>)
 800911a:	4601      	mov	r1, r0
 800911c:	6818      	ldr	r0, [r3, #0]
 800911e:	f000 b82b 	b.w	8009178 <_malloc_r>
 8009122:	bf00      	nop
 8009124:	2000007c 	.word	0x2000007c

08009128 <free>:
 8009128:	4b02      	ldr	r3, [pc, #8]	; (8009134 <free+0xc>)
 800912a:	4601      	mov	r1, r0
 800912c:	6818      	ldr	r0, [r3, #0]
 800912e:	f000 b8f3 	b.w	8009318 <_free_r>
 8009132:	bf00      	nop
 8009134:	2000007c 	.word	0x2000007c

08009138 <sbrk_aligned>:
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	4e0e      	ldr	r6, [pc, #56]	; (8009174 <sbrk_aligned+0x3c>)
 800913c:	460c      	mov	r4, r1
 800913e:	6831      	ldr	r1, [r6, #0]
 8009140:	4605      	mov	r5, r0
 8009142:	b911      	cbnz	r1, 800914a <sbrk_aligned+0x12>
 8009144:	f000 f8ac 	bl	80092a0 <_sbrk_r>
 8009148:	6030      	str	r0, [r6, #0]
 800914a:	4621      	mov	r1, r4
 800914c:	4628      	mov	r0, r5
 800914e:	f000 f8a7 	bl	80092a0 <_sbrk_r>
 8009152:	1c43      	adds	r3, r0, #1
 8009154:	d00a      	beq.n	800916c <sbrk_aligned+0x34>
 8009156:	1cc4      	adds	r4, r0, #3
 8009158:	f024 0403 	bic.w	r4, r4, #3
 800915c:	42a0      	cmp	r0, r4
 800915e:	d007      	beq.n	8009170 <sbrk_aligned+0x38>
 8009160:	1a21      	subs	r1, r4, r0
 8009162:	4628      	mov	r0, r5
 8009164:	f000 f89c 	bl	80092a0 <_sbrk_r>
 8009168:	3001      	adds	r0, #1
 800916a:	d101      	bne.n	8009170 <sbrk_aligned+0x38>
 800916c:	f04f 34ff 	mov.w	r4, #4294967295
 8009170:	4620      	mov	r0, r4
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	2000099c 	.word	0x2000099c

08009178 <_malloc_r>:
 8009178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800917c:	1ccd      	adds	r5, r1, #3
 800917e:	f025 0503 	bic.w	r5, r5, #3
 8009182:	3508      	adds	r5, #8
 8009184:	2d0c      	cmp	r5, #12
 8009186:	bf38      	it	cc
 8009188:	250c      	movcc	r5, #12
 800918a:	2d00      	cmp	r5, #0
 800918c:	4607      	mov	r7, r0
 800918e:	db01      	blt.n	8009194 <_malloc_r+0x1c>
 8009190:	42a9      	cmp	r1, r5
 8009192:	d905      	bls.n	80091a0 <_malloc_r+0x28>
 8009194:	230c      	movs	r3, #12
 8009196:	603b      	str	r3, [r7, #0]
 8009198:	2600      	movs	r6, #0
 800919a:	4630      	mov	r0, r6
 800919c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009274 <_malloc_r+0xfc>
 80091a4:	f000 f868 	bl	8009278 <__malloc_lock>
 80091a8:	f8d8 3000 	ldr.w	r3, [r8]
 80091ac:	461c      	mov	r4, r3
 80091ae:	bb5c      	cbnz	r4, 8009208 <_malloc_r+0x90>
 80091b0:	4629      	mov	r1, r5
 80091b2:	4638      	mov	r0, r7
 80091b4:	f7ff ffc0 	bl	8009138 <sbrk_aligned>
 80091b8:	1c43      	adds	r3, r0, #1
 80091ba:	4604      	mov	r4, r0
 80091bc:	d155      	bne.n	800926a <_malloc_r+0xf2>
 80091be:	f8d8 4000 	ldr.w	r4, [r8]
 80091c2:	4626      	mov	r6, r4
 80091c4:	2e00      	cmp	r6, #0
 80091c6:	d145      	bne.n	8009254 <_malloc_r+0xdc>
 80091c8:	2c00      	cmp	r4, #0
 80091ca:	d048      	beq.n	800925e <_malloc_r+0xe6>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	4631      	mov	r1, r6
 80091d0:	4638      	mov	r0, r7
 80091d2:	eb04 0903 	add.w	r9, r4, r3
 80091d6:	f000 f863 	bl	80092a0 <_sbrk_r>
 80091da:	4581      	cmp	r9, r0
 80091dc:	d13f      	bne.n	800925e <_malloc_r+0xe6>
 80091de:	6821      	ldr	r1, [r4, #0]
 80091e0:	1a6d      	subs	r5, r5, r1
 80091e2:	4629      	mov	r1, r5
 80091e4:	4638      	mov	r0, r7
 80091e6:	f7ff ffa7 	bl	8009138 <sbrk_aligned>
 80091ea:	3001      	adds	r0, #1
 80091ec:	d037      	beq.n	800925e <_malloc_r+0xe6>
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	442b      	add	r3, r5
 80091f2:	6023      	str	r3, [r4, #0]
 80091f4:	f8d8 3000 	ldr.w	r3, [r8]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d038      	beq.n	800926e <_malloc_r+0xf6>
 80091fc:	685a      	ldr	r2, [r3, #4]
 80091fe:	42a2      	cmp	r2, r4
 8009200:	d12b      	bne.n	800925a <_malloc_r+0xe2>
 8009202:	2200      	movs	r2, #0
 8009204:	605a      	str	r2, [r3, #4]
 8009206:	e00f      	b.n	8009228 <_malloc_r+0xb0>
 8009208:	6822      	ldr	r2, [r4, #0]
 800920a:	1b52      	subs	r2, r2, r5
 800920c:	d41f      	bmi.n	800924e <_malloc_r+0xd6>
 800920e:	2a0b      	cmp	r2, #11
 8009210:	d917      	bls.n	8009242 <_malloc_r+0xca>
 8009212:	1961      	adds	r1, r4, r5
 8009214:	42a3      	cmp	r3, r4
 8009216:	6025      	str	r5, [r4, #0]
 8009218:	bf18      	it	ne
 800921a:	6059      	strne	r1, [r3, #4]
 800921c:	6863      	ldr	r3, [r4, #4]
 800921e:	bf08      	it	eq
 8009220:	f8c8 1000 	streq.w	r1, [r8]
 8009224:	5162      	str	r2, [r4, r5]
 8009226:	604b      	str	r3, [r1, #4]
 8009228:	4638      	mov	r0, r7
 800922a:	f104 060b 	add.w	r6, r4, #11
 800922e:	f000 f829 	bl	8009284 <__malloc_unlock>
 8009232:	f026 0607 	bic.w	r6, r6, #7
 8009236:	1d23      	adds	r3, r4, #4
 8009238:	1af2      	subs	r2, r6, r3
 800923a:	d0ae      	beq.n	800919a <_malloc_r+0x22>
 800923c:	1b9b      	subs	r3, r3, r6
 800923e:	50a3      	str	r3, [r4, r2]
 8009240:	e7ab      	b.n	800919a <_malloc_r+0x22>
 8009242:	42a3      	cmp	r3, r4
 8009244:	6862      	ldr	r2, [r4, #4]
 8009246:	d1dd      	bne.n	8009204 <_malloc_r+0x8c>
 8009248:	f8c8 2000 	str.w	r2, [r8]
 800924c:	e7ec      	b.n	8009228 <_malloc_r+0xb0>
 800924e:	4623      	mov	r3, r4
 8009250:	6864      	ldr	r4, [r4, #4]
 8009252:	e7ac      	b.n	80091ae <_malloc_r+0x36>
 8009254:	4634      	mov	r4, r6
 8009256:	6876      	ldr	r6, [r6, #4]
 8009258:	e7b4      	b.n	80091c4 <_malloc_r+0x4c>
 800925a:	4613      	mov	r3, r2
 800925c:	e7cc      	b.n	80091f8 <_malloc_r+0x80>
 800925e:	230c      	movs	r3, #12
 8009260:	603b      	str	r3, [r7, #0]
 8009262:	4638      	mov	r0, r7
 8009264:	f000 f80e 	bl	8009284 <__malloc_unlock>
 8009268:	e797      	b.n	800919a <_malloc_r+0x22>
 800926a:	6025      	str	r5, [r4, #0]
 800926c:	e7dc      	b.n	8009228 <_malloc_r+0xb0>
 800926e:	605b      	str	r3, [r3, #4]
 8009270:	deff      	udf	#255	; 0xff
 8009272:	bf00      	nop
 8009274:	20000998 	.word	0x20000998

08009278 <__malloc_lock>:
 8009278:	4801      	ldr	r0, [pc, #4]	; (8009280 <__malloc_lock+0x8>)
 800927a:	f000 b84b 	b.w	8009314 <__retarget_lock_acquire_recursive>
 800927e:	bf00      	nop
 8009280:	20000adc 	.word	0x20000adc

08009284 <__malloc_unlock>:
 8009284:	4801      	ldr	r0, [pc, #4]	; (800928c <__malloc_unlock+0x8>)
 8009286:	f000 b846 	b.w	8009316 <__retarget_lock_release_recursive>
 800928a:	bf00      	nop
 800928c:	20000adc 	.word	0x20000adc

08009290 <memset>:
 8009290:	4402      	add	r2, r0
 8009292:	4603      	mov	r3, r0
 8009294:	4293      	cmp	r3, r2
 8009296:	d100      	bne.n	800929a <memset+0xa>
 8009298:	4770      	bx	lr
 800929a:	f803 1b01 	strb.w	r1, [r3], #1
 800929e:	e7f9      	b.n	8009294 <memset+0x4>

080092a0 <_sbrk_r>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	4d06      	ldr	r5, [pc, #24]	; (80092bc <_sbrk_r+0x1c>)
 80092a4:	2300      	movs	r3, #0
 80092a6:	4604      	mov	r4, r0
 80092a8:	4608      	mov	r0, r1
 80092aa:	602b      	str	r3, [r5, #0]
 80092ac:	f7f7 fd3c 	bl	8000d28 <_sbrk>
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	d102      	bne.n	80092ba <_sbrk_r+0x1a>
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	b103      	cbz	r3, 80092ba <_sbrk_r+0x1a>
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	bd38      	pop	{r3, r4, r5, pc}
 80092bc:	20000ad8 	.word	0x20000ad8

080092c0 <__errno>:
 80092c0:	4b01      	ldr	r3, [pc, #4]	; (80092c8 <__errno+0x8>)
 80092c2:	6818      	ldr	r0, [r3, #0]
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	2000007c 	.word	0x2000007c

080092cc <__libc_init_array>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	4d0d      	ldr	r5, [pc, #52]	; (8009304 <__libc_init_array+0x38>)
 80092d0:	4c0d      	ldr	r4, [pc, #52]	; (8009308 <__libc_init_array+0x3c>)
 80092d2:	1b64      	subs	r4, r4, r5
 80092d4:	10a4      	asrs	r4, r4, #2
 80092d6:	2600      	movs	r6, #0
 80092d8:	42a6      	cmp	r6, r4
 80092da:	d109      	bne.n	80092f0 <__libc_init_array+0x24>
 80092dc:	4d0b      	ldr	r5, [pc, #44]	; (800930c <__libc_init_array+0x40>)
 80092de:	4c0c      	ldr	r4, [pc, #48]	; (8009310 <__libc_init_array+0x44>)
 80092e0:	f000 f866 	bl	80093b0 <_init>
 80092e4:	1b64      	subs	r4, r4, r5
 80092e6:	10a4      	asrs	r4, r4, #2
 80092e8:	2600      	movs	r6, #0
 80092ea:	42a6      	cmp	r6, r4
 80092ec:	d105      	bne.n	80092fa <__libc_init_array+0x2e>
 80092ee:	bd70      	pop	{r4, r5, r6, pc}
 80092f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f4:	4798      	blx	r3
 80092f6:	3601      	adds	r6, #1
 80092f8:	e7ee      	b.n	80092d8 <__libc_init_array+0xc>
 80092fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80092fe:	4798      	blx	r3
 8009300:	3601      	adds	r6, #1
 8009302:	e7f2      	b.n	80092ea <__libc_init_array+0x1e>
 8009304:	080093fc 	.word	0x080093fc
 8009308:	080093fc 	.word	0x080093fc
 800930c:	080093fc 	.word	0x080093fc
 8009310:	08009400 	.word	0x08009400

08009314 <__retarget_lock_acquire_recursive>:
 8009314:	4770      	bx	lr

08009316 <__retarget_lock_release_recursive>:
 8009316:	4770      	bx	lr

08009318 <_free_r>:
 8009318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800931a:	2900      	cmp	r1, #0
 800931c:	d044      	beq.n	80093a8 <_free_r+0x90>
 800931e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009322:	9001      	str	r0, [sp, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	f1a1 0404 	sub.w	r4, r1, #4
 800932a:	bfb8      	it	lt
 800932c:	18e4      	addlt	r4, r4, r3
 800932e:	f7ff ffa3 	bl	8009278 <__malloc_lock>
 8009332:	4a1e      	ldr	r2, [pc, #120]	; (80093ac <_free_r+0x94>)
 8009334:	9801      	ldr	r0, [sp, #4]
 8009336:	6813      	ldr	r3, [r2, #0]
 8009338:	b933      	cbnz	r3, 8009348 <_free_r+0x30>
 800933a:	6063      	str	r3, [r4, #4]
 800933c:	6014      	str	r4, [r2, #0]
 800933e:	b003      	add	sp, #12
 8009340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009344:	f7ff bf9e 	b.w	8009284 <__malloc_unlock>
 8009348:	42a3      	cmp	r3, r4
 800934a:	d908      	bls.n	800935e <_free_r+0x46>
 800934c:	6825      	ldr	r5, [r4, #0]
 800934e:	1961      	adds	r1, r4, r5
 8009350:	428b      	cmp	r3, r1
 8009352:	bf01      	itttt	eq
 8009354:	6819      	ldreq	r1, [r3, #0]
 8009356:	685b      	ldreq	r3, [r3, #4]
 8009358:	1949      	addeq	r1, r1, r5
 800935a:	6021      	streq	r1, [r4, #0]
 800935c:	e7ed      	b.n	800933a <_free_r+0x22>
 800935e:	461a      	mov	r2, r3
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	b10b      	cbz	r3, 8009368 <_free_r+0x50>
 8009364:	42a3      	cmp	r3, r4
 8009366:	d9fa      	bls.n	800935e <_free_r+0x46>
 8009368:	6811      	ldr	r1, [r2, #0]
 800936a:	1855      	adds	r5, r2, r1
 800936c:	42a5      	cmp	r5, r4
 800936e:	d10b      	bne.n	8009388 <_free_r+0x70>
 8009370:	6824      	ldr	r4, [r4, #0]
 8009372:	4421      	add	r1, r4
 8009374:	1854      	adds	r4, r2, r1
 8009376:	42a3      	cmp	r3, r4
 8009378:	6011      	str	r1, [r2, #0]
 800937a:	d1e0      	bne.n	800933e <_free_r+0x26>
 800937c:	681c      	ldr	r4, [r3, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	6053      	str	r3, [r2, #4]
 8009382:	440c      	add	r4, r1
 8009384:	6014      	str	r4, [r2, #0]
 8009386:	e7da      	b.n	800933e <_free_r+0x26>
 8009388:	d902      	bls.n	8009390 <_free_r+0x78>
 800938a:	230c      	movs	r3, #12
 800938c:	6003      	str	r3, [r0, #0]
 800938e:	e7d6      	b.n	800933e <_free_r+0x26>
 8009390:	6825      	ldr	r5, [r4, #0]
 8009392:	1961      	adds	r1, r4, r5
 8009394:	428b      	cmp	r3, r1
 8009396:	bf04      	itt	eq
 8009398:	6819      	ldreq	r1, [r3, #0]
 800939a:	685b      	ldreq	r3, [r3, #4]
 800939c:	6063      	str	r3, [r4, #4]
 800939e:	bf04      	itt	eq
 80093a0:	1949      	addeq	r1, r1, r5
 80093a2:	6021      	streq	r1, [r4, #0]
 80093a4:	6054      	str	r4, [r2, #4]
 80093a6:	e7ca      	b.n	800933e <_free_r+0x26>
 80093a8:	b003      	add	sp, #12
 80093aa:	bd30      	pop	{r4, r5, pc}
 80093ac:	20000998 	.word	0x20000998

080093b0 <_init>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	bf00      	nop
 80093b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b6:	bc08      	pop	{r3}
 80093b8:	469e      	mov	lr, r3
 80093ba:	4770      	bx	lr

080093bc <_fini>:
 80093bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093be:	bf00      	nop
 80093c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093c2:	bc08      	pop	{r3}
 80093c4:	469e      	mov	lr, r3
 80093c6:	4770      	bx	lr
