
Clocks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08006ee8  08006ee8  00016ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eec  08006eec  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006eec  08006eec  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006eec  08006eec  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef0  08006ef0  00016ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000958  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009d4  200009d4  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d908  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ae5  00000000  00000000  0002d9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a58  00000000  00000000  000304e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000793  00000000  00000000  00030f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022914  00000000  00000000  000316cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ee94  00000000  00000000  00053fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5508  00000000  00000000  00062e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002bc4  00000000  00000000  0012837c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  0012af40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ed0 	.word	0x08006ed0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08006ed0 	.word	0x08006ed0

080001c8 <main>:
RCC_OscInitTypeDef clk_osc;
RCC_ClkInitTypeDef clk_cfg;
char msg[100];

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  HAL_Init();
 80001cc:	f000 f928 	bl	8000420 <HAL_Init>

  SystemClock_Config();
 80001d0:	f000 f87c 	bl	80002cc <SystemClock_Config>

  MX_USB_HOST_Init();
 80001d4:	f006 fa26 	bl	8006624 <MX_USB_HOST_Init>

  HAL_RCC_Init();
 80001d8:	f000 f816 	bl	8000208 <HAL_RCC_Init>

  HAL_RCC_config(SYSCLK_FREQ_50);
 80001dc:	2032      	movs	r0, #50	; 0x32
 80001de:	f000 f82f 	bl	8000240 <HAL_RCC_config>

#endif

  //Initialization of SYSTICK Timer using HSE because the HCLK clock value has been changed from 8MHz to 1MHz

  HAL_SYSTICK_Config(TIME_DELAY_1MS);	//Adding a delay of 1 second in the SYSTICK Timer
 80001e2:	f003 f815 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4a06      	ldr	r2, [pc, #24]	; (8000204 <main+0x3c>)
 80001ea:	fba2 2303 	umull	r2, r3, r2, r3
 80001ee:	099b      	lsrs	r3, r3, #6
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 fa9c 	bl	800072e <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);	//Clock source for the SYSTICK Timer
 80001f6:	2004      	movs	r0, #4
 80001f8:	f000 faa6 	bl	8000748 <HAL_SYSTICK_CLKSourceConfig>



  while (1)
  {
    MX_USB_HOST_Process();
 80001fc:	f006 fa38 	bl	8006670 <MX_USB_HOST_Process>
 8000200:	e7fc      	b.n	80001fc <main+0x34>
 8000202:	bf00      	nop
 8000204:	10624dd3 	.word	0x10624dd3

08000208 <HAL_RCC_Init>:
  }
}

void HAL_RCC_Init()
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	memset(&clk_osc, 0, sizeof(clk_osc));	//Resetting the values
 800020c:	2230      	movs	r2, #48	; 0x30
 800020e:	2100      	movs	r1, #0
 8000210:	480a      	ldr	r0, [pc, #40]	; (800023c <HAL_RCC_Init+0x34>)
 8000212:	f006 fdcd 	bl	8006db0 <memset>
#elif HSI_CLK

#elif HSE_TO_GEN_PLL

#elif HSI_TO_GEN_PLL
	clk_osc.HSIState = RCC_HSI_ON;
 8000216:	4b09      	ldr	r3, [pc, #36]	; (800023c <HAL_RCC_Init+0x34>)
 8000218:	2201      	movs	r2, #1
 800021a:	60da      	str	r2, [r3, #12]
	clk_osc.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <HAL_RCC_Init+0x34>)
 800021e:	2202      	movs	r2, #2
 8000220:	601a      	str	r2, [r3, #0]
	clk_osc.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000222:	4b06      	ldr	r3, [pc, #24]	; (800023c <HAL_RCC_Init+0x34>)
 8000224:	2210      	movs	r2, #16
 8000226:	611a      	str	r2, [r3, #16]

#endif

	if(HAL_RCC_OscConfig(&clk_osc) != HAL_OK)
 8000228:	4804      	ldr	r0, [pc, #16]	; (800023c <HAL_RCC_Init+0x34>)
 800022a:	f002 fd79 	bl	8002d20 <HAL_RCC_OscConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <HAL_RCC_Init+0x30>
	{
		Error_Handler();
 8000234:	f000 f851 	bl	80002da <Error_Handler>
	}

}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000098 	.word	0x20000098

08000240 <HAL_RCC_config>:

void HAL_RCC_config(uint32_t clk_freq)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
		}

#elif HSE_TO_GEN_PLL

#elif HSI_TO_GEN_PLL
	clk_osc.PLL.PLLState = RCC_PLL_ON;
 8000248:	4b1f      	ldr	r3, [pc, #124]	; (80002c8 <HAL_RCC_config+0x88>)
 800024a:	2202      	movs	r2, #2
 800024c:	619a      	str	r2, [r3, #24]
	clk_osc.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800024e:	4b1e      	ldr	r3, [pc, #120]	; (80002c8 <HAL_RCC_config+0x88>)
 8000250:	2200      	movs	r2, #0
 8000252:	61da      	str	r2, [r3, #28]
	clk_osc.PLL.PLLM = PLLM_VAL;
 8000254:	4b1c      	ldr	r3, [pc, #112]	; (80002c8 <HAL_RCC_config+0x88>)
 8000256:	2210      	movs	r2, #16
 8000258:	621a      	str	r2, [r3, #32]

	switch(clk_freq)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2b78      	cmp	r3, #120	; 0x78
 800025e:	d01d      	beq.n	800029c <HAL_RCC_config+0x5c>
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2b78      	cmp	r3, #120	; 0x78
 8000264:	d824      	bhi.n	80002b0 <HAL_RCC_config+0x70>
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2b32      	cmp	r3, #50	; 0x32
 800026a:	d003      	beq.n	8000274 <HAL_RCC_config+0x34>
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b64      	cmp	r3, #100	; 0x64
 8000270:	d00a      	beq.n	8000288 <HAL_RCC_config+0x48>
 8000272:	e01d      	b.n	80002b0 <HAL_RCC_config+0x70>
	{
	case SYSCLK_FREQ_50:
		clk_osc.PLL.PLLN = 100;
 8000274:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <HAL_RCC_config+0x88>)
 8000276:	2264      	movs	r2, #100	; 0x64
 8000278:	625a      	str	r2, [r3, #36]	; 0x24
		clk_osc.PLL.PLLP = RCC_PLLP_DIV2;
 800027a:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <HAL_RCC_config+0x88>)
 800027c:	2202      	movs	r2, #2
 800027e:	629a      	str	r2, [r3, #40]	; 0x28
		clk_osc.PLL.PLLQ = 2;
 8000280:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <HAL_RCC_config+0x88>)
 8000282:	2202      	movs	r2, #2
 8000284:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 8000286:	e013      	b.n	80002b0 <HAL_RCC_config+0x70>
	case SYSCLK_FREQ_80:
		clk_osc.PLL.PLLN = 160;
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <HAL_RCC_config+0x88>)
 800028a:	22a0      	movs	r2, #160	; 0xa0
 800028c:	625a      	str	r2, [r3, #36]	; 0x24
		clk_osc.PLL.PLLP = RCC_PLLP_DIV2;
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <HAL_RCC_config+0x88>)
 8000290:	2202      	movs	r2, #2
 8000292:	629a      	str	r2, [r3, #40]	; 0x28
		clk_osc.PLL.PLLQ = 2;
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <HAL_RCC_config+0x88>)
 8000296:	2202      	movs	r2, #2
 8000298:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 800029a:	e009      	b.n	80002b0 <HAL_RCC_config+0x70>
	case SYSCLK_FREQ_120:
		clk_osc.PLL.PLLN = 240;
 800029c:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <HAL_RCC_config+0x88>)
 800029e:	22f0      	movs	r2, #240	; 0xf0
 80002a0:	625a      	str	r2, [r3, #36]	; 0x24
		clk_osc.PLL.PLLP = RCC_PLLP_DIV2;
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <HAL_RCC_config+0x88>)
 80002a4:	2202      	movs	r2, #2
 80002a6:	629a      	str	r2, [r3, #40]	; 0x28
		clk_osc.PLL.PLLQ = 2;
 80002a8:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <HAL_RCC_config+0x88>)
 80002aa:	2202      	movs	r2, #2
 80002ac:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 80002ae:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&clk_osc) != HAL_OK)
 80002b0:	4805      	ldr	r0, [pc, #20]	; (80002c8 <HAL_RCC_config+0x88>)
 80002b2:	f002 fd35 	bl	8002d20 <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <HAL_RCC_config+0x80>
	{
		Error_Handler();
 80002bc:	f000 f80d 	bl	80002da <Error_Handler>
	}

#endif


}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000098 	.word	0x20000098

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0

}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002da:	b480      	push	{r7}
 80002dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002de:	b672      	cpsid	i
}
 80002e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <Error_Handler+0x8>

080002e4 <HAL_MspInit>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"


void HAL_MspInit(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	//1) Set priority grouping
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002e8:	2003      	movs	r0, #3
 80002ea:	f000 f9eb 	bl	80006c4 <HAL_NVIC_SetPriorityGrouping>

	//2) Enable Exceptions
	SCB->SHCSR |= (7 << 16);
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <HAL_MspInit+0x40>)
 80002f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002f2:	4a0c      	ldr	r2, [pc, #48]	; (8000324 <HAL_MspInit+0x40>)
 80002f4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80002f8:	6253      	str	r3, [r2, #36]	; 0x24

	//3) set priority of the exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2100      	movs	r1, #0
 80002fe:	f06f 000b 	mvn.w	r0, #11
 8000302:	f000 f9ea 	bl	80006da <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000306:	2200      	movs	r2, #0
 8000308:	2100      	movs	r1, #0
 800030a:	f06f 0009 	mvn.w	r0, #9
 800030e:	f000 f9e4 	bl	80006da <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	2100      	movs	r1, #0
 8000316:	f06f 000a 	mvn.w	r0, #10
 800031a:	f000 f9de 	bl	80006da <HAL_NVIC_SetPriority>
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800032c:	4802      	ldr	r0, [pc, #8]	; (8000338 <OTG_FS_IRQHandler+0x10>)
 800032e:	f000 febd 	bl	80010ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	200004ac 	.word	0x200004ac

0800033c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000344:	4a14      	ldr	r2, [pc, #80]	; (8000398 <_sbrk+0x5c>)
 8000346:	4b15      	ldr	r3, [pc, #84]	; (800039c <_sbrk+0x60>)
 8000348:	1ad3      	subs	r3, r2, r3
 800034a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <_sbrk+0x64>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d102      	bne.n	800035e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <_sbrk+0x64>)
 800035a:	4a12      	ldr	r2, [pc, #72]	; (80003a4 <_sbrk+0x68>)
 800035c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <_sbrk+0x64>)
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4413      	add	r3, r2
 8000366:	693a      	ldr	r2, [r7, #16]
 8000368:	429a      	cmp	r2, r3
 800036a:	d207      	bcs.n	800037c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800036c:	f006 fd38 	bl	8006de0 <__errno>
 8000370:	4603      	mov	r3, r0
 8000372:	220c      	movs	r2, #12
 8000374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000376:	f04f 33ff 	mov.w	r3, #4294967295
 800037a:	e009      	b.n	8000390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800037c:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <_sbrk+0x64>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000382:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <_sbrk+0x64>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4413      	add	r3, r2
 800038a:	4a05      	ldr	r2, [pc, #20]	; (80003a0 <_sbrk+0x64>)
 800038c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3718      	adds	r7, #24
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20020000 	.word	0x20020000
 800039c:	00000400 	.word	0x00000400
 80003a0:	200000c8 	.word	0x200000c8
 80003a4:	200009d8 	.word	0x200009d8

080003a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <SystemInit+0x20>)
 80003ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003b2:	4a05      	ldr	r2, [pc, #20]	; (80003c8 <SystemInit+0x20>)
 80003b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	e000ed00 	.word	0xe000ed00

080003cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80003cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000404 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003d0:	f7ff ffea 	bl	80003a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003d4:	480c      	ldr	r0, [pc, #48]	; (8000408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003d6:	490d      	ldr	r1, [pc, #52]	; (800040c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003d8:	4a0d      	ldr	r2, [pc, #52]	; (8000410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003dc:	e002      	b.n	80003e4 <LoopCopyDataInit>

080003de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e2:	3304      	adds	r3, #4

080003e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e8:	d3f9      	bcc.n	80003de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ea:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003ec:	4c0a      	ldr	r4, [pc, #40]	; (8000418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f0:	e001      	b.n	80003f6 <LoopFillZerobss>

080003f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f4:	3204      	adds	r2, #4

080003f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f8:	d3fb      	bcc.n	80003f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003fa:	f006 fcf7 	bl	8006dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003fe:	f7ff fee3 	bl	80001c8 <main>
  bx  lr    
 8000402:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800040c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000410:	08006ef4 	.word	0x08006ef4
  ldr r2, =_sbss
 8000414:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000418:	200009d4 	.word	0x200009d4

0800041c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800041c:	e7fe      	b.n	800041c <ADC_IRQHandler>
	...

08000420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <HAL_Init+0x40>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a0d      	ldr	r2, [pc, #52]	; (8000460 <HAL_Init+0x40>)
 800042a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800042e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000430:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <HAL_Init+0x40>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a0a      	ldr	r2, [pc, #40]	; (8000460 <HAL_Init+0x40>)
 8000436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800043a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <HAL_Init+0x40>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a07      	ldr	r2, [pc, #28]	; (8000460 <HAL_Init+0x40>)
 8000442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000448:	2003      	movs	r0, #3
 800044a:	f000 f93b 	bl	80006c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800044e:	2000      	movs	r0, #0
 8000450:	f000 f808 	bl	8000464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000454:	f7ff ff46 	bl	80002e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000458:	2300      	movs	r3, #0
}
 800045a:	4618      	mov	r0, r3
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40023c00 	.word	0x40023c00

08000464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <HAL_InitTick+0x54>)
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <HAL_InitTick+0x58>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	4619      	mov	r1, r3
 8000476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800047a:	fbb3 f3f1 	udiv	r3, r3, r1
 800047e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000482:	4618      	mov	r0, r3
 8000484:	f000 f953 	bl	800072e <HAL_SYSTICK_Config>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800048e:	2301      	movs	r3, #1
 8000490:	e00e      	b.n	80004b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b0f      	cmp	r3, #15
 8000496:	d80a      	bhi.n	80004ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000498:	2200      	movs	r2, #0
 800049a:	6879      	ldr	r1, [r7, #4]
 800049c:	f04f 30ff 	mov.w	r0, #4294967295
 80004a0:	f000 f91b 	bl	80006da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004a4:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <HAL_InitTick+0x5c>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004aa:	2300      	movs	r3, #0
 80004ac:	e000      	b.n	80004b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004ae:	2301      	movs	r3, #1
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000000 	.word	0x20000000
 80004bc:	20000008 	.word	0x20000008
 80004c0:	20000004 	.word	0x20000004

080004c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  return uwTick;
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <HAL_GetTick+0x14>)
 80004ca:	681b      	ldr	r3, [r3, #0]
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	200000cc 	.word	0x200000cc

080004dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004e4:	f7ff ffee 	bl	80004c4 <HAL_GetTick>
 80004e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004f4:	d005      	beq.n	8000502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <HAL_Delay+0x44>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	461a      	mov	r2, r3
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	4413      	add	r3, r2
 8000500:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000502:	bf00      	nop
 8000504:	f7ff ffde 	bl	80004c4 <HAL_GetTick>
 8000508:	4602      	mov	r2, r0
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	429a      	cmp	r2, r3
 8000512:	d8f7      	bhi.n	8000504 <HAL_Delay+0x28>
  {
  }
}
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000008 	.word	0x20000008

08000524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f003 0307 	and.w	r3, r3, #7
 8000532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <__NVIC_SetPriorityGrouping+0x44>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000540:	4013      	ands	r3, r2
 8000542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800054c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000556:	4a04      	ldr	r2, [pc, #16]	; (8000568 <__NVIC_SetPriorityGrouping+0x44>)
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	60d3      	str	r3, [r2, #12]
}
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <__NVIC_GetPriorityGrouping+0x18>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	0a1b      	lsrs	r3, r3, #8
 8000576:	f003 0307 	and.w	r3, r3, #7
}
 800057a:	4618      	mov	r0, r3
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000596:	2b00      	cmp	r3, #0
 8000598:	db0b      	blt.n	80005b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	f003 021f 	and.w	r2, r3, #31
 80005a0:	4907      	ldr	r1, [pc, #28]	; (80005c0 <__NVIC_EnableIRQ+0x38>)
 80005a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a6:	095b      	lsrs	r3, r3, #5
 80005a8:	2001      	movs	r0, #1
 80005aa:	fa00 f202 	lsl.w	r2, r0, r2
 80005ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e000e100 	.word	0xe000e100

080005c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	db0a      	blt.n	80005ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	490c      	ldr	r1, [pc, #48]	; (8000610 <__NVIC_SetPriority+0x4c>)
 80005de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e2:	0112      	lsls	r2, r2, #4
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	440b      	add	r3, r1
 80005e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005ec:	e00a      	b.n	8000604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4908      	ldr	r1, [pc, #32]	; (8000614 <__NVIC_SetPriority+0x50>)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	f003 030f 	and.w	r3, r3, #15
 80005fa:	3b04      	subs	r3, #4
 80005fc:	0112      	lsls	r2, r2, #4
 80005fe:	b2d2      	uxtb	r2, r2
 8000600:	440b      	add	r3, r1
 8000602:	761a      	strb	r2, [r3, #24]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000e100 	.word	0xe000e100
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000618:	b480      	push	{r7}
 800061a:	b089      	sub	sp, #36	; 0x24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	f1c3 0307 	rsb	r3, r3, #7
 8000632:	2b04      	cmp	r3, #4
 8000634:	bf28      	it	cs
 8000636:	2304      	movcs	r3, #4
 8000638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	3304      	adds	r3, #4
 800063e:	2b06      	cmp	r3, #6
 8000640:	d902      	bls.n	8000648 <NVIC_EncodePriority+0x30>
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	3b03      	subs	r3, #3
 8000646:	e000      	b.n	800064a <NVIC_EncodePriority+0x32>
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	f04f 32ff 	mov.w	r2, #4294967295
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	fa02 f303 	lsl.w	r3, r2, r3
 8000656:	43da      	mvns	r2, r3
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	401a      	ands	r2, r3
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000660:	f04f 31ff 	mov.w	r1, #4294967295
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	43d9      	mvns	r1, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000670:	4313      	orrs	r3, r2
         );
}
 8000672:	4618      	mov	r0, r3
 8000674:	3724      	adds	r7, #36	; 0x24
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
	...

08000680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3b01      	subs	r3, #1
 800068c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000690:	d301      	bcc.n	8000696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000692:	2301      	movs	r3, #1
 8000694:	e00f      	b.n	80006b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <SysTick_Config+0x40>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3b01      	subs	r3, #1
 800069c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800069e:	210f      	movs	r1, #15
 80006a0:	f04f 30ff 	mov.w	r0, #4294967295
 80006a4:	f7ff ff8e 	bl	80005c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <SysTick_Config+0x40>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ae:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <SysTick_Config+0x40>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	e000e010 	.word	0xe000e010

080006c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ff29 	bl	8000524 <__NVIC_SetPriorityGrouping>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006da:	b580      	push	{r7, lr}
 80006dc:	b086      	sub	sp, #24
 80006de:	af00      	add	r7, sp, #0
 80006e0:	4603      	mov	r3, r0
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	607a      	str	r2, [r7, #4]
 80006e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006ec:	f7ff ff3e 	bl	800056c <__NVIC_GetPriorityGrouping>
 80006f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	68b9      	ldr	r1, [r7, #8]
 80006f6:	6978      	ldr	r0, [r7, #20]
 80006f8:	f7ff ff8e 	bl	8000618 <NVIC_EncodePriority>
 80006fc:	4602      	mov	r2, r0
 80006fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000702:	4611      	mov	r1, r2
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff5d 	bl	80005c4 <__NVIC_SetPriority>
}
 800070a:	bf00      	nop
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	4603      	mov	r3, r0
 800071a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800071c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff31 	bl	8000588 <__NVIC_EnableIRQ>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f7ff ffa2 	bl	8000680 <SysTick_Config>
 800073c:	4603      	mov	r3, r0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b04      	cmp	r3, #4
 8000754:	d106      	bne.n	8000764 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000762:	e005      	b.n	8000770 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800076a:	f023 0304 	bic.w	r3, r3, #4
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000e010 	.word	0xe000e010

08000780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000780:	b480      	push	{r7}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
 800079a:	e16b      	b.n	8000a74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800079c:	2201      	movs	r2, #1
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	697a      	ldr	r2, [r7, #20]
 80007ac:	4013      	ands	r3, r2
 80007ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007b0:	693a      	ldr	r2, [r7, #16]
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	f040 815a 	bne.w	8000a6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	f003 0303 	and.w	r3, r3, #3
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d005      	beq.n	80007d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d130      	bne.n	8000834 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	2203      	movs	r2, #3
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43db      	mvns	r3, r3
 80007e4:	69ba      	ldr	r2, [r7, #24]
 80007e6:	4013      	ands	r3, r2
 80007e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	68da      	ldr	r2, [r3, #12]
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	69ba      	ldr	r2, [r7, #24]
 8000800:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000808:	2201      	movs	r2, #1
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	43db      	mvns	r3, r3
 8000812:	69ba      	ldr	r2, [r7, #24]
 8000814:	4013      	ands	r3, r2
 8000816:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	091b      	lsrs	r3, r3, #4
 800081e:	f003 0201 	and.w	r2, r3, #1
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	69ba      	ldr	r2, [r7, #24]
 800082a:	4313      	orrs	r3, r2
 800082c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	69ba      	ldr	r2, [r7, #24]
 8000832:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f003 0303 	and.w	r3, r3, #3
 800083c:	2b03      	cmp	r3, #3
 800083e:	d017      	beq.n	8000870 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	2203      	movs	r2, #3
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	4013      	ands	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	689a      	ldr	r2, [r3, #8]
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	4313      	orrs	r3, r2
 8000868:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	69ba      	ldr	r2, [r7, #24]
 800086e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f003 0303 	and.w	r3, r3, #3
 8000878:	2b02      	cmp	r3, #2
 800087a:	d123      	bne.n	80008c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	08da      	lsrs	r2, r3, #3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3208      	adds	r2, #8
 8000884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000888:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	f003 0307 	and.w	r3, r3, #7
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	220f      	movs	r2, #15
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	43db      	mvns	r3, r3
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	4013      	ands	r3, r2
 800089e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	691a      	ldr	r2, [r3, #16]
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	08da      	lsrs	r2, r3, #3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3208      	adds	r2, #8
 80008be:	69b9      	ldr	r1, [r7, #24]
 80008c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	2203      	movs	r2, #3
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4013      	ands	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f003 0203 	and.w	r2, r3, #3
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000900:	2b00      	cmp	r3, #0
 8000902:	f000 80b4 	beq.w	8000a6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b60      	ldr	r3, [pc, #384]	; (8000a8c <HAL_GPIO_Init+0x30c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a5f      	ldr	r2, [pc, #380]	; (8000a8c <HAL_GPIO_Init+0x30c>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b5d      	ldr	r3, [pc, #372]	; (8000a8c <HAL_GPIO_Init+0x30c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000922:	4a5b      	ldr	r2, [pc, #364]	; (8000a90 <HAL_GPIO_Init+0x310>)
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	089b      	lsrs	r3, r3, #2
 8000928:	3302      	adds	r3, #2
 800092a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f003 0303 	and.w	r3, r3, #3
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	220f      	movs	r2, #15
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	69ba      	ldr	r2, [r7, #24]
 8000942:	4013      	ands	r3, r2
 8000944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a52      	ldr	r2, [pc, #328]	; (8000a94 <HAL_GPIO_Init+0x314>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d02b      	beq.n	80009a6 <HAL_GPIO_Init+0x226>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a51      	ldr	r2, [pc, #324]	; (8000a98 <HAL_GPIO_Init+0x318>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d025      	beq.n	80009a2 <HAL_GPIO_Init+0x222>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a50      	ldr	r2, [pc, #320]	; (8000a9c <HAL_GPIO_Init+0x31c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d01f      	beq.n	800099e <HAL_GPIO_Init+0x21e>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a4f      	ldr	r2, [pc, #316]	; (8000aa0 <HAL_GPIO_Init+0x320>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d019      	beq.n	800099a <HAL_GPIO_Init+0x21a>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a4e      	ldr	r2, [pc, #312]	; (8000aa4 <HAL_GPIO_Init+0x324>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d013      	beq.n	8000996 <HAL_GPIO_Init+0x216>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a4d      	ldr	r2, [pc, #308]	; (8000aa8 <HAL_GPIO_Init+0x328>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d00d      	beq.n	8000992 <HAL_GPIO_Init+0x212>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a4c      	ldr	r2, [pc, #304]	; (8000aac <HAL_GPIO_Init+0x32c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d007      	beq.n	800098e <HAL_GPIO_Init+0x20e>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a4b      	ldr	r2, [pc, #300]	; (8000ab0 <HAL_GPIO_Init+0x330>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d101      	bne.n	800098a <HAL_GPIO_Init+0x20a>
 8000986:	2307      	movs	r3, #7
 8000988:	e00e      	b.n	80009a8 <HAL_GPIO_Init+0x228>
 800098a:	2308      	movs	r3, #8
 800098c:	e00c      	b.n	80009a8 <HAL_GPIO_Init+0x228>
 800098e:	2306      	movs	r3, #6
 8000990:	e00a      	b.n	80009a8 <HAL_GPIO_Init+0x228>
 8000992:	2305      	movs	r3, #5
 8000994:	e008      	b.n	80009a8 <HAL_GPIO_Init+0x228>
 8000996:	2304      	movs	r3, #4
 8000998:	e006      	b.n	80009a8 <HAL_GPIO_Init+0x228>
 800099a:	2303      	movs	r3, #3
 800099c:	e004      	b.n	80009a8 <HAL_GPIO_Init+0x228>
 800099e:	2302      	movs	r3, #2
 80009a0:	e002      	b.n	80009a8 <HAL_GPIO_Init+0x228>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <HAL_GPIO_Init+0x228>
 80009a6:	2300      	movs	r3, #0
 80009a8:	69fa      	ldr	r2, [r7, #28]
 80009aa:	f002 0203 	and.w	r2, r2, #3
 80009ae:	0092      	lsls	r2, r2, #2
 80009b0:	4093      	lsls	r3, r2
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009b8:	4935      	ldr	r1, [pc, #212]	; (8000a90 <HAL_GPIO_Init+0x310>)
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	089b      	lsrs	r3, r3, #2
 80009be:	3302      	adds	r3, #2
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009c6:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <HAL_GPIO_Init+0x334>)
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	43db      	mvns	r3, r3
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	4013      	ands	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80009e2:	69ba      	ldr	r2, [r7, #24]
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80009ea:	4a32      	ldr	r2, [pc, #200]	; (8000ab4 <HAL_GPIO_Init+0x334>)
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009f0:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <HAL_GPIO_Init+0x334>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	4013      	ands	r3, r2
 80009fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d003      	beq.n	8000a14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a14:	4a27      	ldr	r2, [pc, #156]	; (8000ab4 <HAL_GPIO_Init+0x334>)
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a1a:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <HAL_GPIO_Init+0x334>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	43db      	mvns	r3, r3
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	4013      	ands	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d003      	beq.n	8000a3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a3e:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <HAL_GPIO_Init+0x334>)
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_GPIO_Init+0x334>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	4013      	ands	r3, r2
 8000a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a68:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <HAL_GPIO_Init+0x334>)
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3301      	adds	r3, #1
 8000a72:	61fb      	str	r3, [r7, #28]
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	2b0f      	cmp	r3, #15
 8000a78:	f67f ae90 	bls.w	800079c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	3724      	adds	r7, #36	; 0x24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40013800 	.word	0x40013800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40021400 	.word	0x40021400
 8000aac:	40021800 	.word	0x40021800
 8000ab0:	40021c00 	.word	0x40021c00
 8000ab4:	40013c00 	.word	0x40013c00

08000ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	807b      	strh	r3, [r7, #2]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ac8:	787b      	ldrb	r3, [r7, #1]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ace:	887a      	ldrh	r2, [r7, #2]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ad4:	e003      	b.n	8000ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ad6:	887b      	ldrh	r3, [r7, #2]
 8000ad8:	041a      	lsls	r2, r3, #16
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	619a      	str	r2, [r3, #24]
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af02      	add	r7, sp, #8
 8000af0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d101      	bne.n	8000afc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e059      	b.n	8000bb0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d106      	bne.n	8000b1c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f005 fde2 	bl	80066e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2203      	movs	r2, #3
 8000b20:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b2a:	d102      	bne.n	8000b32 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 fbeb 	bl	8003312 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7c1a      	ldrb	r2, [r3, #16]
 8000b44:	f88d 2000 	strb.w	r2, [sp]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b4c:	f002 fb6c 	bl	8003228 <USB_CoreInit>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d005      	beq.n	8000b62 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2202      	movs	r2, #2
 8000b5a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e026      	b.n	8000bb0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2101      	movs	r1, #1
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fbe3 	bl	8003334 <USB_SetCurrentMode>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d005      	beq.n	8000b80 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2202      	movs	r2, #2
 8000b78:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e017      	b.n	8000bb0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7c1a      	ldrb	r2, [r3, #16]
 8000b88:	f88d 2000 	strb.w	r2, [sp]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b90:	f002 fd86 	bl	80036a0 <USB_HostInit>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d005      	beq.n	8000ba6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e004      	b.n	8000bb0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b08b      	sub	sp, #44	; 0x2c
 8000bbc:	af04      	add	r7, sp, #16
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	4608      	mov	r0, r1
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	70fb      	strb	r3, [r7, #3]
 8000bca:	460b      	mov	r3, r1
 8000bcc:	70bb      	strb	r3, [r7, #2]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8000bd2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000bd4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d101      	bne.n	8000be4 <HAL_HCD_HC_Init+0x2c>
 8000be0:	2302      	movs	r3, #2
 8000be2:	e09d      	b.n	8000d20 <HAL_HCD_HC_Init+0x168>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2201      	movs	r2, #1
 8000be8:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8000bec:	78fa      	ldrb	r2, [r7, #3]
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	011b      	lsls	r3, r3, #4
 8000bf4:	1a9b      	subs	r3, r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	3319      	adds	r3, #25
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000c00:	78fa      	ldrb	r2, [r7, #3]
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	4613      	mov	r3, r2
 8000c06:	011b      	lsls	r3, r3, #4
 8000c08:	1a9b      	subs	r3, r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	3314      	adds	r3, #20
 8000c10:	787a      	ldrb	r2, [r7, #1]
 8000c12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000c14:	78fa      	ldrb	r2, [r7, #3]
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	011b      	lsls	r3, r3, #4
 8000c1c:	1a9b      	subs	r3, r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	440b      	add	r3, r1
 8000c22:	3315      	adds	r3, #21
 8000c24:	78fa      	ldrb	r2, [r7, #3]
 8000c26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000c28:	78fa      	ldrb	r2, [r7, #3]
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	011b      	lsls	r3, r3, #4
 8000c30:	1a9b      	subs	r3, r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	440b      	add	r3, r1
 8000c36:	3326      	adds	r3, #38	; 0x26
 8000c38:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000c3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000c3e:	78fa      	ldrb	r2, [r7, #3]
 8000c40:	78bb      	ldrb	r3, [r7, #2]
 8000c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c46:	b2d8      	uxtb	r0, r3
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	3316      	adds	r3, #22
 8000c56:	4602      	mov	r2, r0
 8000c58:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8000c5a:	78fb      	ldrb	r3, [r7, #3]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 fbc8 	bl	80013f4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8000c64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	da0a      	bge.n	8000c82 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000c6c:	78fa      	ldrb	r2, [r7, #3]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	1a9b      	subs	r3, r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	440b      	add	r3, r1
 8000c7a:	3317      	adds	r3, #23
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	e009      	b.n	8000c96 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000c82:	78fa      	ldrb	r2, [r7, #3]
 8000c84:	6879      	ldr	r1, [r7, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	011b      	lsls	r3, r3, #4
 8000c8a:	1a9b      	subs	r3, r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	440b      	add	r3, r1
 8000c90:	3317      	adds	r3, #23
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 fe64 	bl	8003968 <USB_GetHostSpeed>
 8000ca0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8000ca2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d10b      	bne.n	8000cc2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8000caa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d107      	bne.n	8000cc2 <HAL_HCD_HC_Init+0x10a>
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d104      	bne.n	8000cc2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	2bbc      	cmp	r3, #188	; 0xbc
 8000cbc:	d901      	bls.n	8000cc2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8000cbe:	23bc      	movs	r3, #188	; 0xbc
 8000cc0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8000cc2:	78fa      	ldrb	r2, [r7, #3]
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	440b      	add	r3, r1
 8000cd0:	3318      	adds	r3, #24
 8000cd2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000cd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8000cd8:	78fa      	ldrb	r2, [r7, #3]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	b298      	uxth	r0, r3
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	1a9b      	subs	r3, r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	3328      	adds	r3, #40	; 0x28
 8000cec:	4602      	mov	r2, r0
 8000cee:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6818      	ldr	r0, [r3, #0]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	787c      	ldrb	r4, [r7, #1]
 8000cfa:	78ba      	ldrb	r2, [r7, #2]
 8000cfc:	78f9      	ldrb	r1, [r7, #3]
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d04:	9301      	str	r3, [sp, #4]
 8000d06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	4623      	mov	r3, r4
 8000d0e:	f002 fe53 	bl	80039b8 <USB_HC_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	371c      	adds	r7, #28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd90      	pop	{r4, r7, pc}

08000d28 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d101      	bne.n	8000d46 <HAL_HCD_HC_Halt+0x1e>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e00f      	b.n	8000d66 <HAL_HCD_HC_Halt+0x3e>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	78fa      	ldrb	r2, [r7, #3]
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f003 f9e5 	bl	8004126 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	4608      	mov	r0, r1
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4603      	mov	r3, r0
 8000d80:	70fb      	strb	r3, [r7, #3]
 8000d82:	460b      	mov	r3, r1
 8000d84:	70bb      	strb	r3, [r7, #2]
 8000d86:	4613      	mov	r3, r2
 8000d88:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000d8a:	78fa      	ldrb	r2, [r7, #3]
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	1a9b      	subs	r3, r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	440b      	add	r3, r1
 8000d98:	3317      	adds	r3, #23
 8000d9a:	78ba      	ldrb	r2, [r7, #2]
 8000d9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000d9e:	78fa      	ldrb	r2, [r7, #3]
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	011b      	lsls	r3, r3, #4
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	440b      	add	r3, r1
 8000dac:	3326      	adds	r3, #38	; 0x26
 8000dae:	787a      	ldrb	r2, [r7, #1]
 8000db0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000db2:	7c3b      	ldrb	r3, [r7, #16]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d114      	bne.n	8000de2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000db8:	78fa      	ldrb	r2, [r7, #3]
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	011b      	lsls	r3, r3, #4
 8000dc0:	1a9b      	subs	r3, r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	332a      	adds	r3, #42	; 0x2a
 8000dc8:	2203      	movs	r2, #3
 8000dca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8000dcc:	78fa      	ldrb	r2, [r7, #3]
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	1a9b      	subs	r3, r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	3319      	adds	r3, #25
 8000ddc:	7f3a      	ldrb	r2, [r7, #28]
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	e009      	b.n	8000df6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000de2:	78fa      	ldrb	r2, [r7, #3]
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	4613      	mov	r3, r2
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	1a9b      	subs	r3, r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	440b      	add	r3, r1
 8000df0:	332a      	adds	r3, #42	; 0x2a
 8000df2:	2202      	movs	r2, #2
 8000df4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000df6:	787b      	ldrb	r3, [r7, #1]
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	f200 8102 	bhi.w	8001002 <HAL_HCD_HC_SubmitRequest+0x292>
 8000dfe:	a201      	add	r2, pc, #4	; (adr r2, 8000e04 <HAL_HCD_HC_SubmitRequest+0x94>)
 8000e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e04:	08000e15 	.word	0x08000e15
 8000e08:	08000fed 	.word	0x08000fed
 8000e0c:	08000ed9 	.word	0x08000ed9
 8000e10:	08000f63 	.word	0x08000f63
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8000e14:	7c3b      	ldrb	r3, [r7, #16]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	f040 80f5 	bne.w	8001006 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8000e1c:	78bb      	ldrb	r3, [r7, #2]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d12d      	bne.n	8000e7e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8000e22:	8b3b      	ldrh	r3, [r7, #24]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d109      	bne.n	8000e3c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8000e28:	78fa      	ldrb	r2, [r7, #3]
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	1a9b      	subs	r3, r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	440b      	add	r3, r1
 8000e36:	333d      	adds	r3, #61	; 0x3d
 8000e38:	2201      	movs	r2, #1
 8000e3a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e3c:	78fa      	ldrb	r2, [r7, #3]
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	4613      	mov	r3, r2
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	1a9b      	subs	r3, r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	440b      	add	r3, r1
 8000e4a:	333d      	adds	r3, #61	; 0x3d
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10a      	bne.n	8000e68 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e52:	78fa      	ldrb	r2, [r7, #3]
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	011b      	lsls	r3, r3, #4
 8000e5a:	1a9b      	subs	r3, r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	440b      	add	r3, r1
 8000e60:	332a      	adds	r3, #42	; 0x2a
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8000e66:	e0ce      	b.n	8001006 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e68:	78fa      	ldrb	r2, [r7, #3]
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	1a9b      	subs	r3, r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	332a      	adds	r3, #42	; 0x2a
 8000e78:	2202      	movs	r2, #2
 8000e7a:	701a      	strb	r2, [r3, #0]
      break;
 8000e7c:	e0c3      	b.n	8001006 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8000e7e:	78fa      	ldrb	r2, [r7, #3]
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	1a9b      	subs	r3, r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	331a      	adds	r3, #26
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	f040 80b8 	bne.w	8001006 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8000e96:	78fa      	ldrb	r2, [r7, #3]
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	011b      	lsls	r3, r3, #4
 8000e9e:	1a9b      	subs	r3, r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	333c      	adds	r3, #60	; 0x3c
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10a      	bne.n	8000ec2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000eac:	78fa      	ldrb	r2, [r7, #3]
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	1a9b      	subs	r3, r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	440b      	add	r3, r1
 8000eba:	332a      	adds	r3, #42	; 0x2a
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
      break;
 8000ec0:	e0a1      	b.n	8001006 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ec2:	78fa      	ldrb	r2, [r7, #3]
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	011b      	lsls	r3, r3, #4
 8000eca:	1a9b      	subs	r3, r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	332a      	adds	r3, #42	; 0x2a
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	701a      	strb	r2, [r3, #0]
      break;
 8000ed6:	e096      	b.n	8001006 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000ed8:	78bb      	ldrb	r3, [r7, #2]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d120      	bne.n	8000f20 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000ede:	78fa      	ldrb	r2, [r7, #3]
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	1a9b      	subs	r3, r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	440b      	add	r3, r1
 8000eec:	333d      	adds	r3, #61	; 0x3d
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10a      	bne.n	8000f0a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ef4:	78fa      	ldrb	r2, [r7, #3]
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	332a      	adds	r3, #42	; 0x2a
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000f08:	e07e      	b.n	8001008 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f0a:	78fa      	ldrb	r2, [r7, #3]
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	332a      	adds	r3, #42	; 0x2a
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	701a      	strb	r2, [r3, #0]
      break;
 8000f1e:	e073      	b.n	8001008 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f20:	78fa      	ldrb	r2, [r7, #3]
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	4613      	mov	r3, r2
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	1a9b      	subs	r3, r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	333c      	adds	r3, #60	; 0x3c
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10a      	bne.n	8000f4c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f36:	78fa      	ldrb	r2, [r7, #3]
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	1a9b      	subs	r3, r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	332a      	adds	r3, #42	; 0x2a
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
      break;
 8000f4a:	e05d      	b.n	8001008 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f4c:	78fa      	ldrb	r2, [r7, #3]
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	011b      	lsls	r3, r3, #4
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	440b      	add	r3, r1
 8000f5a:	332a      	adds	r3, #42	; 0x2a
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	701a      	strb	r2, [r3, #0]
      break;
 8000f60:	e052      	b.n	8001008 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000f62:	78bb      	ldrb	r3, [r7, #2]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d120      	bne.n	8000faa <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f68:	78fa      	ldrb	r2, [r7, #3]
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	1a9b      	subs	r3, r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	440b      	add	r3, r1
 8000f76:	333d      	adds	r3, #61	; 0x3d
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10a      	bne.n	8000f94 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f7e:	78fa      	ldrb	r2, [r7, #3]
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	1a9b      	subs	r3, r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	332a      	adds	r3, #42	; 0x2a
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f92:	e039      	b.n	8001008 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f94:	78fa      	ldrb	r2, [r7, #3]
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	1a9b      	subs	r3, r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	332a      	adds	r3, #42	; 0x2a
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	701a      	strb	r2, [r3, #0]
      break;
 8000fa8:	e02e      	b.n	8001008 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000faa:	78fa      	ldrb	r2, [r7, #3]
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	1a9b      	subs	r3, r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	333c      	adds	r3, #60	; 0x3c
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10a      	bne.n	8000fd6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fc0:	78fa      	ldrb	r2, [r7, #3]
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	011b      	lsls	r3, r3, #4
 8000fc8:	1a9b      	subs	r3, r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	332a      	adds	r3, #42	; 0x2a
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
      break;
 8000fd4:	e018      	b.n	8001008 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fd6:	78fa      	ldrb	r2, [r7, #3]
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	332a      	adds	r3, #42	; 0x2a
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	701a      	strb	r2, [r3, #0]
      break;
 8000fea:	e00d      	b.n	8001008 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fec:	78fa      	ldrb	r2, [r7, #3]
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	1a9b      	subs	r3, r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	332a      	adds	r3, #42	; 0x2a
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
      break;
 8001000:	e002      	b.n	8001008 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001002:	bf00      	nop
 8001004:	e000      	b.n	8001008 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001006:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001008:	78fa      	ldrb	r2, [r7, #3]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	332c      	adds	r3, #44	; 0x2c
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800101c:	78fa      	ldrb	r2, [r7, #3]
 800101e:	8b39      	ldrh	r1, [r7, #24]
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	1a9b      	subs	r3, r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4403      	add	r3, r0
 800102c:	3334      	adds	r3, #52	; 0x34
 800102e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001030:	78fa      	ldrb	r2, [r7, #3]
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	334c      	adds	r3, #76	; 0x4c
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001044:	78fa      	ldrb	r2, [r7, #3]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	3338      	adds	r3, #56	; 0x38
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001058:	78fa      	ldrb	r2, [r7, #3]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	1a9b      	subs	r3, r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3315      	adds	r3, #21
 8001068:	78fa      	ldrb	r2, [r7, #3]
 800106a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800106c:	78fa      	ldrb	r2, [r7, #3]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	334d      	adds	r3, #77	; 0x4d
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	78fa      	ldrb	r2, [r7, #3]
 8001086:	4613      	mov	r3, r2
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	1a9b      	subs	r3, r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	3310      	adds	r3, #16
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	1d19      	adds	r1, r3, #4
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	799b      	ldrb	r3, [r3, #6]
 800109a:	461a      	mov	r2, r3
 800109c:	f002 fdb8 	bl	8003c10 <USB_HC_StartXfer>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop

080010ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 faac 	bl	8003620 <USB_GetMode>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	f040 80fb 	bne.w	80012c6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 fa6f 	bl	80035b8 <USB_ReadInterrupts>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80f1 	beq.w	80012c4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fa66 	bl	80035b8 <USB_ReadInterrupts>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80010f6:	d104      	bne.n	8001102 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001100:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f002 fa56 	bl	80035b8 <USB_ReadInterrupts>
 800110c:	4603      	mov	r3, r0
 800110e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001116:	d104      	bne.n	8001122 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001120:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fa46 	bl	80035b8 <USB_ReadInterrupts>
 800112c:	4603      	mov	r3, r0
 800112e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001132:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001136:	d104      	bne.n	8001142 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001140:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f002 fa36 	bl	80035b8 <USB_ReadInterrupts>
 800114c:	4603      	mov	r3, r0
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b02      	cmp	r3, #2
 8001154:	d103      	bne.n	800115e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2202      	movs	r2, #2
 800115c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fa28 	bl	80035b8 <USB_ReadInterrupts>
 8001168:	4603      	mov	r3, r0
 800116a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800116e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001172:	d120      	bne.n	80011b6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800117c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d113      	bne.n	80011b6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800118e:	2110      	movs	r1, #16
 8001190:	6938      	ldr	r0, [r7, #16]
 8001192:	f002 f91b 	bl	80033cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001196:	6938      	ldr	r0, [r7, #16]
 8001198:	f002 f94a 	bl	8003430 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7a5b      	ldrb	r3, [r3, #9]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d105      	bne.n	80011b0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fb3c 	bl	8003828 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f005 fb13 	bl	80067dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 f9fc 	bl	80035b8 <USB_ReadInterrupts>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ca:	d102      	bne.n	80011d2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f001 fd33 	bl	8002c38 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 f9ee 	bl	80035b8 <USB_ReadInterrupts>
 80011dc:	4603      	mov	r3, r0
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d106      	bne.n	80011f4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f005 fadc 	bl	80067a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2208      	movs	r2, #8
 80011f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f002 f9dd 	bl	80035b8 <USB_ReadInterrupts>
 80011fe:	4603      	mov	r3, r0
 8001200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001204:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001208:	d139      	bne.n	800127e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f002 ff78 	bl	8004104 <USB_HC_ReadInterrupt>
 8001214:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	e025      	b.n	8001268 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	fa22 f303 	lsr.w	r3, r2, r3
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d018      	beq.n	8001262 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	015a      	lsls	r2, r3, #5
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001246:	d106      	bne.n	8001256 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4619      	mov	r1, r3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f905 	bl	800145e <HCD_HC_IN_IRQHandler>
 8001254:	e005      	b.n	8001262 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4619      	mov	r1, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 ff67 	bl	8002130 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	795b      	ldrb	r3, [r3, #5]
 800126c:	461a      	mov	r2, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	4293      	cmp	r3, r2
 8001272:	d3d3      	bcc.n	800121c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800127c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f002 f998 	bl	80035b8 <USB_ReadInterrupts>
 8001288:	4603      	mov	r3, r0
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	2b10      	cmp	r3, #16
 8001290:	d101      	bne.n	8001296 <HAL_HCD_IRQHandler+0x1ea>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_HCD_IRQHandler+0x1ec>
 8001296:	2300      	movs	r3, #0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d014      	beq.n	80012c6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	699a      	ldr	r2, [r3, #24]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0210 	bic.w	r2, r2, #16
 80012aa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f001 fbe4 	bl	8002a7a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	699a      	ldr	r2, [r3, #24]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0210 	orr.w	r2, r2, #16
 80012c0:	619a      	str	r2, [r3, #24]
 80012c2:	e000      	b.n	80012c6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80012c4:	bf00      	nop
    }
  }
}
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_HCD_Start+0x16>
 80012de:	2302      	movs	r3, #2
 80012e0:	e013      	b.n	800130a <HAL_HCD_Start+0x3e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2101      	movs	r1, #1
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 fb00 	bl	80038f6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 fff8 	bl	80032f0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_HCD_Stop+0x16>
 8001324:	2302      	movs	r3, #2
 8001326:	e00d      	b.n	8001344 <HAL_HCD_Stop+0x32>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f003 f853 	bl	80043e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f002 faa2 	bl	80038a2 <USB_ResetPort>
 800135e:	4603      	mov	r3, r0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001374:	78fa      	ldrb	r2, [r7, #3]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	1a9b      	subs	r3, r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	334c      	adds	r3, #76	; 0x4c
 8001384:	781b      	ldrb	r3, [r3, #0]
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800139e:	78fa      	ldrb	r2, [r7, #3]
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	1a9b      	subs	r3, r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	440b      	add	r3, r1
 80013ac:	3338      	adds	r3, #56	; 0x38
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fae4 	bl	8003996 <USB_GetCurrentFrame>
 80013ce:	4603      	mov	r3, r0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 fabf 	bl	8003968 <USB_GetHostSpeed>
 80013ea:	4603      	mov	r3, r0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001400:	78fa      	ldrb	r2, [r7, #3]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	1a9b      	subs	r3, r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	331a      	adds	r3, #26
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001414:	78fa      	ldrb	r2, [r7, #3]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	331b      	adds	r3, #27
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001428:	78fa      	ldrb	r2, [r7, #3]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	1a9b      	subs	r3, r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	3325      	adds	r3, #37	; 0x25
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800143c:	78fa      	ldrb	r2, [r7, #3]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	1a9b      	subs	r3, r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	3324      	adds	r3, #36	; 0x24
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	78fa      	ldrb	r2, [r7, #3]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f002 f8ae 	bl	80035de <USB_ReadChInterrupts>
 8001482:	4603      	mov	r3, r0
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b04      	cmp	r3, #4
 800148a:	d11a      	bne.n	80014c2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4413      	add	r3, r2
 8001494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001498:	461a      	mov	r2, r3
 800149a:	2304      	movs	r3, #4
 800149c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800149e:	78fa      	ldrb	r2, [r7, #3]
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	1a9b      	subs	r3, r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	334d      	adds	r3, #77	; 0x4d
 80014ae:	2207      	movs	r2, #7
 80014b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	78fa      	ldrb	r2, [r7, #3]
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 fe33 	bl	8004126 <USB_HC_Halt>
 80014c0:	e09e      	b.n	8001600 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	78fa      	ldrb	r2, [r7, #3]
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 f887 	bl	80035de <USB_ReadChInterrupts>
 80014d0:	4603      	mov	r3, r0
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014da:	d11b      	bne.n	8001514 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	015a      	lsls	r2, r3, #5
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4413      	add	r3, r2
 80014e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014e8:	461a      	mov	r2, r3
 80014ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80014f0:	78fa      	ldrb	r2, [r7, #3]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	1a9b      	subs	r3, r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	334d      	adds	r3, #77	; 0x4d
 8001500:	2208      	movs	r2, #8
 8001502:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	78fa      	ldrb	r2, [r7, #3]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fe0a 	bl	8004126 <USB_HC_Halt>
 8001512:	e075      	b.n	8001600 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	78fa      	ldrb	r2, [r7, #3]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f002 f85e 	bl	80035de <USB_ReadChInterrupts>
 8001522:	4603      	mov	r3, r0
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	2b08      	cmp	r3, #8
 800152a:	d11a      	bne.n	8001562 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	015a      	lsls	r2, r3, #5
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4413      	add	r3, r2
 8001534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001538:	461a      	mov	r2, r3
 800153a:	2308      	movs	r3, #8
 800153c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	334d      	adds	r3, #77	; 0x4d
 800154e:	2206      	movs	r2, #6
 8001550:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	78fa      	ldrb	r2, [r7, #3]
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fde3 	bl	8004126 <USB_HC_Halt>
 8001560:	e04e      	b.n	8001600 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	78fa      	ldrb	r2, [r7, #3]
 8001568:	4611      	mov	r1, r2
 800156a:	4618      	mov	r0, r3
 800156c:	f002 f837 	bl	80035de <USB_ReadChInterrupts>
 8001570:	4603      	mov	r3, r0
 8001572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157a:	d11b      	bne.n	80015b4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	015a      	lsls	r2, r3, #5
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4413      	add	r3, r2
 8001584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001588:	461a      	mov	r2, r3
 800158a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001590:	78fa      	ldrb	r2, [r7, #3]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	334d      	adds	r3, #77	; 0x4d
 80015a0:	2209      	movs	r2, #9
 80015a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	78fa      	ldrb	r2, [r7, #3]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 fdba 	bl	8004126 <USB_HC_Halt>
 80015b2:	e025      	b.n	8001600 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	78fa      	ldrb	r2, [r7, #3]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f002 f80e 	bl	80035de <USB_ReadChInterrupts>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c8:	2b80      	cmp	r3, #128	; 0x80
 80015ca:	d119      	bne.n	8001600 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	015a      	lsls	r2, r3, #5
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4413      	add	r3, r2
 80015d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015d8:	461a      	mov	r2, r3
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	334d      	adds	r3, #77	; 0x4d
 80015ee:	2207      	movs	r2, #7
 80015f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f002 fd93 	bl	8004126 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f001 ffe8 	bl	80035de <USB_ReadChInterrupts>
 800160e:	4603      	mov	r3, r0
 8001610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001618:	d112      	bne.n	8001640 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	78fa      	ldrb	r2, [r7, #3]
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f002 fd7f 	bl	8004126 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	015a      	lsls	r2, r3, #5
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4413      	add	r3, r2
 8001630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001634:	461a      	mov	r2, r3
 8001636:	f44f 7300 	mov.w	r3, #512	; 0x200
 800163a:	6093      	str	r3, [r2, #8]
 800163c:	f000 bd75 	b.w	800212a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f001 ffc8 	bl	80035de <USB_ReadChInterrupts>
 800164e:	4603      	mov	r3, r0
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b01      	cmp	r3, #1
 8001656:	f040 8128 	bne.w	80018aa <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	015a      	lsls	r2, r3, #5
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4413      	add	r3, r2
 8001662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001666:	461a      	mov	r2, r3
 8001668:	2320      	movs	r3, #32
 800166a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800166c:	78fa      	ldrb	r2, [r7, #3]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	331b      	adds	r3, #27
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d119      	bne.n	80016b6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001682:	78fa      	ldrb	r2, [r7, #3]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	331b      	adds	r3, #27
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	015a      	lsls	r2, r3, #5
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4413      	add	r3, r2
 800169e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	78fa      	ldrb	r2, [r7, #3]
 80016a6:	0151      	lsls	r1, r2, #5
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	440a      	add	r2, r1
 80016ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	799b      	ldrb	r3, [r3, #6]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d01b      	beq.n	80016f6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80016be:	78fa      	ldrb	r2, [r7, #3]
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	1a9b      	subs	r3, r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	3330      	adds	r3, #48	; 0x30
 80016ce:	6819      	ldr	r1, [r3, #0]
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	015a      	lsls	r2, r3, #5
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4413      	add	r3, r2
 80016d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	1ac9      	subs	r1, r1, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4403      	add	r3, r0
 80016f2:	3338      	adds	r3, #56	; 0x38
 80016f4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	334d      	adds	r3, #77	; 0x4d
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	1a9b      	subs	r3, r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	3344      	adds	r3, #68	; 0x44
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	015a      	lsls	r2, r3, #5
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4413      	add	r3, r2
 8001726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800172a:	461a      	mov	r2, r3
 800172c:	2301      	movs	r3, #1
 800172e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001730:	78fa      	ldrb	r2, [r7, #3]
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	3326      	adds	r3, #38	; 0x26
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00a      	beq.n	800175c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001746:	78fa      	ldrb	r2, [r7, #3]
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	1a9b      	subs	r3, r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	3326      	adds	r3, #38	; 0x26
 8001756:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001758:	2b02      	cmp	r3, #2
 800175a:	d110      	bne.n	800177e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78fa      	ldrb	r2, [r7, #3]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fcde 	bl	8004126 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4413      	add	r3, r2
 8001772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001776:	461a      	mov	r2, r3
 8001778:	2310      	movs	r3, #16
 800177a:	6093      	str	r3, [r2, #8]
 800177c:	e03d      	b.n	80017fa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	1a9b      	subs	r3, r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	3326      	adds	r3, #38	; 0x26
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d00a      	beq.n	80017aa <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	3326      	adds	r3, #38	; 0x26
 80017a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d127      	bne.n	80017fa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	78fa      	ldrb	r2, [r7, #3]
 80017ba:	0151      	lsls	r1, r2, #5
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	440a      	add	r2, r1
 80017c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017c8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80017ca:	78fa      	ldrb	r2, [r7, #3]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	1a9b      	subs	r3, r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	334c      	adds	r3, #76	; 0x4c
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	1a9b      	subs	r3, r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	334c      	adds	r3, #76	; 0x4c
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	4619      	mov	r1, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f004 ffff 	bl	80067f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	799b      	ldrb	r3, [r3, #6]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d13b      	bne.n	800187a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	1a9b      	subs	r3, r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	3338      	adds	r3, #56	; 0x38
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4403      	add	r3, r0
 8001822:	3328      	adds	r3, #40	; 0x28
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	440b      	add	r3, r1
 8001828:	1e59      	subs	r1, r3, #1
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	1a9b      	subs	r3, r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4403      	add	r3, r0
 8001838:	3328      	adds	r3, #40	; 0x28
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 8470 	beq.w	800212a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	333c      	adds	r3, #60	; 0x3c
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	f083 0301 	eor.w	r3, r3, #1
 8001862:	b2d8      	uxtb	r0, r3
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	1a9b      	subs	r3, r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	333c      	adds	r3, #60	; 0x3c
 8001872:	4602      	mov	r2, r0
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	f000 bc58 	b.w	800212a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800187a:	78fa      	ldrb	r2, [r7, #3]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	1a9b      	subs	r3, r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	333c      	adds	r3, #60	; 0x3c
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	f083 0301 	eor.w	r3, r3, #1
 8001892:	b2d8      	uxtb	r0, r3
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	1a9b      	subs	r3, r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	333c      	adds	r3, #60	; 0x3c
 80018a2:	4602      	mov	r2, r0
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	f000 bc40 	b.w	800212a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f001 fe93 	bl	80035de <USB_ReadChInterrupts>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	2b20      	cmp	r3, #32
 80018c0:	d131      	bne.n	8001926 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	015a      	lsls	r2, r3, #5
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ce:	461a      	mov	r2, r3
 80018d0:	2320      	movs	r3, #32
 80018d2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	331a      	adds	r3, #26
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	f040 841f 	bne.w	800212a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	331b      	adds	r3, #27
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	334d      	adds	r3, #77	; 0x4d
 8001910:	2203      	movs	r2, #3
 8001912:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f002 fc02 	bl	8004126 <USB_HC_Halt>
 8001922:	f000 bc02 	b.w	800212a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f001 fe55 	bl	80035de <USB_ReadChInterrupts>
 8001934:	4603      	mov	r3, r0
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b02      	cmp	r3, #2
 800193c:	f040 8305 	bne.w	8001f4a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	015a      	lsls	r2, r3, #5
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4413      	add	r3, r2
 8001948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800194c:	461a      	mov	r2, r3
 800194e:	2302      	movs	r3, #2
 8001950:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	334d      	adds	r3, #77	; 0x4d
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d114      	bne.n	8001992 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	334d      	adds	r3, #77	; 0x4d
 8001978:	2202      	movs	r2, #2
 800197a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	334c      	adds	r3, #76	; 0x4c
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	e2cc      	b.n	8001f2c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	334d      	adds	r3, #77	; 0x4d
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b06      	cmp	r3, #6
 80019a6:	d114      	bne.n	80019d2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80019a8:	78fa      	ldrb	r2, [r7, #3]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	334d      	adds	r3, #77	; 0x4d
 80019b8:	2202      	movs	r2, #2
 80019ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	334c      	adds	r3, #76	; 0x4c
 80019cc:	2205      	movs	r2, #5
 80019ce:	701a      	strb	r2, [r3, #0]
 80019d0:	e2ac      	b.n	8001f2c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80019d2:	78fa      	ldrb	r2, [r7, #3]
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	1a9b      	subs	r3, r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	334d      	adds	r3, #77	; 0x4d
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b07      	cmp	r3, #7
 80019e6:	d00b      	beq.n	8001a00 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	334d      	adds	r3, #77	; 0x4d
 80019f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80019fa:	2b09      	cmp	r3, #9
 80019fc:	f040 80a6 	bne.w	8001b4c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	334d      	adds	r3, #77	; 0x4d
 8001a10:	2202      	movs	r2, #2
 8001a12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	3344      	adds	r3, #68	; 0x44
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	1c59      	adds	r1, r3, #1
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4403      	add	r3, r0
 8001a34:	3344      	adds	r3, #68	; 0x44
 8001a36:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001a38:	78fa      	ldrb	r2, [r7, #3]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	3344      	adds	r3, #68	; 0x44
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d943      	bls.n	8001ad6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001a4e:	78fa      	ldrb	r2, [r7, #3]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3344      	adds	r3, #68	; 0x44
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8001a62:	78fa      	ldrb	r2, [r7, #3]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	331a      	adds	r3, #26
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d123      	bne.n	8001ac0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	331b      	adds	r3, #27
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	331c      	adds	r3, #28
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	015a      	lsls	r2, r3, #5
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	78fa      	ldrb	r2, [r7, #3]
 8001ab0:	0151      	lsls	r1, r2, #5
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	440a      	add	r2, r1
 8001ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001abe:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001ac0:	78fa      	ldrb	r2, [r7, #3]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	334c      	adds	r3, #76	; 0x4c
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001ad4:	e229      	b.n	8001f2a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001ad6:	78fa      	ldrb	r2, [r7, #3]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	334c      	adds	r3, #76	; 0x4c
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001aea:	78fa      	ldrb	r2, [r7, #3]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	1a9b      	subs	r3, r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	3326      	adds	r3, #38	; 0x26
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00b      	beq.n	8001b18 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001b00:	78fa      	ldrb	r2, [r7, #3]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3326      	adds	r3, #38	; 0x26
 8001b10:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	f040 8209 	bne.w	8001f2a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	015a      	lsls	r2, r3, #5
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4413      	add	r3, r2
 8001b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b2e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b36:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	015a      	lsls	r2, r3, #5
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4413      	add	r3, r2
 8001b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b44:	461a      	mov	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001b4a:	e1ee      	b.n	8001f2a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001b4c:	78fa      	ldrb	r2, [r7, #3]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	334d      	adds	r3, #77	; 0x4d
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b05      	cmp	r3, #5
 8001b60:	f040 80c8 	bne.w	8001cf4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	334d      	adds	r3, #77	; 0x4d
 8001b74:	2202      	movs	r2, #2
 8001b76:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	331b      	adds	r3, #27
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	f040 81ce 	bne.w	8001f2c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	3326      	adds	r3, #38	; 0x26
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d16b      	bne.n	8001c7e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001ba6:	78fa      	ldrb	r2, [r7, #3]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	1a9b      	subs	r3, r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3348      	adds	r3, #72	; 0x48
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	1c59      	adds	r1, r3, #1
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4403      	add	r3, r0
 8001bc6:	3348      	adds	r3, #72	; 0x48
 8001bc8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	011b      	lsls	r3, r3, #4
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	3348      	adds	r3, #72	; 0x48
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d943      	bls.n	8001c68 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	3348      	adds	r3, #72	; 0x48
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	1a9b      	subs	r3, r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	331b      	adds	r3, #27
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	1a9b      	subs	r3, r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	3344      	adds	r3, #68	; 0x44
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d809      	bhi.n	8001c32 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001c1e:	78fa      	ldrb	r2, [r7, #3]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	1a9b      	subs	r3, r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	331c      	adds	r3, #28
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	0151      	lsls	r1, r2, #5
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	440a      	add	r2, r1
 8001c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c50:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001c52:	78fa      	ldrb	r2, [r7, #3]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	334c      	adds	r3, #76	; 0x4c
 8001c62:	2204      	movs	r2, #4
 8001c64:	701a      	strb	r2, [r3, #0]
 8001c66:	e014      	b.n	8001c92 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	334c      	adds	r3, #76	; 0x4c
 8001c78:	2202      	movs	r2, #2
 8001c7a:	701a      	strb	r2, [r3, #0]
 8001c7c:	e009      	b.n	8001c92 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001c7e:	78fa      	ldrb	r2, [r7, #3]
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	334c      	adds	r3, #76	; 0x4c
 8001c8e:	2202      	movs	r2, #2
 8001c90:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c92:	78fa      	ldrb	r2, [r7, #3]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	1a9b      	subs	r3, r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3326      	adds	r3, #38	; 0x26
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00b      	beq.n	8001cc0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001ca8:	78fa      	ldrb	r2, [r7, #3]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	1a9b      	subs	r3, r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3326      	adds	r3, #38	; 0x26
 8001cb8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	f040 8136 	bne.w	8001f2c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	015a      	lsls	r2, r3, #5
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001cd6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cde:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cec:	461a      	mov	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e11b      	b.n	8001f2c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	334d      	adds	r3, #77	; 0x4d
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	f040 8081 	bne.w	8001e0e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	334d      	adds	r3, #77	; 0x4d
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	331b      	adds	r3, #27
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	f040 80fa 	bne.w	8001f2c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	334c      	adds	r3, #76	; 0x4c
 8001d48:	2202      	movs	r2, #2
 8001d4a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	78fa      	ldrb	r2, [r7, #3]
 8001d5c:	0151      	lsls	r1, r2, #5
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	440a      	add	r2, r1
 8001d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	78fa      	ldrb	r2, [r7, #3]
 8001d7c:	0151      	lsls	r1, r2, #5
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	440a      	add	r2, r1
 8001d82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d8a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	0151      	lsls	r1, r2, #5
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	440a      	add	r2, r1
 8001da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001da6:	f023 0320 	bic.w	r3, r3, #32
 8001daa:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001dac:	78fa      	ldrb	r2, [r7, #3]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	3326      	adds	r3, #38	; 0x26
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00b      	beq.n	8001dda <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001dc2:	78fa      	ldrb	r2, [r7, #3]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	1a9b      	subs	r3, r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	3326      	adds	r3, #38	; 0x26
 8001dd2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	f040 80a9 	bne.w	8001f2c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001df0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001df8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	015a      	lsls	r2, r3, #5
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	e08e      	b.n	8001f2c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001e0e:	78fa      	ldrb	r2, [r7, #3]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	334d      	adds	r3, #77	; 0x4d
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d143      	bne.n	8001eac <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	334d      	adds	r3, #77	; 0x4d
 8001e34:	2202      	movs	r2, #2
 8001e36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001e38:	78fa      	ldrb	r2, [r7, #3]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	334c      	adds	r3, #76	; 0x4c
 8001e48:	2202      	movs	r2, #2
 8001e4a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e4c:	78fa      	ldrb	r2, [r7, #3]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	3326      	adds	r3, #38	; 0x26
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001e62:	78fa      	ldrb	r2, [r7, #3]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	1a9b      	subs	r3, r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	3326      	adds	r3, #38	; 0x26
 8001e72:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d159      	bne.n	8001f2c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e8e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e96:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e03f      	b.n	8001f2c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8001eac:	78fa      	ldrb	r2, [r7, #3]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	334d      	adds	r3, #77	; 0x4d
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d126      	bne.n	8001f10 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	334d      	adds	r3, #77	; 0x4d
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	1a9b      	subs	r3, r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3344      	adds	r3, #68	; 0x44
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	1c59      	adds	r1, r3, #1
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4403      	add	r3, r0
 8001ef6:	3344      	adds	r3, #68	; 0x44
 8001ef8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	334c      	adds	r3, #76	; 0x4c
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	701a      	strb	r2, [r3, #0]
 8001f0e:	e00d      	b.n	8001f2c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	334d      	adds	r3, #77	; 0x4d
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	f000 8100 	beq.w	8002128 <HCD_HC_IN_IRQHandler+0xcca>
 8001f28:	e000      	b.n	8001f2c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001f2a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	334c      	adds	r3, #76	; 0x4c
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	4619      	mov	r1, r3
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f004 fc58 	bl	80067f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001f48:	e0ef      	b.n	800212a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f001 fb43 	bl	80035de <USB_ReadChInterrupts>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	2b40      	cmp	r3, #64	; 0x40
 8001f60:	d12f      	bne.n	8001fc2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2340      	movs	r3, #64	; 0x40
 8001f72:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	334d      	adds	r3, #77	; 0x4d
 8001f84:	2205      	movs	r2, #5
 8001f86:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	1a9b      	subs	r3, r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	331a      	adds	r3, #26
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001f9e:	78fa      	ldrb	r2, [r7, #3]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	1a9b      	subs	r3, r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	3344      	adds	r3, #68	; 0x44
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 f8b3 	bl	8004126 <USB_HC_Halt>
 8001fc0:	e0b3      	b.n	800212a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	78fa      	ldrb	r2, [r7, #3]
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 fb07 	bl	80035de <USB_ReadChInterrupts>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b10      	cmp	r3, #16
 8001fd8:	f040 80a7 	bne.w	800212a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	3326      	adds	r3, #38	; 0x26
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d11b      	bne.n	800202a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	3344      	adds	r3, #68	; 0x44
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	334d      	adds	r3, #77	; 0x4d
 8002016:	2204      	movs	r2, #4
 8002018:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f002 f87f 	bl	8004126 <USB_HC_Halt>
 8002028:	e03f      	b.n	80020aa <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	3326      	adds	r3, #38	; 0x26
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	3326      	adds	r3, #38	; 0x26
 8002050:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002052:	2b02      	cmp	r3, #2
 8002054:	d129      	bne.n	80020aa <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	3344      	adds	r3, #68	; 0x44
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	799b      	ldrb	r3, [r3, #6]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HCD_HC_IN_IRQHandler+0xc2a>
 8002072:	78fa      	ldrb	r2, [r7, #3]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	331b      	adds	r3, #27
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d110      	bne.n	80020aa <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	334d      	adds	r3, #77	; 0x4d
 8002098:	2204      	movs	r2, #4
 800209a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f002 f83e 	bl	8004126 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	331b      	adds	r3, #27
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d129      	bne.n	8002114 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	331b      	adds	r3, #27
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	0151      	lsls	r1, r2, #5
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	440a      	add	r2, r1
 80020ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	0151      	lsls	r1, r2, #5
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	440a      	add	r2, r1
 800210a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800210e:	f043 0320 	orr.w	r3, r3, #32
 8002112:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002120:	461a      	mov	r2, r3
 8002122:	2310      	movs	r3, #16
 8002124:	6093      	str	r3, [r2, #8]
 8002126:	e000      	b.n	800212a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002128:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f001 fa45 	bl	80035de <USB_ReadChInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b04      	cmp	r3, #4
 800215c:	d11b      	bne.n	8002196 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216a:	461a      	mov	r2, r3
 800216c:	2304      	movs	r3, #4
 800216e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002170:	78fa      	ldrb	r2, [r7, #3]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	334d      	adds	r3, #77	; 0x4d
 8002180:	2207      	movs	r2, #7
 8002182:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f001 ffca 	bl	8004126 <USB_HC_Halt>
 8002192:	f000 bc6f 	b.w	8002a74 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f001 fa1d 	bl	80035de <USB_ReadChInterrupts>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b20      	cmp	r3, #32
 80021ac:	f040 8082 	bne.w	80022b4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	461a      	mov	r2, r3
 80021be:	2320      	movs	r3, #32
 80021c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	3319      	adds	r3, #25
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d124      	bne.n	8002222 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	3319      	adds	r3, #25
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	334c      	adds	r3, #76	; 0x4c
 80021fc:	2202      	movs	r2, #2
 80021fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	334d      	adds	r3, #77	; 0x4d
 8002210:	2203      	movs	r2, #3
 8002212:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f001 ff82 	bl	8004126 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	331a      	adds	r3, #26
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	f040 841d 	bne.w	8002a74 <HCD_HC_OUT_IRQHandler+0x944>
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	331b      	adds	r3, #27
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	f040 8411 	bne.w	8002a74 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	3326      	adds	r3, #38	; 0x26
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d009      	beq.n	800227c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	331b      	adds	r3, #27
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	334d      	adds	r3, #77	; 0x4d
 800228c:	2203      	movs	r2, #3
 800228e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f001 ff44 	bl	8004126 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	3344      	adds	r3, #68	; 0x44
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e3df      	b.n	8002a74 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f001 f98e 	bl	80035de <USB_ReadChInterrupts>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022cc:	d111      	bne.n	80022f2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	461a      	mov	r2, r3
 80022dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022e0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f001 ff1b 	bl	8004126 <USB_HC_Halt>
 80022f0:	e3c0      	b.n	8002a74 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	4611      	mov	r1, r2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f001 f96f 	bl	80035de <USB_ReadChInterrupts>
 8002300:	4603      	mov	r3, r0
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b01      	cmp	r3, #1
 8002308:	d168      	bne.n	80023dc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800230a:	78fa      	ldrb	r2, [r7, #3]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3344      	adds	r3, #68	; 0x44
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	4611      	mov	r1, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f001 f959 	bl	80035de <USB_ReadChInterrupts>
 800232c:	4603      	mov	r3, r0
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	2b40      	cmp	r3, #64	; 0x40
 8002334:	d112      	bne.n	800235c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	3319      	adds	r3, #25
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002356:	461a      	mov	r2, r3
 8002358:	2340      	movs	r3, #64	; 0x40
 800235a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	331b      	adds	r3, #27
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d019      	beq.n	80023a6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	331b      	adds	r3, #27
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	0151      	lsls	r1, r2, #5
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	440a      	add	r2, r1
 800239c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	461a      	mov	r2, r3
 80023b4:	2301      	movs	r3, #1
 80023b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	334d      	adds	r3, #77	; 0x4d
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f001 fea6 	bl	8004126 <USB_HC_Halt>
 80023da:	e34b      	b.n	8002a74 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f001 f8fa 	bl	80035de <USB_ReadChInterrupts>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f0:	2b40      	cmp	r3, #64	; 0x40
 80023f2:	d139      	bne.n	8002468 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	334d      	adds	r3, #77	; 0x4d
 8002404:	2205      	movs	r2, #5
 8002406:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	331a      	adds	r3, #26
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	3319      	adds	r3, #25
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	3344      	adds	r3, #68	; 0x44
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f001 fe69 	bl	8004126 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002460:	461a      	mov	r2, r3
 8002462:	2340      	movs	r3, #64	; 0x40
 8002464:	6093      	str	r3, [r2, #8]
 8002466:	e305      	b.n	8002a74 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f001 f8b4 	bl	80035de <USB_ReadChInterrupts>
 8002476:	4603      	mov	r3, r0
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b08      	cmp	r3, #8
 800247e:	d11a      	bne.n	80024b6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248c:	461a      	mov	r2, r3
 800248e:	2308      	movs	r3, #8
 8002490:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	1a9b      	subs	r3, r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	334d      	adds	r3, #77	; 0x4d
 80024a2:	2206      	movs	r2, #6
 80024a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f001 fe39 	bl	8004126 <USB_HC_Halt>
 80024b4:	e2de      	b.n	8002a74 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 f88d 	bl	80035de <USB_ReadChInterrupts>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d144      	bne.n	8002558 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	3344      	adds	r3, #68	; 0x44
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	334d      	adds	r3, #77	; 0x4d
 80024f2:	2204      	movs	r2, #4
 80024f4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	3319      	adds	r3, #25
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d114      	bne.n	8002536 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	3318      	adds	r3, #24
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	3319      	adds	r3, #25
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f001 fdf1 	bl	8004126 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002550:	461a      	mov	r2, r3
 8002552:	2310      	movs	r3, #16
 8002554:	6093      	str	r3, [r2, #8]
 8002556:	e28d      	b.n	8002a74 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f001 f83c 	bl	80035de <USB_ReadChInterrupts>
 8002566:	4603      	mov	r3, r0
 8002568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256c:	2b80      	cmp	r3, #128	; 0x80
 800256e:	d169      	bne.n	8002644 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	799b      	ldrb	r3, [r3, #6]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d111      	bne.n	800259c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	334d      	adds	r3, #77	; 0x4d
 8002588:	2207      	movs	r2, #7
 800258a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f001 fdc6 	bl	8004126 <USB_HC_Halt>
 800259a:	e049      	b.n	8002630 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	3344      	adds	r3, #68	; 0x44
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	1c59      	adds	r1, r3, #1
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4403      	add	r3, r0
 80025bc:	3344      	adds	r3, #68	; 0x44
 80025be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	3344      	adds	r3, #68	; 0x44
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d922      	bls.n	800261c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80025d6:	78fa      	ldrb	r2, [r7, #3]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	3344      	adds	r3, #68	; 0x44
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	334c      	adds	r3, #76	; 0x4c
 80025fa:	2204      	movs	r2, #4
 80025fc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	334c      	adds	r3, #76	; 0x4c
 800260e:	781a      	ldrb	r2, [r3, #0]
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	4619      	mov	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f004 f8ef 	bl	80067f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800261a:	e009      	b.n	8002630 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	334c      	adds	r3, #76	; 0x4c
 800262c:	2202      	movs	r2, #2
 800262e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4413      	add	r3, r2
 8002638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263c:	461a      	mov	r2, r3
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	6093      	str	r3, [r2, #8]
 8002642:	e217      	b.n	8002a74 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f000 ffc6 	bl	80035de <USB_ReadChInterrupts>
 8002652:	4603      	mov	r3, r0
 8002654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265c:	d11b      	bne.n	8002696 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	334d      	adds	r3, #77	; 0x4d
 800266e:	2209      	movs	r2, #9
 8002670:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	4611      	mov	r1, r2
 800267a:	4618      	mov	r0, r3
 800267c:	f001 fd53 	bl	8004126 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4413      	add	r3, r2
 8002688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268c:	461a      	mov	r2, r3
 800268e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002692:	6093      	str	r3, [r2, #8]
 8002694:	e1ee      	b.n	8002a74 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 ff9d 	bl	80035de <USB_ReadChInterrupts>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	f040 81df 	bne.w	8002a6e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	461a      	mov	r2, r3
 80026be:	2302      	movs	r3, #2
 80026c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	334d      	adds	r3, #77	; 0x4d
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	f040 8093 	bne.w	8002800 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	334d      	adds	r3, #77	; 0x4d
 80026ea:	2202      	movs	r2, #2
 80026ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	334c      	adds	r3, #76	; 0x4c
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	3326      	adds	r3, #38	; 0x26
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d00b      	beq.n	8002730 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	3326      	adds	r3, #38	; 0x26
 8002728:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800272a:	2b03      	cmp	r3, #3
 800272c:	f040 8190 	bne.w	8002a50 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	799b      	ldrb	r3, [r3, #6]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d115      	bne.n	8002764 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	333d      	adds	r3, #61	; 0x3d
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	f083 0301 	eor.w	r3, r3, #1
 8002750:	b2d8      	uxtb	r0, r3
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	333d      	adds	r3, #61	; 0x3d
 8002760:	4602      	mov	r2, r0
 8002762:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	799b      	ldrb	r3, [r3, #6]
 8002768:	2b01      	cmp	r3, #1
 800276a:	f040 8171 	bne.w	8002a50 <HCD_HC_OUT_IRQHandler+0x920>
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	3334      	adds	r3, #52	; 0x34
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8165 	beq.w	8002a50 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3334      	adds	r3, #52	; 0x34
 8002796:	6819      	ldr	r1, [r3, #0]
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4403      	add	r3, r0
 80027a6:	3328      	adds	r3, #40	; 0x28
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	440b      	add	r3, r1
 80027ac:	1e59      	subs	r1, r3, #1
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	1a9b      	subs	r3, r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4403      	add	r3, r0
 80027bc:	3328      	adds	r3, #40	; 0x28
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 813f 	beq.w	8002a50 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80027d2:	78fa      	ldrb	r2, [r7, #3]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	333d      	adds	r3, #61	; 0x3d
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	f083 0301 	eor.w	r3, r3, #1
 80027ea:	b2d8      	uxtb	r0, r3
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	333d      	adds	r3, #61	; 0x3d
 80027fa:	4602      	mov	r2, r0
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e127      	b.n	8002a50 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	334d      	adds	r3, #77	; 0x4d
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d120      	bne.n	8002858 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	334d      	adds	r3, #77	; 0x4d
 8002826:	2202      	movs	r2, #2
 8002828:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	331b      	adds	r3, #27
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	f040 8107 	bne.w	8002a50 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	334c      	adds	r3, #76	; 0x4c
 8002852:	2202      	movs	r2, #2
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	e0fb      	b.n	8002a50 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	334d      	adds	r3, #77	; 0x4d
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b04      	cmp	r3, #4
 800286c:	d13a      	bne.n	80028e4 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	334d      	adds	r3, #77	; 0x4d
 800287e:	2202      	movs	r2, #2
 8002880:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	334c      	adds	r3, #76	; 0x4c
 8002892:	2202      	movs	r2, #2
 8002894:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	331b      	adds	r3, #27
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	f040 80d1 	bne.w	8002a50 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	331b      	adds	r3, #27
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	0151      	lsls	r1, r2, #5
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	440a      	add	r2, r1
 80028d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e0:	6053      	str	r3, [r2, #4]
 80028e2:	e0b5      	b.n	8002a50 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	334d      	adds	r3, #77	; 0x4d
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b05      	cmp	r3, #5
 80028f8:	d114      	bne.n	8002924 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	334d      	adds	r3, #77	; 0x4d
 800290a:	2202      	movs	r2, #2
 800290c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	334c      	adds	r3, #76	; 0x4c
 800291e:	2202      	movs	r2, #2
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e095      	b.n	8002a50 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	334d      	adds	r3, #77	; 0x4d
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b06      	cmp	r3, #6
 8002938:	d114      	bne.n	8002964 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	1a9b      	subs	r3, r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	334d      	adds	r3, #77	; 0x4d
 800294a:	2202      	movs	r2, #2
 800294c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	334c      	adds	r3, #76	; 0x4c
 800295e:	2205      	movs	r2, #5
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e075      	b.n	8002a50 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	334d      	adds	r3, #77	; 0x4d
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b07      	cmp	r3, #7
 8002978:	d00a      	beq.n	8002990 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	334d      	adds	r3, #77	; 0x4d
 800298a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800298c:	2b09      	cmp	r3, #9
 800298e:	d170      	bne.n	8002a72 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	334d      	adds	r3, #77	; 0x4d
 80029a0:	2202      	movs	r2, #2
 80029a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	3344      	adds	r3, #68	; 0x44
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	1c59      	adds	r1, r3, #1
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4403      	add	r3, r0
 80029c4:	3344      	adds	r3, #68	; 0x44
 80029c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	3344      	adds	r3, #68	; 0x44
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d914      	bls.n	8002a08 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	3344      	adds	r3, #68	; 0x44
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	334c      	adds	r3, #76	; 0x4c
 8002a02:	2204      	movs	r2, #4
 8002a04:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a06:	e022      	b.n	8002a4e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	334c      	adds	r3, #76	; 0x4c
 8002a18:	2202      	movs	r2, #2
 8002a1a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a32:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a3a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	461a      	mov	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a4e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	334c      	adds	r3, #76	; 0x4c
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	4619      	mov	r1, r3
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f003 fec6 	bl	80067f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a6c:	e002      	b.n	8002a74 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002a6e:	bf00      	nop
 8002a70:	e000      	b.n	8002a74 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8002a72:	bf00      	nop
  }
}
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b08a      	sub	sp, #40	; 0x28
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	0c5b      	lsrs	r3, r3, #17
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d004      	beq.n	8002ac0 <HCD_RXQLVL_IRQHandler+0x46>
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	f000 80b6 	beq.w	8002c2a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002abe:	e0b7      	b.n	8002c30 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 80b3 	beq.w	8002c2e <HCD_RXQLVL_IRQHandler+0x1b4>
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	332c      	adds	r3, #44	; 0x2c
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80a7 	beq.w	8002c2e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3338      	adds	r3, #56	; 0x38
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	18d1      	adds	r1, r2, r3
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4613      	mov	r3, r2
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4403      	add	r3, r0
 8002b04:	3334      	adds	r3, #52	; 0x34
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4299      	cmp	r1, r3
 8002b0a:	f200 8083 	bhi.w	8002c14 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4613      	mov	r3, r2
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	332c      	adds	r3, #44	; 0x2c
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	b292      	uxth	r2, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f000 fced 	bl	8003508 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4613      	mov	r3, r2
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	332c      	adds	r3, #44	; 0x2c
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	18d1      	adds	r1, r2, r3
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4403      	add	r3, r0
 8002b52:	332c      	adds	r3, #44	; 0x2c
 8002b54:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	3338      	adds	r3, #56	; 0x38
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	18d1      	adds	r1, r2, r3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4403      	add	r3, r0
 8002b7a:	3338      	adds	r3, #56	; 0x38
 8002b7c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	0cdb      	lsrs	r3, r3, #19
 8002b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b92:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3328      	adds	r3, #40	; 0x28
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d13f      	bne.n	8002c2e <HCD_RXQLVL_IRQHandler+0x1b4>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d03c      	beq.n	8002c2e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bca:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bd2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	333c      	adds	r3, #60	; 0x3c
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	f083 0301 	eor.w	r3, r3, #1
 8002bfc:	b2d8      	uxtb	r0, r3
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4613      	mov	r3, r2
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	333c      	adds	r3, #60	; 0x3c
 8002c0e:	4602      	mov	r2, r0
 8002c10:	701a      	strb	r2, [r3, #0]
      break;
 8002c12:	e00c      	b.n	8002c2e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	334c      	adds	r3, #76	; 0x4c
 8002c24:	2204      	movs	r2, #4
 8002c26:	701a      	strb	r2, [r3, #0]
      break;
 8002c28:	e001      	b.n	8002c2e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e000      	b.n	8002c30 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002c2e:	bf00      	nop
  }
}
 8002c30:	bf00      	nop
 8002c32:	3728      	adds	r7, #40	; 0x28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c64:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d10b      	bne.n	8002c88 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d102      	bne.n	8002c80 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f003 fda0 	bl	80067c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f043 0302 	orr.w	r3, r3, #2
 8002c86:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d132      	bne.n	8002cf8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d126      	bne.n	8002cf2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7a5b      	ldrb	r3, [r3, #9]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d113      	bne.n	8002cd4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002cb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cb6:	d106      	bne.n	8002cc6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2102      	movs	r1, #2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fdb2 	bl	8003828 <USB_InitFSLSPClkSel>
 8002cc4:	e011      	b.n	8002cea <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2101      	movs	r1, #1
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fdab 	bl	8003828 <USB_InitFSLSPClkSel>
 8002cd2:	e00a      	b.n	8002cea <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	79db      	ldrb	r3, [r3, #7]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d106      	bne.n	8002cea <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ce8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f003 fd92 	bl	8006814 <HAL_HCD_PortEnabled_Callback>
 8002cf0:	e002      	b.n	8002cf8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f003 fd9c 	bl	8006830 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d103      	bne.n	8002d0a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f043 0320 	orr.w	r3, r3, #32
 8002d08:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d10:	461a      	mov	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	6013      	str	r3, [r2, #0]
}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e267      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d075      	beq.n	8002e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d3e:	4b88      	ldr	r3, [pc, #544]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d00c      	beq.n	8002d64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d4a:	4b85      	ldr	r3, [pc, #532]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d112      	bne.n	8002d7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d56:	4b82      	ldr	r3, [pc, #520]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d62:	d10b      	bne.n	8002d7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d64:	4b7e      	ldr	r3, [pc, #504]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d05b      	beq.n	8002e28 <HAL_RCC_OscConfig+0x108>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d157      	bne.n	8002e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e242      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d84:	d106      	bne.n	8002d94 <HAL_RCC_OscConfig+0x74>
 8002d86:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a75      	ldr	r2, [pc, #468]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e01d      	b.n	8002dd0 <HAL_RCC_OscConfig+0xb0>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x98>
 8002d9e:	4b70      	ldr	r3, [pc, #448]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a6f      	ldr	r2, [pc, #444]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b6d      	ldr	r3, [pc, #436]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6c      	ldr	r2, [pc, #432]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCC_OscConfig+0xb0>
 8002db8:	4b69      	ldr	r3, [pc, #420]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a68      	ldr	r2, [pc, #416]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b66      	ldr	r3, [pc, #408]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a65      	ldr	r2, [pc, #404]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fd fb74 	bl	80004c4 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de0:	f7fd fb70 	bl	80004c4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	; 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e207      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df2:	4b5b      	ldr	r3, [pc, #364]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0xc0>
 8002dfe:	e014      	b.n	8002e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7fd fb60 	bl	80004c4 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fd fb5c 	bl	80004c4 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e1f3      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1a:	4b51      	ldr	r3, [pc, #324]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0xe8>
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d063      	beq.n	8002efe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e36:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d11c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4e:	4b44      	ldr	r3, [pc, #272]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d116      	bne.n	8002e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5a:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_RCC_OscConfig+0x152>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d001      	beq.n	8002e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e1c7      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e72:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4937      	ldr	r1, [pc, #220]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e86:	e03a      	b.n	8002efe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d020      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e90:	4b34      	ldr	r3, [pc, #208]	; (8002f64 <HAL_RCC_OscConfig+0x244>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e96:	f7fd fb15 	bl	80004c4 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9e:	f7fd fb11 	bl	80004c4 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e1a8      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb0:	4b2b      	ldr	r3, [pc, #172]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebc:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4925      	ldr	r1, [pc, #148]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	600b      	str	r3, [r1, #0]
 8002ed0:	e015      	b.n	8002efe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed2:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_RCC_OscConfig+0x244>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fd faf4 	bl	80004c4 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee0:	f7fd faf0 	bl	80004c4 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e187      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d036      	beq.n	8002f78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d016      	beq.n	8002f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <HAL_RCC_OscConfig+0x248>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fd fad4 	bl	80004c4 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f20:	f7fd fad0 	bl	80004c4 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e167      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x200>
 8002f3e:	e01b      	b.n	8002f78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f40:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_OscConfig+0x248>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f46:	f7fd fabd 	bl	80004c4 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4c:	e00e      	b.n	8002f6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f4e:	f7fd fab9 	bl	80004c4 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d907      	bls.n	8002f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e150      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
 8002f60:	40023800 	.word	0x40023800
 8002f64:	42470000 	.word	0x42470000
 8002f68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6c:	4b88      	ldr	r3, [pc, #544]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ea      	bne.n	8002f4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8097 	beq.w	80030b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8a:	4b81      	ldr	r3, [pc, #516]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10f      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	4b7d      	ldr	r3, [pc, #500]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	4a7c      	ldr	r2, [pc, #496]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa6:	4b7a      	ldr	r3, [pc, #488]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb6:	4b77      	ldr	r3, [pc, #476]	; (8003194 <HAL_RCC_OscConfig+0x474>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d118      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc2:	4b74      	ldr	r3, [pc, #464]	; (8003194 <HAL_RCC_OscConfig+0x474>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a73      	ldr	r2, [pc, #460]	; (8003194 <HAL_RCC_OscConfig+0x474>)
 8002fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fce:	f7fd fa79 	bl	80004c4 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd6:	f7fd fa75 	bl	80004c4 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e10c      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe8:	4b6a      	ldr	r3, [pc, #424]	; (8003194 <HAL_RCC_OscConfig+0x474>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0x2ea>
 8002ffc:	4b64      	ldr	r3, [pc, #400]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	4a63      	ldr	r2, [pc, #396]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6713      	str	r3, [r2, #112]	; 0x70
 8003008:	e01c      	b.n	8003044 <HAL_RCC_OscConfig+0x324>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b05      	cmp	r3, #5
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0x30c>
 8003012:	4b5f      	ldr	r3, [pc, #380]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	4a5e      	ldr	r2, [pc, #376]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003018:	f043 0304 	orr.w	r3, r3, #4
 800301c:	6713      	str	r3, [r2, #112]	; 0x70
 800301e:	4b5c      	ldr	r3, [pc, #368]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a5b      	ldr	r2, [pc, #364]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6713      	str	r3, [r2, #112]	; 0x70
 800302a:	e00b      	b.n	8003044 <HAL_RCC_OscConfig+0x324>
 800302c:	4b58      	ldr	r3, [pc, #352]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	4a57      	ldr	r2, [pc, #348]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003032:	f023 0301 	bic.w	r3, r3, #1
 8003036:	6713      	str	r3, [r2, #112]	; 0x70
 8003038:	4b55      	ldr	r3, [pc, #340]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a54      	ldr	r2, [pc, #336]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 800303e:	f023 0304 	bic.w	r3, r3, #4
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d015      	beq.n	8003078 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fd fa3a 	bl	80004c4 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003052:	e00a      	b.n	800306a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7fd fa36 	bl	80004c4 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e0cb      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306a:	4b49      	ldr	r3, [pc, #292]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0ee      	beq.n	8003054 <HAL_RCC_OscConfig+0x334>
 8003076:	e014      	b.n	80030a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003078:	f7fd fa24 	bl	80004c4 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307e:	e00a      	b.n	8003096 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7fd fa20 	bl	80004c4 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0b5      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003096:	4b3e      	ldr	r3, [pc, #248]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1ee      	bne.n	8003080 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d105      	bne.n	80030b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a8:	4b39      	ldr	r3, [pc, #228]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	4a38      	ldr	r2, [pc, #224]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 80030ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80a1 	beq.w	8003200 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030be:	4b34      	ldr	r3, [pc, #208]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d05c      	beq.n	8003184 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d141      	bne.n	8003156 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4b31      	ldr	r3, [pc, #196]	; (8003198 <HAL_RCC_OscConfig+0x478>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fd f9f4 	bl	80004c4 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fd f9f0 	bl	80004c4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e087      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	4b27      	ldr	r3, [pc, #156]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	019b      	lsls	r3, r3, #6
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	3b01      	subs	r3, #1
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	061b      	lsls	r3, r3, #24
 8003122:	491b      	ldr	r1, [pc, #108]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <HAL_RCC_OscConfig+0x478>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fd f9c9 	bl	80004c4 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003136:	f7fd f9c5 	bl	80004c4 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e05c      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003148:	4b11      	ldr	r3, [pc, #68]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x416>
 8003154:	e054      	b.n	8003200 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <HAL_RCC_OscConfig+0x478>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fd f9b2 	bl	80004c4 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003164:	f7fd f9ae 	bl	80004c4 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e045      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x444>
 8003182:	e03d      	b.n	8003200 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d107      	bne.n	800319c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e038      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
 8003190:	40023800 	.word	0x40023800
 8003194:	40007000 	.word	0x40007000
 8003198:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800319c:	4b1b      	ldr	r3, [pc, #108]	; (800320c <HAL_RCC_OscConfig+0x4ec>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d028      	beq.n	80031fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d121      	bne.n	80031fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d11a      	bne.n	80031fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031cc:	4013      	ands	r3, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d111      	bne.n	80031fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	085b      	lsrs	r3, r3, #1
 80031e4:	3b01      	subs	r3, #1
 80031e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d107      	bne.n	80031fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40023800 	.word	0x40023800

08003210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <HAL_RCC_GetHCLKFreq+0x14>)
 8003216:	681b      	ldr	r3, [r3, #0]
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000000 	.word	0x20000000

08003228 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003228:	b084      	sub	sp, #16
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	f107 001c 	add.w	r0, r7, #28
 8003236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800323a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800323e:	2b01      	cmp	r3, #1
 8003240:	d123      	bne.n	800328a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800326a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800326e:	2b01      	cmp	r3, #1
 8003270:	d105      	bne.n	800327e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f9dc 	bl	800363c <USB_CoreReset>
 8003284:	4603      	mov	r3, r0
 8003286:	73fb      	strb	r3, [r7, #15]
 8003288:	e01b      	b.n	80032c2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f9d0 	bl	800363c <USB_CoreReset>
 800329c:	4603      	mov	r3, r0
 800329e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80032a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d106      	bne.n	80032b6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	639a      	str	r2, [r3, #56]	; 0x38
 80032b4:	e005      	b.n	80032c2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80032c2:	7fbb      	ldrb	r3, [r7, #30]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d10b      	bne.n	80032e0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f043 0206 	orr.w	r2, r3, #6
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032ec:	b004      	add	sp, #16
 80032ee:	4770      	bx	lr

080032f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f043 0201 	orr.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f023 0201 	bic.w	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d115      	bne.n	8003382 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003362:	200a      	movs	r0, #10
 8003364:	f7fd f8ba 	bl	80004dc <HAL_Delay>
      ms += 10U;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	330a      	adds	r3, #10
 800336c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f956 	bl	8003620 <USB_GetMode>
 8003374:	4603      	mov	r3, r0
 8003376:	2b01      	cmp	r3, #1
 8003378:	d01e      	beq.n	80033b8 <USB_SetCurrentMode+0x84>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2bc7      	cmp	r3, #199	; 0xc7
 800337e:	d9f0      	bls.n	8003362 <USB_SetCurrentMode+0x2e>
 8003380:	e01a      	b.n	80033b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d115      	bne.n	80033b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003394:	200a      	movs	r0, #10
 8003396:	f7fd f8a1 	bl	80004dc <HAL_Delay>
      ms += 10U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	330a      	adds	r3, #10
 800339e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f93d 	bl	8003620 <USB_GetMode>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <USB_SetCurrentMode+0x84>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2bc7      	cmp	r3, #199	; 0xc7
 80033b0:	d9f0      	bls.n	8003394 <USB_SetCurrentMode+0x60>
 80033b2:	e001      	b.n	80033b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e005      	b.n	80033c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2bc8      	cmp	r3, #200	; 0xc8
 80033bc:	d101      	bne.n	80033c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	3301      	adds	r3, #1
 80033de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80033e6:	d901      	bls.n	80033ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e01b      	b.n	8003424 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	daf2      	bge.n	80033da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	019b      	lsls	r3, r3, #6
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3301      	adds	r3, #1
 8003408:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003410:	d901      	bls.n	8003416 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e006      	b.n	8003424 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b20      	cmp	r3, #32
 8003420:	d0f0      	beq.n	8003404 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3301      	adds	r3, #1
 8003440:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003448:	d901      	bls.n	800344e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e018      	b.n	8003480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	daf2      	bge.n	800343c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2210      	movs	r2, #16
 800345e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3301      	adds	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800346c:	d901      	bls.n	8003472 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e006      	b.n	8003480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b10      	cmp	r3, #16
 800347c:	d0f0      	beq.n	8003460 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800348c:	b480      	push	{r7}
 800348e:	b089      	sub	sp, #36	; 0x24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	4611      	mov	r1, r2
 8003498:	461a      	mov	r2, r3
 800349a:	460b      	mov	r3, r1
 800349c:	71fb      	strb	r3, [r7, #7]
 800349e:	4613      	mov	r3, r2
 80034a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80034aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d123      	bne.n	80034fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80034b2:	88bb      	ldrh	r3, [r7, #4]
 80034b4:	3303      	adds	r3, #3
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80034ba:	2300      	movs	r3, #0
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	e018      	b.n	80034f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	031a      	lsls	r2, r3, #12
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034cc:	461a      	mov	r2, r3
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	3301      	adds	r3, #1
 80034d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3301      	adds	r3, #1
 80034de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	3301      	adds	r3, #1
 80034e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3301      	adds	r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	3301      	adds	r3, #1
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d3e2      	bcc.n	80034c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3724      	adds	r7, #36	; 0x24
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003508:	b480      	push	{r7}
 800350a:	b08b      	sub	sp, #44	; 0x2c
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	089b      	lsrs	r3, r3, #2
 8003522:	b29b      	uxth	r3, r3
 8003524:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800352e:	2300      	movs	r3, #0
 8003530:	623b      	str	r3, [r7, #32]
 8003532:	e014      	b.n	800355e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	601a      	str	r2, [r3, #0]
    pDest++;
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	3301      	adds	r3, #1
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	3301      	adds	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	3301      	adds	r3, #1
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	3301      	adds	r3, #1
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	3301      	adds	r3, #1
 800355c:	623b      	str	r3, [r7, #32]
 800355e:	6a3a      	ldr	r2, [r7, #32]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	429a      	cmp	r2, r3
 8003564:	d3e6      	bcc.n	8003534 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003566:	8bfb      	ldrh	r3, [r7, #30]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01e      	beq.n	80035aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003576:	461a      	mov	r2, r3
 8003578:	f107 0310 	add.w	r3, r7, #16
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	b2da      	uxtb	r2, r3
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	701a      	strb	r2, [r3, #0]
      i++;
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	3301      	adds	r3, #1
 8003596:	623b      	str	r3, [r7, #32]
      pDest++;
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	3301      	adds	r3, #1
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800359e:	8bfb      	ldrh	r3, [r7, #30]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80035a4:	8bfb      	ldrh	r3, [r7, #30]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1ea      	bne.n	8003580 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	372c      	adds	r7, #44	; 0x2c
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4013      	ands	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80035d0:	68fb      	ldr	r3, [r7, #12]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80035de:	b480      	push	{r7}
 80035e0:	b085      	sub	sp, #20
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	460b      	mov	r3, r1
 80035e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80035ee:	78fb      	ldrb	r3, [r7, #3]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	4013      	ands	r3, r2
 8003610:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003612:	68bb      	ldr	r3, [r7, #8]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	f003 0301 	and.w	r3, r3, #1
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3301      	adds	r3, #1
 800364c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003654:	d901      	bls.n	800365a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e01b      	b.n	8003692 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	daf2      	bge.n	8003648 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f043 0201 	orr.w	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3301      	adds	r3, #1
 8003676:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800367e:	d901      	bls.n	8003684 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e006      	b.n	8003692 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b01      	cmp	r3, #1
 800368e:	d0f0      	beq.n	8003672 <USB_CoreReset+0x36>

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036a0:	b084      	sub	sp, #16
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80036ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036c0:	461a      	mov	r2, r3
 80036c2:	2300      	movs	r3, #0
 80036c4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d119      	bne.n	800372a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80036f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d10a      	bne.n	8003714 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800370c:	f043 0304 	orr.w	r3, r3, #4
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e014      	b.n	800373e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003722:	f023 0304 	bic.w	r3, r3, #4
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	e009      	b.n	800373e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003738:	f023 0304 	bic.w	r3, r3, #4
 800373c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800373e:	2110      	movs	r1, #16
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff fe43 	bl	80033cc <USB_FlushTxFifo>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff fe6d 	bl	8003430 <USB_FlushRxFifo>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	e015      	b.n	8003792 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4413      	add	r3, r2
 800376e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003772:	461a      	mov	r2, r3
 8003774:	f04f 33ff 	mov.w	r3, #4294967295
 8003778:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4413      	add	r3, r2
 8003782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003786:	461a      	mov	r2, r3
 8003788:	2300      	movs	r3, #0
 800378a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	3301      	adds	r3, #1
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003796:	461a      	mov	r2, r3
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4293      	cmp	r3, r2
 800379c:	d3e3      	bcc.n	8003766 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f04f 32ff 	mov.w	r2, #4294967295
 80037aa:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a18      	ldr	r2, [pc, #96]	; (8003810 <USB_HostInit+0x170>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d10b      	bne.n	80037cc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a15      	ldr	r2, [pc, #84]	; (8003814 <USB_HostInit+0x174>)
 80037c0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <USB_HostInit+0x178>)
 80037c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80037ca:	e009      	b.n	80037e0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2280      	movs	r2, #128	; 0x80
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a11      	ldr	r2, [pc, #68]	; (800381c <USB_HostInit+0x17c>)
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a11      	ldr	r2, [pc, #68]	; (8003820 <USB_HostInit+0x180>)
 80037dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80037e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d105      	bne.n	80037f4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	f043 0210 	orr.w	r2, r3, #16
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <USB_HostInit+0x184>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003800:	7dfb      	ldrb	r3, [r7, #23]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800380c:	b004      	add	sp, #16
 800380e:	4770      	bx	lr
 8003810:	40040000 	.word	0x40040000
 8003814:	01000200 	.word	0x01000200
 8003818:	00e00300 	.word	0x00e00300
 800381c:	00600080 	.word	0x00600080
 8003820:	004000e0 	.word	0x004000e0
 8003824:	a3200008 	.word	0xa3200008

08003828 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	68f9      	ldr	r1, [r7, #12]
 800385c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003860:	4313      	orrs	r3, r2
 8003862:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d107      	bne.n	800387a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003870:	461a      	mov	r2, r3
 8003872:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003876:	6053      	str	r3, [r2, #4]
 8003878:	e00c      	b.n	8003894 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d107      	bne.n	8003890 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003886:	461a      	mov	r2, r3
 8003888:	f241 7370 	movw	r3, #6000	; 0x1770
 800388c:	6053      	str	r3, [r2, #4]
 800388e:	e001      	b.n	8003894 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80038c2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80038cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80038d2:	2064      	movs	r0, #100	; 0x64
 80038d4:	f7fc fe02 	bl	80004dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80038e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80038e6:	200a      	movs	r0, #10
 80038e8:	f7fc fdf8 	bl	80004dc <HAL_Delay>

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800391a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d109      	bne.n	800393a <USB_DriveVbus+0x44>
 8003926:	78fb      	ldrb	r3, [r7, #3]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d106      	bne.n	800393a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003934:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003938:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003944:	d109      	bne.n	800395a <USB_DriveVbus+0x64>
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d106      	bne.n	800395a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003954:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003958:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	0c5b      	lsrs	r3, r3, #17
 8003986:	f003 0303 	and.w	r3, r3, #3
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	b29b      	uxth	r3, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	4608      	mov	r0, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	461a      	mov	r2, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	70fb      	strb	r3, [r7, #3]
 80039ca:	460b      	mov	r3, r1
 80039cc:	70bb      	strb	r3, [r7, #2]
 80039ce:	4613      	mov	r3, r2
 80039d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e6:	461a      	mov	r2, r3
 80039e8:	f04f 33ff 	mov.w	r3, #4294967295
 80039ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80039ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d87c      	bhi.n	8003af0 <USB_HC_Init+0x138>
 80039f6:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <USB_HC_Init+0x44>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a0d 	.word	0x08003a0d
 8003a00:	08003ab3 	.word	0x08003ab3
 8003a04:	08003a0d 	.word	0x08003a0d
 8003a08:	08003a75 	.word	0x08003a75
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f240 439d 	movw	r3, #1181	; 0x49d
 8003a1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003a20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	da10      	bge.n	8003a4a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	78fa      	ldrb	r2, [r7, #3]
 8003a38:	0151      	lsls	r1, r2, #5
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	440a      	add	r2, r1
 8003a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a46:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8003a48:	e055      	b.n	8003af6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a6f      	ldr	r2, [pc, #444]	; (8003c0c <USB_HC_Init+0x254>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d151      	bne.n	8003af6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	0151      	lsls	r1, r2, #5
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	440a      	add	r2, r1
 8003a68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a6c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a70:	60d3      	str	r3, [r2, #12]
      break;
 8003a72:	e040      	b.n	8003af6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a80:	461a      	mov	r2, r3
 8003a82:	f240 639d 	movw	r3, #1693	; 0x69d
 8003a86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003a88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da34      	bge.n	8003afa <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	0151      	lsls	r1, r2, #5
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	440a      	add	r2, r1
 8003aa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aae:	60d3      	str	r3, [r2, #12]
      }

      break;
 8003ab0:	e023      	b.n	8003afa <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f240 2325 	movw	r3, #549	; 0x225
 8003ac4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003ac6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	da17      	bge.n	8003afe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	0151      	lsls	r1, r2, #5
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	440a      	add	r2, r1
 8003ae4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ae8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8003aec:	60d3      	str	r3, [r2, #12]
      }
      break;
 8003aee:	e006      	b.n	8003afe <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	77fb      	strb	r3, [r7, #31]
      break;
 8003af4:	e004      	b.n	8003b00 <USB_HC_Init+0x148>
      break;
 8003af6:	bf00      	nop
 8003af8:	e002      	b.n	8003b00 <USB_HC_Init+0x148>
      break;
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <USB_HC_Init+0x148>
      break;
 8003afe:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	2300      	movs	r3, #0
 8003b10:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	0151      	lsls	r1, r2, #5
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	440a      	add	r2, r1
 8003b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b2c:	f043 0302 	orr.w	r3, r3, #2
 8003b30:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	2101      	movs	r1, #1
 8003b42:	fa01 f303 	lsl.w	r3, r1, r3
 8003b46:	6939      	ldr	r1, [r7, #16]
 8003b48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8003b5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	da03      	bge.n	8003b6c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8003b64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	e001      	b.n	8003b70 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fef9 	bl	8003968 <USB_GetHostSpeed>
 8003b76:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8003b78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d106      	bne.n	8003b8e <USB_HC_Init+0x1d6>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d003      	beq.n	8003b8e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003b86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	e001      	b.n	8003b92 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003b92:	787b      	ldrb	r3, [r7, #1]
 8003b94:	059b      	lsls	r3, r3, #22
 8003b96:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003b9a:	78bb      	ldrb	r3, [r7, #2]
 8003b9c:	02db      	lsls	r3, r3, #11
 8003b9e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003ba2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003ba4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ba8:	049b      	lsls	r3, r3, #18
 8003baa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003bae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8003bb0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003bb6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	0151      	lsls	r1, r2, #5
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	440a      	add	r2, r1
 8003bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8003bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003bd0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8003bd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d003      	beq.n	8003be2 <USB_HC_Init+0x22a>
 8003bda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10f      	bne.n	8003c02 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	0151      	lsls	r1, r2, #5
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	440a      	add	r2, r1
 8003bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c00:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8003c02:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3720      	adds	r7, #32
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40040000 	.word	0x40040000

08003c10 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08c      	sub	sp, #48	; 0x30
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	785b      	ldrb	r3, [r3, #1]
 8003c26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8003c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c2c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4a5d      	ldr	r2, [pc, #372]	; (8003da8 <USB_HC_StartXfer+0x198>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d12f      	bne.n	8003c96 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d11c      	bne.n	8003c76 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	7c9b      	ldrb	r3, [r3, #18]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <USB_HC_StartXfer+0x3c>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	7c9b      	ldrb	r3, [r3, #18]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d124      	bne.n	8003c96 <USB_HC_StartXfer+0x86>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	799b      	ldrb	r3, [r3, #6]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d120      	bne.n	8003c96 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	0151      	lsls	r1, r2, #5
 8003c66:	6a3a      	ldr	r2, [r7, #32]
 8003c68:	440a      	add	r2, r1
 8003c6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	60d3      	str	r3, [r2, #12]
 8003c74:	e00f      	b.n	8003c96 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	791b      	ldrb	r3, [r3, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <USB_HC_StartXfer+0x86>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	795b      	ldrb	r3, [r3, #5]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d107      	bne.n	8003c96 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fb6b 	bl	8004368 <USB_DoPing>
        return HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	e232      	b.n	80040fc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	799b      	ldrb	r3, [r3, #6]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d158      	bne.n	8003d50 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	78db      	ldrb	r3, [r3, #3]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003caa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	8a92      	ldrh	r2, [r2, #20]
 8003cb0:	fb03 f202 	mul.w	r2, r3, r2
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	61da      	str	r2, [r3, #28]
 8003cb8:	e07c      	b.n	8003db4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	7c9b      	ldrb	r3, [r3, #18]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d130      	bne.n	8003d24 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	2bbc      	cmp	r3, #188	; 0xbc
 8003cc8:	d918      	bls.n	8003cfc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	8a9b      	ldrh	r3, [r3, #20]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d003      	beq.n	8003cec <USB_HC_StartXfer+0xdc>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d103      	bne.n	8003cf4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	e05f      	b.n	8003db4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	e05b      	b.n	8003db4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	6a1a      	ldr	r2, [r3, #32]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d007      	beq.n	8003d1c <USB_HC_StartXfer+0x10c>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d003      	beq.n	8003d1c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2204      	movs	r2, #4
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	e04b      	b.n	8003db4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2203      	movs	r2, #3
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	e047      	b.n	8003db4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d10d      	bne.n	8003d46 <USB_HC_StartXfer+0x136>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	8a92      	ldrh	r2, [r2, #20]
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d907      	bls.n	8003d46 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003d36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	8a92      	ldrh	r2, [r2, #20]
 8003d3c:	fb03 f202 	mul.w	r2, r3, r2
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	61da      	str	r2, [r3, #28]
 8003d44:	e036      	b.n	8003db4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6a1a      	ldr	r2, [r3, #32]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	61da      	str	r2, [r3, #28]
 8003d4e:	e031      	b.n	8003db4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d018      	beq.n	8003d8a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	8a92      	ldrh	r2, [r2, #20]
 8003d60:	4413      	add	r3, r2
 8003d62:	3b01      	subs	r3, #1
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	8a92      	ldrh	r2, [r2, #20]
 8003d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d6c:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8003d6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d70:	8b7b      	ldrh	r3, [r7, #26]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d90b      	bls.n	8003d8e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8003d76:	8b7b      	ldrh	r3, [r7, #26]
 8003d78:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003d7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	8a92      	ldrh	r2, [r2, #20]
 8003d80:	fb03 f202 	mul.w	r2, r3, r2
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	61da      	str	r2, [r3, #28]
 8003d88:	e001      	b.n	8003d8e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	78db      	ldrb	r3, [r3, #3]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003d96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	8a92      	ldrh	r2, [r2, #20]
 8003d9c:	fb03 f202 	mul.w	r2, r3, r2
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	61da      	str	r2, [r3, #28]
 8003da4:	e006      	b.n	8003db4 <USB_HC_StartXfer+0x1a4>
 8003da6:	bf00      	nop
 8003da8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	6a1a      	ldr	r2, [r3, #32]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003dbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003dbe:	04d9      	lsls	r1, r3, #19
 8003dc0:	4ba3      	ldr	r3, [pc, #652]	; (8004050 <USB_HC_StartXfer+0x440>)
 8003dc2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003dc4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	7d9b      	ldrb	r3, [r3, #22]
 8003dca:	075b      	lsls	r3, r3, #29
 8003dcc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003dd0:	69f9      	ldr	r1, [r7, #28]
 8003dd2:	0148      	lsls	r0, r1, #5
 8003dd4:	6a39      	ldr	r1, [r7, #32]
 8003dd6:	4401      	add	r1, r0
 8003dd8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003ddc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003dde:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	6999      	ldr	r1, [r3, #24]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df6:	460a      	mov	r2, r1
 8003df8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	0151      	lsls	r1, r2, #5
 8003e24:	6a3a      	ldr	r2, [r7, #32]
 8003e26:	440a      	add	r2, r1
 8003e28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003e30:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	7e7b      	ldrb	r3, [r7, #25]
 8003e42:	075b      	lsls	r3, r3, #29
 8003e44:	69f9      	ldr	r1, [r7, #28]
 8003e46:	0148      	lsls	r0, r1, #5
 8003e48:	6a39      	ldr	r1, [r7, #32]
 8003e4a:	4401      	add	r1, r0
 8003e4c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	799b      	ldrb	r3, [r3, #6]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	f040 80c3 	bne.w	8003fe4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	7c5b      	ldrb	r3, [r3, #17]
 8003e62:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	0151      	lsls	r1, r2, #5
 8003e6e:	6a3a      	ldr	r2, [r7, #32]
 8003e70:	440a      	add	r2, r1
 8003e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8003e76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8003e7a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	0151      	lsls	r1, r2, #5
 8003e8e:	6a3a      	ldr	r2, [r7, #32]
 8003e90:	440a      	add	r2, r1
 8003e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	79db      	ldrb	r3, [r3, #7]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d123      	bne.n	8003eec <USB_HC_StartXfer+0x2dc>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	78db      	ldrb	r3, [r3, #3]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d11f      	bne.n	8003eec <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	0151      	lsls	r1, r2, #5
 8003ebe:	6a3a      	ldr	r2, [r7, #32]
 8003ec0:	440a      	add	r2, r1
 8003ec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eca:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	0151      	lsls	r1, r2, #5
 8003ede:	6a3a      	ldr	r2, [r7, #32]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eea:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	7c9b      	ldrb	r3, [r3, #18]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d003      	beq.n	8003efc <USB_HC_StartXfer+0x2ec>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	7c9b      	ldrb	r3, [r3, #18]
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d117      	bne.n	8003f2c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d113      	bne.n	8003f2c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	78db      	ldrb	r3, [r3, #3]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d10f      	bne.n	8003f2c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	0151      	lsls	r1, r2, #5
 8003f1e:	6a3a      	ldr	r2, [r7, #32]
 8003f20:	440a      	add	r2, r1
 8003f22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	7c9b      	ldrb	r3, [r3, #18]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d162      	bne.n	8003ffa <USB_HC_StartXfer+0x3ea>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	78db      	ldrb	r3, [r3, #3]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d15e      	bne.n	8003ffa <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d858      	bhi.n	8003ff8 <USB_HC_StartXfer+0x3e8>
 8003f46:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <USB_HC_StartXfer+0x33c>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f5d 	.word	0x08003f5d
 8003f50:	08003f7f 	.word	0x08003f7f
 8003f54:	08003fa1 	.word	0x08003fa1
 8003f58:	08003fc3 	.word	0x08003fc3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	0151      	lsls	r1, r2, #5
 8003f6e:	6a3a      	ldr	r2, [r7, #32]
 8003f70:	440a      	add	r2, r1
 8003f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7a:	6053      	str	r3, [r2, #4]
          break;
 8003f7c:	e03d      	b.n	8003ffa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	0151      	lsls	r1, r2, #5
 8003f90:	6a3a      	ldr	r2, [r7, #32]
 8003f92:	440a      	add	r2, r1
 8003f94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f98:	f043 030e 	orr.w	r3, r3, #14
 8003f9c:	6053      	str	r3, [r2, #4]
          break;
 8003f9e:	e02c      	b.n	8003ffa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	0151      	lsls	r1, r2, #5
 8003fb2:	6a3a      	ldr	r2, [r7, #32]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fbe:	6053      	str	r3, [r2, #4]
          break;
 8003fc0:	e01b      	b.n	8003ffa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	0151      	lsls	r1, r2, #5
 8003fd4:	6a3a      	ldr	r2, [r7, #32]
 8003fd6:	440a      	add	r2, r1
 8003fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fe0:	6053      	str	r3, [r2, #4]
          break;
 8003fe2:	e00a      	b.n	8003ffa <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	6053      	str	r3, [r2, #4]
 8003ff6:	e000      	b.n	8003ffa <USB_HC_StartXfer+0x3ea>
          break;
 8003ff8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	4413      	add	r3, r2
 8004002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004010:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	78db      	ldrb	r3, [r3, #3]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d004      	beq.n	8004024 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	e003      	b.n	800402c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800402a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004032:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004040:	461a      	mov	r2, r3
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	e055      	b.n	80040fc <USB_HC_StartXfer+0x4ec>
 8004050:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	78db      	ldrb	r3, [r3, #3]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d14e      	bne.n	80040fa <USB_HC_StartXfer+0x4ea>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d04a      	beq.n	80040fa <USB_HC_StartXfer+0x4ea>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	79db      	ldrb	r3, [r3, #7]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d146      	bne.n	80040fa <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	7c9b      	ldrb	r3, [r3, #18]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d831      	bhi.n	80040d8 <USB_HC_StartXfer+0x4c8>
 8004074:	a201      	add	r2, pc, #4	; (adr r2, 800407c <USB_HC_StartXfer+0x46c>)
 8004076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407a:	bf00      	nop
 800407c:	0800408d 	.word	0x0800408d
 8004080:	080040b1 	.word	0x080040b1
 8004084:	0800408d 	.word	0x0800408d
 8004088:	080040b1 	.word	0x080040b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	3303      	adds	r3, #3
 8004092:	089b      	lsrs	r3, r3, #2
 8004094:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004096:	8afa      	ldrh	r2, [r7, #22]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	b29b      	uxth	r3, r3
 800409e:	429a      	cmp	r2, r3
 80040a0:	d91c      	bls.n	80040dc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f043 0220 	orr.w	r2, r3, #32
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80040ae:	e015      	b.n	80040dc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	3303      	adds	r3, #3
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80040ba:	8afa      	ldrh	r2, [r7, #22]
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d90a      	bls.n	80040e0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80040d6:	e003      	b.n	80040e0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80040d8:	bf00      	nop
 80040da:	e002      	b.n	80040e2 <USB_HC_StartXfer+0x4d2>
        break;
 80040dc:	bf00      	nop
 80040de:	e000      	b.n	80040e2 <USB_HC_StartXfer+0x4d2>
        break;
 80040e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	6999      	ldr	r1, [r3, #24]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	785a      	ldrb	r2, [r3, #1]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2000      	movs	r0, #0
 80040f2:	9000      	str	r0, [sp, #0]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f7ff f9c9 	bl	800348c <USB_WritePacket>
  }

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3728      	adds	r7, #40	; 0x28
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	b29b      	uxth	r3, r3
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004126:	b480      	push	{r7}
 8004128:	b089      	sub	sp, #36	; 0x24
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004136:	78fb      	ldrb	r3, [r7, #3]
 8004138:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0c9b      	lsrs	r3, r3, #18
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	0fdb      	lsrs	r3, r3, #31
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	4413      	add	r3, r2
 8004172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	0fdb      	lsrs	r3, r3, #31
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b20      	cmp	r3, #32
 800418a:	d10d      	bne.n	80041a8 <USB_HC_Halt+0x82>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <USB_HC_Halt+0x82>
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d002      	beq.n	80041a4 <USB_HC_Halt+0x7e>
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d101      	bne.n	80041a8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	e0d8      	b.n	800435a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <USB_HC_Halt+0x8e>
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d173      	bne.n	800429c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	0151      	lsls	r1, r2, #5
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	440a      	add	r2, r1
 80041ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041d2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d14a      	bne.n	8004276 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d133      	bne.n	8004254 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	0151      	lsls	r1, r2, #5
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	440a      	add	r2, r1
 8004202:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004206:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800420a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	4413      	add	r3, r2
 8004214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	0151      	lsls	r1, r2, #5
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	440a      	add	r2, r1
 8004222:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004226:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800422a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	3301      	adds	r3, #1
 8004230:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004238:	d82e      	bhi.n	8004298 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800424c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004250:	d0ec      	beq.n	800422c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004252:	e081      	b.n	8004358 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	4413      	add	r3, r2
 800425c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	0151      	lsls	r1, r2, #5
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	440a      	add	r2, r1
 800426a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800426e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004272:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004274:	e070      	b.n	8004358 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	440a      	add	r2, r1
 800428c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004290:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004294:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004296:	e05f      	b.n	8004358 <USB_HC_Halt+0x232>
            break;
 8004298:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800429a:	e05d      	b.n	8004358 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	0151      	lsls	r1, r2, #5
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	440a      	add	r2, r1
 80042b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042ba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d133      	bne.n	8004334 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	0151      	lsls	r1, r2, #5
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	440a      	add	r2, r1
 80042e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	0151      	lsls	r1, r2, #5
 80042fe:	69fa      	ldr	r2, [r7, #28]
 8004300:	440a      	add	r2, r1
 8004302:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800430a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	3301      	adds	r3, #1
 8004310:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004318:	d81d      	bhi.n	8004356 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	4413      	add	r3, r2
 8004322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800432c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004330:	d0ec      	beq.n	800430c <USB_HC_Halt+0x1e6>
 8004332:	e011      	b.n	8004358 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	4413      	add	r3, r2
 800433c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	0151      	lsls	r1, r2, #5
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	440a      	add	r2, r1
 800434a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800434e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	e000      	b.n	8004358 <USB_HC_Halt+0x232>
          break;
 8004356:	bf00      	nop
    }
  }

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3724      	adds	r7, #36	; 0x24
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800437c:	2301      	movs	r3, #1
 800437e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	04da      	lsls	r2, r3, #19
 8004384:	4b15      	ldr	r3, [pc, #84]	; (80043dc <USB_DoPing+0x74>)
 8004386:	4013      	ands	r3, r2
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	0151      	lsls	r1, r2, #5
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	440a      	add	r2, r1
 8004390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004398:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043b0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043b8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c6:	461a      	mov	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	1ff80000 	.word	0x1ff80000

080043e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7fe ff8c 	bl	8003312 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043fa:	2110      	movs	r1, #16
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fe ffe5 	bl	80033cc <USB_FlushTxFifo>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff f80f 	bl	8003430 <USB_FlushRxFifo>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800441c:	2300      	movs	r3, #0
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	e01f      	b.n	8004462 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	4413      	add	r3, r2
 800442a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004438:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004440:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004448:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4413      	add	r3, r2
 8004452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004456:	461a      	mov	r2, r3
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	3301      	adds	r3, #1
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b0f      	cmp	r3, #15
 8004466:	d9dc      	bls.n	8004422 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004468:	2300      	movs	r3, #0
 800446a:	61bb      	str	r3, [r7, #24]
 800446c:	e034      	b.n	80044d8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	4413      	add	r3, r2
 8004476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004484:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800448c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004494:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	4413      	add	r3, r2
 800449e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a2:	461a      	mov	r2, r3
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3301      	adds	r3, #1
 80044ac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044b4:	d80c      	bhi.n	80044d0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044cc:	d0ec      	beq.n	80044a8 <USB_StopHost+0xc8>
 80044ce:	e000      	b.n	80044d2 <USB_StopHost+0xf2>
        break;
 80044d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	3301      	adds	r3, #1
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b0f      	cmp	r3, #15
 80044dc:	d9c7      	bls.n	800446e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044e4:	461a      	mov	r2, r3
 80044e6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f04f 32ff 	mov.w	r2, #4294967295
 80044f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fe fefb 	bl	80032f0 <USB_EnableGlobalInt>

  return ret;
 80044fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3720      	adds	r7, #32
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b089      	sub	sp, #36	; 0x24
 8004508:	af04      	add	r7, sp, #16
 800450a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800450c:	2301      	movs	r3, #1
 800450e:	2202      	movs	r2, #2
 8004510:	2102      	movs	r1, #2
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fc85 	bl	8004e22 <USBH_FindInterface>
 8004518:	4603      	mov	r3, r0
 800451a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2bff      	cmp	r3, #255	; 0xff
 8004520:	d002      	beq.n	8004528 <USBH_CDC_InterfaceInit+0x24>
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d901      	bls.n	800452c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004528:	2302      	movs	r3, #2
 800452a:	e13d      	b.n	80047a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	4619      	mov	r1, r3
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fc5a 	bl	8004dea <USBH_SelectInterface>
 8004536:	4603      	mov	r3, r0
 8004538:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800453a:	7bbb      	ldrb	r3, [r7, #14]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8004540:	2302      	movs	r3, #2
 8004542:	e131      	b.n	80047a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800454a:	2050      	movs	r0, #80	; 0x50
 800454c:	f002 fb74 	bl	8006c38 <malloc>
 8004550:	4603      	mov	r3, r0
 8004552:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8004564:	2302      	movs	r3, #2
 8004566:	e11f      	b.n	80047a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8004568:	2250      	movs	r2, #80	; 0x50
 800456a:	2100      	movs	r1, #0
 800456c:	68b8      	ldr	r0, [r7, #8]
 800456e:	f002 fc1f 	bl	8006db0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	211a      	movs	r1, #26
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	4413      	add	r3, r2
 800457e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	b25b      	sxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	da15      	bge.n	80045b6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	211a      	movs	r1, #26
 8004590:	fb01 f303 	mul.w	r3, r1, r3
 8004594:	4413      	add	r3, r2
 8004596:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800459a:	781a      	ldrb	r2, [r3, #0]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	211a      	movs	r1, #26
 80045a6:	fb01 f303 	mul.w	r3, r1, r3
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80045b0:	881a      	ldrh	r2, [r3, #0]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	785b      	ldrb	r3, [r3, #1]
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f001 ffce 	bl	800655e <USBH_AllocPipe>
 80045c2:	4603      	mov	r3, r0
 80045c4:	461a      	mov	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	7819      	ldrb	r1, [r3, #0]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	7858      	ldrb	r0, [r3, #1]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	8952      	ldrh	r2, [r2, #10]
 80045e2:	9202      	str	r2, [sp, #8]
 80045e4:	2203      	movs	r2, #3
 80045e6:	9201      	str	r2, [sp, #4]
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	4623      	mov	r3, r4
 80045ec:	4602      	mov	r2, r0
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f001 ff86 	bl	8006500 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2200      	movs	r2, #0
 80045fa:	4619      	mov	r1, r3
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f002 fa95 	bl	8006b2c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8004602:	2300      	movs	r3, #0
 8004604:	2200      	movs	r2, #0
 8004606:	210a      	movs	r1, #10
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fc0a 	bl	8004e22 <USBH_FindInterface>
 800460e:	4603      	mov	r3, r0
 8004610:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2bff      	cmp	r3, #255	; 0xff
 8004616:	d002      	beq.n	800461e <USBH_CDC_InterfaceInit+0x11a>
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d901      	bls.n	8004622 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800461e:	2302      	movs	r3, #2
 8004620:	e0c2      	b.n	80047a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	211a      	movs	r1, #26
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	4413      	add	r3, r2
 800462e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	b25b      	sxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	da16      	bge.n	8004668 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	211a      	movs	r1, #26
 8004640:	fb01 f303 	mul.w	r3, r1, r3
 8004644:	4413      	add	r3, r2
 8004646:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800464a:	781a      	ldrb	r2, [r3, #0]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	211a      	movs	r1, #26
 8004656:	fb01 f303 	mul.w	r3, r1, r3
 800465a:	4413      	add	r3, r2
 800465c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004660:	881a      	ldrh	r2, [r3, #0]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	835a      	strh	r2, [r3, #26]
 8004666:	e015      	b.n	8004694 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	211a      	movs	r1, #26
 800466e:	fb01 f303 	mul.w	r3, r1, r3
 8004672:	4413      	add	r3, r2
 8004674:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	211a      	movs	r1, #26
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	4413      	add	r3, r2
 800468a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800468e:	881a      	ldrh	r2, [r3, #0]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	211a      	movs	r1, #26
 800469a:	fb01 f303 	mul.w	r3, r1, r3
 800469e:	4413      	add	r3, r2
 80046a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	b25b      	sxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	da16      	bge.n	80046da <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	211a      	movs	r1, #26
 80046b2:	fb01 f303 	mul.w	r3, r1, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80046bc:	781a      	ldrb	r2, [r3, #0]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	211a      	movs	r1, #26
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80046d2:	881a      	ldrh	r2, [r3, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	835a      	strh	r2, [r3, #26]
 80046d8:	e015      	b.n	8004706 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	211a      	movs	r1, #26
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	4413      	add	r3, r2
 80046e6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80046ea:	781a      	ldrb	r2, [r3, #0]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	211a      	movs	r1, #26
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8004700:	881a      	ldrh	r2, [r3, #0]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	7b9b      	ldrb	r3, [r3, #14]
 800470a:	4619      	mov	r1, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f001 ff26 	bl	800655e <USBH_AllocPipe>
 8004712:	4603      	mov	r3, r0
 8004714:	461a      	mov	r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	7bdb      	ldrb	r3, [r3, #15]
 800471e:	4619      	mov	r1, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f001 ff1c 	bl	800655e <USBH_AllocPipe>
 8004726:	4603      	mov	r3, r0
 8004728:	461a      	mov	r2, r3
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	7b59      	ldrb	r1, [r3, #13]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	7b98      	ldrb	r0, [r3, #14]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	8b12      	ldrh	r2, [r2, #24]
 8004746:	9202      	str	r2, [sp, #8]
 8004748:	2202      	movs	r2, #2
 800474a:	9201      	str	r2, [sp, #4]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	4623      	mov	r3, r4
 8004750:	4602      	mov	r2, r0
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f001 fed4 	bl	8006500 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	7b19      	ldrb	r1, [r3, #12]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	7bd8      	ldrb	r0, [r3, #15]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	8b52      	ldrh	r2, [r2, #26]
 8004770:	9202      	str	r2, [sp, #8]
 8004772:	2202      	movs	r2, #2
 8004774:	9201      	str	r2, [sp, #4]
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	4623      	mov	r3, r4
 800477a:	4602      	mov	r2, r0
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f001 febf 	bl	8006500 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	7b5b      	ldrb	r3, [r3, #13]
 800478e:	2200      	movs	r2, #0
 8004790:	4619      	mov	r1, r3
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f002 f9ca 	bl	8006b2c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	7b1b      	ldrb	r3, [r3, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	4619      	mov	r1, r3
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f002 f9c3 	bl	8006b2c <USBH_LL_SetToggle>

  return USBH_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd90      	pop	{r4, r7, pc}

080047b0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00e      	beq.n	80047e8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	4619      	mov	r1, r3
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f001 feb4 	bl	800653e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	4619      	mov	r1, r3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f001 fedf 	bl	80065a0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	7b1b      	ldrb	r3, [r3, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00e      	beq.n	800480e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	7b1b      	ldrb	r3, [r3, #12]
 80047f4:	4619      	mov	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f001 fea1 	bl	800653e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	7b1b      	ldrb	r3, [r3, #12]
 8004800:	4619      	mov	r1, r3
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f001 fecc 	bl	80065a0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	7b5b      	ldrb	r3, [r3, #13]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00e      	beq.n	8004834 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	7b5b      	ldrb	r3, [r3, #13]
 800481a:	4619      	mov	r1, r3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f001 fe8e 	bl	800653e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	7b5b      	ldrb	r3, [r3, #13]
 8004826:	4619      	mov	r1, r3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f001 feb9 	bl	80065a0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00b      	beq.n	8004858 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	4618      	mov	r0, r3
 800484a:	f002 f9fd 	bl	8006c48 <free>
    phost->pActiveClass->pData = 0U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004854:	2200      	movs	r2, #0
 8004856:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3340      	adds	r3, #64	; 0x40
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f8b1 	bl	80049e2 <GetLineCoding>
 8004880:	4603      	mov	r3, r0
 8004882:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8004884:	7afb      	ldrb	r3, [r7, #11]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d105      	bne.n	8004896 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004890:	2102      	movs	r1, #2
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8004896:	7afb      	ldrb	r3, [r7, #11]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80048a8:	2301      	movs	r3, #1
 80048aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d877      	bhi.n	80049b4 <USBH_CDC_Process+0x114>
 80048c4:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <USBH_CDC_Process+0x2c>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048e1 	.word	0x080048e1
 80048d0:	080048e7 	.word	0x080048e7
 80048d4:	08004917 	.word	0x08004917
 80048d8:	0800498b 	.word	0x0800498b
 80048dc:	08004999 	.word	0x08004999
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	73fb      	strb	r3, [r7, #15]
      break;
 80048e4:	e06d      	b.n	80049c2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f897 	bl	8004a20 <SetLineCoding>
 80048f2:	4603      	mov	r3, r0
 80048f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80048f6:	7bbb      	ldrb	r3, [r7, #14]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d104      	bne.n	8004906 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004904:	e058      	b.n	80049b8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8004906:	7bbb      	ldrb	r3, [r7, #14]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d055      	beq.n	80049b8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2204      	movs	r2, #4
 8004910:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004914:	e050      	b.n	80049b8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	3340      	adds	r3, #64	; 0x40
 800491a:	4619      	mov	r1, r3
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f860 	bl	80049e2 <GetLineCoding>
 8004922:	4603      	mov	r3, r0
 8004924:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004926:	7bbb      	ldrb	r3, [r7, #14]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d126      	bne.n	800497a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493e:	791b      	ldrb	r3, [r3, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	d13b      	bne.n	80049bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004950:	429a      	cmp	r2, r3
 8004952:	d133      	bne.n	80049bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004960:	429a      	cmp	r2, r3
 8004962:	d12b      	bne.n	80049bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800496c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800496e:	429a      	cmp	r2, r3
 8004970:	d124      	bne.n	80049bc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f958 	bl	8004c28 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004978:	e020      	b.n	80049bc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800497a:	7bbb      	ldrb	r3, [r7, #14]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d01d      	beq.n	80049bc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2204      	movs	r2, #4
 8004984:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004988:	e018      	b.n	80049bc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f867 	bl	8004a5e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f8da 	bl	8004b4a <CDC_ProcessReception>
      break;
 8004996:	e014      	b.n	80049c2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8004998:	2100      	movs	r1, #0
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f001 f822 	bl	80059e4 <USBH_ClrFeature>
 80049a0:	4603      	mov	r3, r0
 80049a2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80049a4:	7bbb      	ldrb	r3, [r7, #14]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80049b2:	e005      	b.n	80049c0 <USBH_CDC_Process+0x120>

    default:
      break;
 80049b4:	bf00      	nop
 80049b6:	e004      	b.n	80049c2 <USBH_CDC_Process+0x122>
      break;
 80049b8:	bf00      	nop
 80049ba:	e002      	b.n	80049c2 <USBH_CDC_Process+0x122>
      break;
 80049bc:	bf00      	nop
 80049be:	e000      	b.n	80049c2 <USBH_CDC_Process+0x122>
      break;
 80049c0:	bf00      	nop

  }

  return status;
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	22a1      	movs	r2, #161	; 0xa1
 80049f0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2221      	movs	r2, #33	; 0x21
 80049f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2207      	movs	r2, #7
 8004a08:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2207      	movs	r2, #7
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f001 fb23 	bl	800605c <USBH_CtlReq>
 8004a16:	4603      	mov	r3, r0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2221      	movs	r2, #33	; 0x21
 8004a2e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2207      	movs	r2, #7
 8004a46:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2207      	movs	r2, #7
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f001 fb04 	bl	800605c <USBH_CtlReq>
 8004a54:	4603      	mov	r3, r0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af02      	add	r7, sp, #8
 8004a64:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d002      	beq.n	8004a84 <CDC_ProcessTransmission+0x26>
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d023      	beq.n	8004aca <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8004a82:	e05e      	b.n	8004b42 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	8b12      	ldrh	r2, [r2, #24]
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d90b      	bls.n	8004aa8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	69d9      	ldr	r1, [r3, #28]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8b1a      	ldrh	r2, [r3, #24]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	7b5b      	ldrb	r3, [r3, #13]
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	9000      	str	r0, [sp, #0]
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f001 fcea 	bl	800647a <USBH_BulkSendData>
 8004aa6:	e00b      	b.n	8004ac0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	7b5b      	ldrb	r3, [r3, #13]
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	9000      	str	r0, [sp, #0]
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f001 fcdd 	bl	800647a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004ac8:	e03b      	b.n	8004b42 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	7b5b      	ldrb	r3, [r3, #13]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f002 f801 	bl	8006ad8 <USBH_LL_GetURBState>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8004ada:	7afb      	ldrb	r3, [r7, #11]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d128      	bne.n	8004b32 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	8b12      	ldrh	r2, [r2, #24]
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d90e      	bls.n	8004b0a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	8b12      	ldrh	r2, [r2, #24]
 8004af4:	1a9a      	subs	r2, r3, r2
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	8b12      	ldrh	r2, [r2, #24]
 8004b02:	441a      	add	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	61da      	str	r2, [r3, #28]
 8004b08:	e002      	b.n	8004b10 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004b20:	e00e      	b.n	8004b40 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f868 	bl	8004c00 <USBH_CDC_TransmitCallback>
      break;
 8004b30:	e006      	b.n	8004b40 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8004b32:	7afb      	ldrb	r3, [r7, #11]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d103      	bne.n	8004b40 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004b40:	bf00      	nop
  }
}
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b086      	sub	sp, #24
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d002      	beq.n	8004b70 <CDC_ProcessReception+0x26>
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d00e      	beq.n	8004b8c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8004b6e:	e043      	b.n	8004bf8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	6a19      	ldr	r1, [r3, #32]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	8b5a      	ldrh	r2, [r3, #26]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	7b1b      	ldrb	r3, [r3, #12]
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f001 fca1 	bl	80064c4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2204      	movs	r2, #4
 8004b86:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004b8a:	e035      	b.n	8004bf8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	7b1b      	ldrb	r3, [r3, #12]
 8004b90:	4619      	mov	r1, r3
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f001 ffa0 	bl	8006ad8 <USBH_LL_GetURBState>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8004b9c:	7cfb      	ldrb	r3, [r7, #19]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d129      	bne.n	8004bf6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	7b1b      	ldrb	r3, [r3, #12]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f001 ff03 	bl	80069b4 <USBH_LL_GetLastXferSize>
 8004bae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d016      	beq.n	8004be8 <CDC_ProcessReception+0x9e>
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	8b5b      	ldrh	r3, [r3, #26]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d910      	bls.n	8004be8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad2      	subs	r2, r2, r3
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	6a1a      	ldr	r2, [r3, #32]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	441a      	add	r2, r3
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2203      	movs	r2, #3
 8004be2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004be6:	e006      	b.n	8004bf6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f80f 	bl	8004c14 <USBH_CDC_ReceiveCallback>
      break;
 8004bf6:	bf00      	nop
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	4613      	mov	r3, r2
 8004c48:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8004c50:	2302      	movs	r3, #2
 8004c52:	e029      	b.n	8004ca8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	79fa      	ldrb	r2, [r7, #7]
 8004c58:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f81f 	bl	8004cb0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f001 fdd3 	bl	800684c <USBH_LL_Init>

  return USBH_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e009      	b.n	8004cd6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	33e0      	adds	r3, #224	; 0xe0
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	2200      	movs	r2, #0
 8004cce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b0f      	cmp	r3, #15
 8004cda:	d9f2      	bls.n	8004cc2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	e009      	b.n	8004cf6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cfc:	d3f1      	bcc.n	8004ce2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2240      	movs	r2, #64	; 0x40
 8004d22:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	331c      	adds	r3, #28
 8004d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f002 f82b 	bl	8006db0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d64:	2100      	movs	r1, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	f002 f822 	bl	8006db0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f203 3326 	addw	r3, r3, #806	; 0x326
 8004d72:	2212      	movs	r2, #18
 8004d74:	2100      	movs	r1, #0
 8004d76:	4618      	mov	r0, r3
 8004d78:	f002 f81a 	bl	8006db0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8004d82:	223e      	movs	r2, #62	; 0x3e
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f002 f812 	bl	8006db0 <memset>

  return USBH_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b085      	sub	sp, #20
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10e      	bne.n	8004dd2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004dba:	1c59      	adds	r1, r3, #1
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	33de      	adds	r3, #222	; 0xde
 8004dc6:	6839      	ldr	r1, [r7, #0]
 8004dc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	73fb      	strb	r3, [r7, #15]
 8004dd0:	e004      	b.n	8004ddc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	73fb      	strb	r3, [r7, #15]
 8004dd6:	e001      	b.n	8004ddc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b085      	sub	sp, #20
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	460b      	mov	r3, r1
 8004df4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8004e00:	78fa      	ldrb	r2, [r7, #3]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d204      	bcs.n	8004e10 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8004e0e:	e001      	b.n	8004e14 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8004e10:	2302      	movs	r3, #2
 8004e12:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b087      	sub	sp, #28
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	4608      	mov	r0, r1
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	461a      	mov	r2, r3
 8004e30:	4603      	mov	r3, r0
 8004e32:	70fb      	strb	r3, [r7, #3]
 8004e34:	460b      	mov	r3, r1
 8004e36:	70bb      	strb	r3, [r7, #2]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8004e4a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004e4c:	e025      	b.n	8004e9a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	221a      	movs	r2, #26
 8004e52:	fb02 f303 	mul.w	r3, r2, r3
 8004e56:	3308      	adds	r3, #8
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3302      	adds	r3, #2
 8004e5e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	795b      	ldrb	r3, [r3, #5]
 8004e64:	78fa      	ldrb	r2, [r7, #3]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d002      	beq.n	8004e70 <USBH_FindInterface+0x4e>
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	2bff      	cmp	r3, #255	; 0xff
 8004e6e:	d111      	bne.n	8004e94 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004e74:	78ba      	ldrb	r2, [r7, #2]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d002      	beq.n	8004e80 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004e7a:	78bb      	ldrb	r3, [r7, #2]
 8004e7c:	2bff      	cmp	r3, #255	; 0xff
 8004e7e:	d109      	bne.n	8004e94 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004e84:	787a      	ldrb	r2, [r7, #1]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d002      	beq.n	8004e90 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004e8a:	787b      	ldrb	r3, [r7, #1]
 8004e8c:	2bff      	cmp	r3, #255	; 0xff
 8004e8e:	d101      	bne.n	8004e94 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
 8004e92:	e006      	b.n	8004ea2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	3301      	adds	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004e9a:	7dfb      	ldrb	r3, [r7, #23]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d9d6      	bls.n	8004e4e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8004ea0:	23ff      	movs	r3, #255	; 0xff
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f001 fd04 	bl	80068c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f001 fe1d 	bl	8006afe <USBH_LL_DriverVBUS>

  return USBH_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af04      	add	r7, sp, #16
 8004ed6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004ed8:	2302      	movs	r3, #2
 8004eda:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d102      	bne.n	8004ef2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2203      	movs	r2, #3
 8004ef0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b0b      	cmp	r3, #11
 8004efa:	f200 81be 	bhi.w	800527a <USBH_Process+0x3aa>
 8004efe:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <USBH_Process+0x34>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f35 	.word	0x08004f35
 8004f08:	08004f67 	.word	0x08004f67
 8004f0c:	08004fcf 	.word	0x08004fcf
 8004f10:	08005215 	.word	0x08005215
 8004f14:	0800527b 	.word	0x0800527b
 8004f18:	08005073 	.word	0x08005073
 8004f1c:	080051bb 	.word	0x080051bb
 8004f20:	080050a9 	.word	0x080050a9
 8004f24:	080050c9 	.word	0x080050c9
 8004f28:	080050e9 	.word	0x080050e9
 8004f2c:	0800512d 	.word	0x0800512d
 8004f30:	080051fd 	.word	0x080051fd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 819e 	beq.w	800527e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8004f48:	20c8      	movs	r0, #200	; 0xc8
 8004f4a:	f001 fe22 	bl	8006b92 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f001 fd15 	bl	800697e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8004f64:	e18b      	b.n	800527e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d107      	bne.n	8004f80 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004f7e:	e18d      	b.n	800529c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004f86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f8a:	d914      	bls.n	8004fb6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004f92:	3301      	adds	r3, #1
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d903      	bls.n	8004fae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	220d      	movs	r2, #13
 8004faa:	701a      	strb	r2, [r3, #0]
      break;
 8004fac:	e176      	b.n	800529c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	701a      	strb	r2, [r3, #0]
      break;
 8004fb4:	e172      	b.n	800529c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004fbc:	f103 020a 	add.w	r2, r3, #10
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8004fc6:	200a      	movs	r0, #10
 8004fc8:	f001 fde3 	bl	8006b92 <USBH_Delay>
      break;
 8004fcc:	e166      	b.n	800529c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004fde:	2104      	movs	r1, #4
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8004fe4:	2064      	movs	r0, #100	; 0x64
 8004fe6:	f001 fdd4 	bl	8006b92 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f001 fca0 	bl	8006930 <USBH_LL_GetSpeed>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2205      	movs	r2, #5
 8004ffe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005000:	2100      	movs	r1, #0
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f001 faab 	bl	800655e <USBH_AllocPipe>
 8005008:	4603      	mov	r3, r0
 800500a:	461a      	mov	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005010:	2180      	movs	r1, #128	; 0x80
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f001 faa3 	bl	800655e <USBH_AllocPipe>
 8005018:	4603      	mov	r3, r0
 800501a:	461a      	mov	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	7919      	ldrb	r1, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005034:	b292      	uxth	r2, r2
 8005036:	9202      	str	r2, [sp, #8]
 8005038:	2200      	movs	r2, #0
 800503a:	9201      	str	r2, [sp, #4]
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	4603      	mov	r3, r0
 8005040:	2280      	movs	r2, #128	; 0x80
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f001 fa5c 	bl	8006500 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	7959      	ldrb	r1, [r3, #5]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800505c:	b292      	uxth	r2, r2
 800505e:	9202      	str	r2, [sp, #8]
 8005060:	2200      	movs	r2, #0
 8005062:	9201      	str	r2, [sp, #4]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	4603      	mov	r3, r0
 8005068:	2200      	movs	r2, #0
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f001 fa48 	bl	8006500 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005070:	e114      	b.n	800529c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f918 	bl	80052a8 <USBH_HandleEnum>
 8005078:	4603      	mov	r3, r0
 800507a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800507c:	7bbb      	ldrb	r3, [r7, #14]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	f040 80fe 	bne.w	8005282 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005094:	2b01      	cmp	r3, #1
 8005096:	d103      	bne.n	80050a0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2208      	movs	r2, #8
 800509c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800509e:	e0f0      	b.n	8005282 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2207      	movs	r2, #7
 80050a4:	701a      	strb	r2, [r3, #0]
      break;
 80050a6:	e0ec      	b.n	8005282 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 80e9 	beq.w	8005286 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80050ba:	2101      	movs	r1, #1
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2208      	movs	r2, #8
 80050c4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80050c6:	e0de      	b.n	8005286 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fc3f 	bl	8005956 <USBH_SetCfg>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f040 80d5 	bne.w	800528a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2209      	movs	r2, #9
 80050e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80050e6:	e0d0      	b.n	800528a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d016      	beq.n	8005124 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80050f6:	2101      	movs	r1, #1
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fc4f 	bl	800599c <USBH_SetFeature>
 80050fe:	4603      	mov	r3, r0
 8005100:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005102:	7bbb      	ldrb	r3, [r7, #14]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	220a      	movs	r2, #10
 800510e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005110:	e0bd      	b.n	800528e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8005112:	7bbb      	ldrb	r3, [r7, #14]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b03      	cmp	r3, #3
 8005118:	f040 80b9 	bne.w	800528e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	220a      	movs	r2, #10
 8005120:	701a      	strb	r2, [r3, #0]
      break;
 8005122:	e0b4      	b.n	800528e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	220a      	movs	r2, #10
 8005128:	701a      	strb	r2, [r3, #0]
      break;
 800512a:	e0b0      	b.n	800528e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 80ad 	beq.w	8005292 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005140:	2300      	movs	r3, #0
 8005142:	73fb      	strb	r3, [r7, #15]
 8005144:	e016      	b.n	8005174 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005146:	7bfa      	ldrb	r2, [r7, #15]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	32de      	adds	r2, #222	; 0xde
 800514c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005150:	791a      	ldrb	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005158:	429a      	cmp	r2, r3
 800515a:	d108      	bne.n	800516e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800515c:	7bfa      	ldrb	r2, [r7, #15]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	32de      	adds	r2, #222	; 0xde
 8005162:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800516c:	e005      	b.n	800517a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	3301      	adds	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0e5      	beq.n	8005146 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005180:	2b00      	cmp	r3, #0
 8005182:	d016      	beq.n	80051b2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	4798      	blx	r3
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2206      	movs	r2, #6
 800519a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80051a2:	2103      	movs	r1, #3
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80051a8:	e073      	b.n	8005292 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	220d      	movs	r2, #13
 80051ae:	701a      	strb	r2, [r3, #0]
      break;
 80051b0:	e06f      	b.n	8005292 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	220d      	movs	r2, #13
 80051b6:	701a      	strb	r2, [r3, #0]
      break;
 80051b8:	e06b      	b.n	8005292 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d017      	beq.n	80051f4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	4798      	blx	r3
 80051d0:	4603      	mov	r3, r0
 80051d2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80051d4:	7bbb      	ldrb	r3, [r7, #14]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d103      	bne.n	80051e4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	220b      	movs	r2, #11
 80051e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80051e2:	e058      	b.n	8005296 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80051e4:	7bbb      	ldrb	r3, [r7, #14]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d154      	bne.n	8005296 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	220d      	movs	r2, #13
 80051f0:	701a      	strb	r2, [r3, #0]
      break;
 80051f2:	e050      	b.n	8005296 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	220d      	movs	r2, #13
 80051f8:	701a      	strb	r2, [r3, #0]
      break;
 80051fa:	e04c      	b.n	8005296 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d049      	beq.n	800529a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	4798      	blx	r3
      }
      break;
 8005212:	e042      	b.n	800529a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff fd47 	bl	8004cb0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d005      	beq.n	8005256 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005250:	2105      	movs	r1, #5
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b01      	cmp	r3, #1
 8005260:	d107      	bne.n	8005272 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff fe1f 	bl	8004eae <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005270:	e014      	b.n	800529c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f001 fb26 	bl	80068c4 <USBH_LL_Start>
      break;
 8005278:	e010      	b.n	800529c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800527a:	bf00      	nop
 800527c:	e00e      	b.n	800529c <USBH_Process+0x3cc>
      break;
 800527e:	bf00      	nop
 8005280:	e00c      	b.n	800529c <USBH_Process+0x3cc>
      break;
 8005282:	bf00      	nop
 8005284:	e00a      	b.n	800529c <USBH_Process+0x3cc>
    break;
 8005286:	bf00      	nop
 8005288:	e008      	b.n	800529c <USBH_Process+0x3cc>
      break;
 800528a:	bf00      	nop
 800528c:	e006      	b.n	800529c <USBH_Process+0x3cc>
      break;
 800528e:	bf00      	nop
 8005290:	e004      	b.n	800529c <USBH_Process+0x3cc>
      break;
 8005292:	bf00      	nop
 8005294:	e002      	b.n	800529c <USBH_Process+0x3cc>
      break;
 8005296:	bf00      	nop
 8005298:	e000      	b.n	800529c <USBH_Process+0x3cc>
      break;
 800529a:	bf00      	nop
  }
  return USBH_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop

080052a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af04      	add	r7, sp, #16
 80052ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80052b0:	2301      	movs	r3, #1
 80052b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	2b07      	cmp	r3, #7
 80052be:	f200 81c1 	bhi.w	8005644 <USBH_HandleEnum+0x39c>
 80052c2:	a201      	add	r2, pc, #4	; (adr r2, 80052c8 <USBH_HandleEnum+0x20>)
 80052c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c8:	080052e9 	.word	0x080052e9
 80052cc:	080053a7 	.word	0x080053a7
 80052d0:	08005411 	.word	0x08005411
 80052d4:	0800549f 	.word	0x0800549f
 80052d8:	08005509 	.word	0x08005509
 80052dc:	08005579 	.word	0x08005579
 80052e0:	080055bf 	.word	0x080055bf
 80052e4:	08005605 	.word	0x08005605
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80052e8:	2108      	movs	r1, #8
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fa50 	bl	8005790 <USBH_Get_DevDesc>
 80052f0:	4603      	mov	r3, r0
 80052f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80052f4:	7bbb      	ldrb	r3, [r7, #14]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d130      	bne.n	800535c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	7919      	ldrb	r1, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800531e:	b292      	uxth	r2, r2
 8005320:	9202      	str	r2, [sp, #8]
 8005322:	2200      	movs	r2, #0
 8005324:	9201      	str	r2, [sp, #4]
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	4603      	mov	r3, r0
 800532a:	2280      	movs	r2, #128	; 0x80
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f001 f8e7 	bl	8006500 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	7959      	ldrb	r1, [r3, #5]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005346:	b292      	uxth	r2, r2
 8005348:	9202      	str	r2, [sp, #8]
 800534a:	2200      	movs	r2, #0
 800534c:	9201      	str	r2, [sp, #4]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	4603      	mov	r3, r0
 8005352:	2200      	movs	r2, #0
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f001 f8d3 	bl	8006500 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800535a:	e175      	b.n	8005648 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800535c:	7bbb      	ldrb	r3, [r7, #14]
 800535e:	2b03      	cmp	r3, #3
 8005360:	f040 8172 	bne.w	8005648 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800536a:	3301      	adds	r3, #1
 800536c:	b2da      	uxtb	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800537a:	2b03      	cmp	r3, #3
 800537c:	d903      	bls.n	8005386 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	220d      	movs	r2, #13
 8005382:	701a      	strb	r2, [r3, #0]
      break;
 8005384:	e160      	b.n	8005648 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	795b      	ldrb	r3, [r3, #5]
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f001 f907 	bl	80065a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	791b      	ldrb	r3, [r3, #4]
 8005396:	4619      	mov	r1, r3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f001 f901 	bl	80065a0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]
      break;
 80053a4:	e150      	b.n	8005648 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80053a6:	2112      	movs	r1, #18
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f9f1 	bl	8005790 <USBH_Get_DevDesc>
 80053ae:	4603      	mov	r3, r0
 80053b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80053b2:	7bbb      	ldrb	r3, [r7, #14]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d103      	bne.n	80053c0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80053be:	e145      	b.n	800564c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80053c0:	7bbb      	ldrb	r3, [r7, #14]
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	f040 8142 	bne.w	800564c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80053ce:	3301      	adds	r3, #1
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d903      	bls.n	80053ea <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	220d      	movs	r2, #13
 80053e6:	701a      	strb	r2, [r3, #0]
      break;
 80053e8:	e130      	b.n	800564c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	795b      	ldrb	r3, [r3, #5]
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f001 f8d5 	bl	80065a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	791b      	ldrb	r3, [r3, #4]
 80053fa:	4619      	mov	r1, r3
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f001 f8cf 	bl	80065a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]
      break;
 800540e:	e11d      	b.n	800564c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005410:	2101      	movs	r1, #1
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fa7b 	bl	800590e <USBH_SetAddress>
 8005418:	4603      	mov	r3, r0
 800541a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800541c:	7bbb      	ldrb	r3, [r7, #14]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d132      	bne.n	8005488 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005422:	2002      	movs	r0, #2
 8005424:	f001 fbb5 	bl	8006b92 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2203      	movs	r2, #3
 8005434:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	7919      	ldrb	r1, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800544a:	b292      	uxth	r2, r2
 800544c:	9202      	str	r2, [sp, #8]
 800544e:	2200      	movs	r2, #0
 8005450:	9201      	str	r2, [sp, #4]
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	4603      	mov	r3, r0
 8005456:	2280      	movs	r2, #128	; 0x80
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 f851 	bl	8006500 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	7959      	ldrb	r1, [r3, #5]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005472:	b292      	uxth	r2, r2
 8005474:	9202      	str	r2, [sp, #8]
 8005476:	2200      	movs	r2, #0
 8005478:	9201      	str	r2, [sp, #4]
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	4603      	mov	r3, r0
 800547e:	2200      	movs	r2, #0
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f001 f83d 	bl	8006500 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005486:	e0e3      	b.n	8005650 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005488:	7bbb      	ldrb	r3, [r7, #14]
 800548a:	2b03      	cmp	r3, #3
 800548c:	f040 80e0 	bne.w	8005650 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	220d      	movs	r2, #13
 8005494:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	705a      	strb	r2, [r3, #1]
      break;
 800549c:	e0d8      	b.n	8005650 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800549e:	2109      	movs	r1, #9
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f9a1 	bl	80057e8 <USBH_Get_CfgDesc>
 80054a6:	4603      	mov	r3, r0
 80054a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80054aa:	7bbb      	ldrb	r3, [r7, #14]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d103      	bne.n	80054b8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2204      	movs	r2, #4
 80054b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80054b6:	e0cd      	b.n	8005654 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80054b8:	7bbb      	ldrb	r3, [r7, #14]
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	f040 80ca 	bne.w	8005654 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80054c6:	3301      	adds	r3, #1
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d903      	bls.n	80054e2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	220d      	movs	r2, #13
 80054de:	701a      	strb	r2, [r3, #0]
      break;
 80054e0:	e0b8      	b.n	8005654 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	795b      	ldrb	r3, [r3, #5]
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f001 f859 	bl	80065a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	791b      	ldrb	r3, [r3, #4]
 80054f2:	4619      	mov	r1, r3
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f001 f853 	bl	80065a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
      break;
 8005506:	e0a5      	b.n	8005654 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800550e:	4619      	mov	r1, r3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f969 	bl	80057e8 <USBH_Get_CfgDesc>
 8005516:	4603      	mov	r3, r0
 8005518:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800551a:	7bbb      	ldrb	r3, [r7, #14]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d103      	bne.n	8005528 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2205      	movs	r2, #5
 8005524:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005526:	e097      	b.n	8005658 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005528:	7bbb      	ldrb	r3, [r7, #14]
 800552a:	2b03      	cmp	r3, #3
 800552c:	f040 8094 	bne.w	8005658 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005536:	3301      	adds	r3, #1
 8005538:	b2da      	uxtb	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005546:	2b03      	cmp	r3, #3
 8005548:	d903      	bls.n	8005552 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	220d      	movs	r2, #13
 800554e:	701a      	strb	r2, [r3, #0]
      break;
 8005550:	e082      	b.n	8005658 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	795b      	ldrb	r3, [r3, #5]
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f001 f821 	bl	80065a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	791b      	ldrb	r3, [r3, #4]
 8005562:	4619      	mov	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f001 f81b 	bl	80065a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	701a      	strb	r2, [r3, #0]
      break;
 8005576:	e06f      	b.n	8005658 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800557e:	2b00      	cmp	r3, #0
 8005580:	d019      	beq.n	80055b6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800558e:	23ff      	movs	r3, #255	; 0xff
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f953 	bl	800583c <USBH_Get_StringDesc>
 8005596:	4603      	mov	r3, r0
 8005598:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800559a:	7bbb      	ldrb	r3, [r7, #14]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d103      	bne.n	80055a8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2206      	movs	r2, #6
 80055a4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80055a6:	e059      	b.n	800565c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80055a8:	7bbb      	ldrb	r3, [r7, #14]
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d156      	bne.n	800565c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2206      	movs	r2, #6
 80055b2:	705a      	strb	r2, [r3, #1]
      break;
 80055b4:	e052      	b.n	800565c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2206      	movs	r2, #6
 80055ba:	705a      	strb	r2, [r3, #1]
      break;
 80055bc:	e04e      	b.n	800565c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d019      	beq.n	80055fc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80055d4:	23ff      	movs	r3, #255	; 0xff
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f930 	bl	800583c <USBH_Get_StringDesc>
 80055dc:	4603      	mov	r3, r0
 80055de:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80055e0:	7bbb      	ldrb	r3, [r7, #14]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d103      	bne.n	80055ee <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2207      	movs	r2, #7
 80055ea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80055ec:	e038      	b.n	8005660 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80055ee:	7bbb      	ldrb	r3, [r7, #14]
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d135      	bne.n	8005660 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2207      	movs	r2, #7
 80055f8:	705a      	strb	r2, [r3, #1]
      break;
 80055fa:	e031      	b.n	8005660 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2207      	movs	r2, #7
 8005600:	705a      	strb	r2, [r3, #1]
      break;
 8005602:	e02d      	b.n	8005660 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800560a:	2b00      	cmp	r3, #0
 800560c:	d017      	beq.n	800563e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800561a:	23ff      	movs	r3, #255	; 0xff
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f90d 	bl	800583c <USBH_Get_StringDesc>
 8005622:	4603      	mov	r3, r0
 8005624:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005626:	7bbb      	ldrb	r3, [r7, #14]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8005630:	e018      	b.n	8005664 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005632:	7bbb      	ldrb	r3, [r7, #14]
 8005634:	2b03      	cmp	r3, #3
 8005636:	d115      	bne.n	8005664 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	73fb      	strb	r3, [r7, #15]
      break;
 800563c:	e012      	b.n	8005664 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]
      break;
 8005642:	e00f      	b.n	8005664 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8005644:	bf00      	nop
 8005646:	e00e      	b.n	8005666 <USBH_HandleEnum+0x3be>
      break;
 8005648:	bf00      	nop
 800564a:	e00c      	b.n	8005666 <USBH_HandleEnum+0x3be>
      break;
 800564c:	bf00      	nop
 800564e:	e00a      	b.n	8005666 <USBH_HandleEnum+0x3be>
      break;
 8005650:	bf00      	nop
 8005652:	e008      	b.n	8005666 <USBH_HandleEnum+0x3be>
      break;
 8005654:	bf00      	nop
 8005656:	e006      	b.n	8005666 <USBH_HandleEnum+0x3be>
      break;
 8005658:	bf00      	nop
 800565a:	e004      	b.n	8005666 <USBH_HandleEnum+0x3be>
      break;
 800565c:	bf00      	nop
 800565e:	e002      	b.n	8005666 <USBH_HandleEnum+0x3be>
      break;
 8005660:	bf00      	nop
 8005662:	e000      	b.n	8005666 <USBH_HandleEnum+0x3be>
      break;
 8005664:	bf00      	nop
  }
  return Status;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b082      	sub	sp, #8
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f804 	bl	80056b2 <USBH_HandleSof>
}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b0b      	cmp	r3, #11
 80056c2:	d10a      	bne.n	80056da <USBH_HandleSof+0x28>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d005      	beq.n	80056da <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	4798      	blx	r3
  }
}
 80056da:	bf00      	nop
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80056f2:	bf00      	nop
}
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800570e:	bf00      	nop
}
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f001 f8c6 	bl	80068fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	791b      	ldrb	r3, [r3, #4]
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 ff13 	bl	80065a0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	795b      	ldrb	r3, [r3, #5]
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 ff0d 	bl	80065a0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af02      	add	r7, sp, #8
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800579c:	887b      	ldrh	r3, [r7, #2]
 800579e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a2:	d901      	bls.n	80057a8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e01b      	b.n	80057e0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80057ae:	887b      	ldrh	r3, [r7, #2]
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	4613      	mov	r3, r2
 80057b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057b8:	2100      	movs	r1, #0
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f872 	bl	80058a4 <USBH_GetDescriptor>
 80057c0:	4603      	mov	r3, r0
 80057c2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80057d0:	887a      	ldrh	r2, [r7, #2]
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f929 	bl	8005a2c <USBH_ParseDevDesc>
 80057da:	4603      	mov	r3, r0
 80057dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80057de:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	460b      	mov	r3, r1
 80057f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	331c      	adds	r3, #28
 80057f8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80057fa:	887b      	ldrh	r3, [r7, #2]
 80057fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005800:	d901      	bls.n	8005806 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8005802:	2303      	movs	r3, #3
 8005804:	e016      	b.n	8005834 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8005806:	887b      	ldrh	r3, [r7, #2]
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005810:	2100      	movs	r1, #0
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f846 	bl	80058a4 <USBH_GetDescriptor>
 8005818:	4603      	mov	r3, r0
 800581a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800581c:	7bfb      	ldrb	r3, [r7, #15]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d107      	bne.n	8005832 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8005822:	887b      	ldrh	r3, [r7, #2]
 8005824:	461a      	mov	r2, r3
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f9b3 	bl	8005b94 <USBH_ParseCfgDesc>
 800582e:	4603      	mov	r3, r0
 8005830:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005832:	7bfb      	ldrb	r3, [r7, #15]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af02      	add	r7, sp, #8
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	607a      	str	r2, [r7, #4]
 8005846:	461a      	mov	r2, r3
 8005848:	460b      	mov	r3, r1
 800584a:	72fb      	strb	r3, [r7, #11]
 800584c:	4613      	mov	r3, r2
 800584e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8005850:	893b      	ldrh	r3, [r7, #8]
 8005852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005856:	d802      	bhi.n	800585e <USBH_Get_StringDesc+0x22>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800585e:	2303      	movs	r3, #3
 8005860:	e01c      	b.n	800589c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8005862:	7afb      	ldrb	r3, [r7, #11]
 8005864:	b29b      	uxth	r3, r3
 8005866:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800586a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8005872:	893b      	ldrh	r3, [r7, #8]
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	460b      	mov	r3, r1
 8005878:	2100      	movs	r1, #0
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 f812 	bl	80058a4 <USBH_GetDescriptor>
 8005880:	4603      	mov	r3, r0
 8005882:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d107      	bne.n	800589a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005890:	893a      	ldrh	r2, [r7, #8]
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fb93 	bl	8005fc0 <USBH_ParseStringDesc>
  }

  return status;
 800589a:	7dfb      	ldrb	r3, [r7, #23]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	607b      	str	r3, [r7, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	72fb      	strb	r3, [r7, #11]
 80058b2:	4613      	mov	r3, r2
 80058b4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	789b      	ldrb	r3, [r3, #2]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d11c      	bne.n	80058f8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80058be:	7afb      	ldrb	r3, [r7, #11]
 80058c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2206      	movs	r2, #6
 80058ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	893a      	ldrh	r2, [r7, #8]
 80058d4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80058d6:	893b      	ldrh	r3, [r7, #8]
 80058d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80058dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058e0:	d104      	bne.n	80058ec <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f240 4209 	movw	r2, #1033	; 0x409
 80058e8:	829a      	strh	r2, [r3, #20]
 80058ea:	e002      	b.n	80058f2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8b3a      	ldrh	r2, [r7, #24]
 80058f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80058f8:	8b3b      	ldrh	r3, [r7, #24]
 80058fa:	461a      	mov	r2, r3
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 fbac 	bl	800605c <USBH_CtlReq>
 8005904:	4603      	mov	r3, r0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	460b      	mov	r3, r1
 8005918:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	789b      	ldrb	r3, [r3, #2]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d10f      	bne.n	8005942 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2205      	movs	r2, #5
 800592c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	b29a      	uxth	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8005942:	2200      	movs	r2, #0
 8005944:	2100      	movs	r1, #0
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fb88 	bl	800605c <USBH_CtlReq>
 800594c:	4603      	mov	r3, r0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	460b      	mov	r3, r1
 8005960:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	789b      	ldrb	r3, [r3, #2]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d10e      	bne.n	8005988 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2209      	movs	r2, #9
 8005974:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	887a      	ldrh	r2, [r7, #2]
 800597a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8005988:	2200      	movs	r2, #0
 800598a:	2100      	movs	r1, #0
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fb65 	bl	800605c <USBH_CtlReq>
 8005992:	4603      	mov	r3, r0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	789b      	ldrb	r3, [r3, #2]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d10f      	bne.n	80059d0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2203      	movs	r2, #3
 80059ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80059bc:	78fb      	ldrb	r3, [r7, #3]
 80059be:	b29a      	uxth	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80059d0:	2200      	movs	r2, #0
 80059d2:	2100      	movs	r1, #0
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fb41 	bl	800605c <USBH_CtlReq>
 80059da:	4603      	mov	r3, r0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	789b      	ldrb	r3, [r3, #2]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d10f      	bne.n	8005a18 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005a0a:	78fb      	ldrb	r3, [r7, #3]
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fb1d 	bl	800605c <USBH_CtlReq>
 8005a22:	4603      	mov	r3, r0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f203 3326 	addw	r3, r3, #806	; 0x326
 8005a40:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e098      	b.n	8005b82 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	781a      	ldrb	r2, [r3, #0]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	785a      	ldrb	r2, [r3, #1]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	3302      	adds	r3, #2
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	3303      	adds	r3, #3
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	021b      	lsls	r3, r3, #8
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	4313      	orrs	r3, r2
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	791a      	ldrb	r2, [r3, #4]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	795a      	ldrb	r2, [r3, #5]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	799a      	ldrb	r2, [r3, #6]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	79da      	ldrb	r2, [r3, #7]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d004      	beq.n	8005ab0 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d11b      	bne.n	8005ae8 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	79db      	ldrb	r3, [r3, #7]
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	dc0f      	bgt.n	8005ad8 <USBH_ParseDevDesc+0xac>
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	db0f      	blt.n	8005adc <USBH_ParseDevDesc+0xb0>
 8005abc:	3b08      	subs	r3, #8
 8005abe:	4a34      	ldr	r2, [pc, #208]	; (8005b90 <USBH_ParseDevDesc+0x164>)
 8005ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bf14      	ite	ne
 8005acc:	2301      	movne	r3, #1
 8005ace:	2300      	moveq	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <USBH_ParseDevDesc+0xb8>
 8005ad6:	e001      	b.n	8005adc <USBH_ParseDevDesc+0xb0>
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	d003      	beq.n	8005ae4 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2208      	movs	r2, #8
 8005ae0:	71da      	strb	r2, [r3, #7]
        break;
 8005ae2:	e000      	b.n	8005ae6 <USBH_ParseDevDesc+0xba>
        break;
 8005ae4:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8005ae6:	e00e      	b.n	8005b06 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d107      	bne.n	8005b02 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	79db      	ldrb	r3, [r3, #7]
 8005af6:	2b08      	cmp	r3, #8
 8005af8:	d005      	beq.n	8005b06 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2208      	movs	r2, #8
 8005afe:	71da      	strb	r2, [r3, #7]
 8005b00:	e001      	b.n	8005b06 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8005b02:	2303      	movs	r3, #3
 8005b04:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d939      	bls.n	8005b80 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	3308      	adds	r3, #8
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	3309      	adds	r3, #9
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	4313      	orrs	r3, r2
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	330a      	adds	r3, #10
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	330b      	adds	r3, #11
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	330c      	adds	r3, #12
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	330d      	adds	r3, #13
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	7b9a      	ldrb	r2, [r3, #14]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	7bda      	ldrb	r2, [r3, #15]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	7c1a      	ldrb	r2, [r3, #16]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	7c5a      	ldrb	r2, [r3, #17]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	01000101 	.word	0x01000101

08005b94 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08c      	sub	sp, #48	; 0x30
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005ba8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e0db      	b.n	8005d7e <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	781a      	ldrb	r2, [r3, #0]
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	785a      	ldrb	r2, [r3, #1]
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	3302      	adds	r3, #2
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	3303      	adds	r3, #3
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf6:	bf28      	it	cs
 8005bf8:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	791a      	ldrb	r2, [r3, #4]
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	795a      	ldrb	r2, [r3, #5]
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	799a      	ldrb	r2, [r3, #6]
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	79da      	ldrb	r2, [r3, #7]
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	7a1a      	ldrb	r2, [r3, #8]
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b09      	cmp	r3, #9
 8005c30:	d002      	beq.n	8005c38 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	2209      	movs	r2, #9
 8005c36:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8005c38:	88fb      	ldrh	r3, [r7, #6]
 8005c3a:	2b09      	cmp	r3, #9
 8005c3c:	f240 809d 	bls.w	8005d7a <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8005c40:	2309      	movs	r3, #9
 8005c42:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005c48:	e081      	b.n	8005d4e <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005c4a:	f107 0316 	add.w	r3, r7, #22
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c52:	f000 f9e8 	bl	8006026 <USBH_GetNextDesc>
 8005c56:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d176      	bne.n	8005d4e <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b09      	cmp	r3, #9
 8005c66:	d002      	beq.n	8005c6e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8005c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6a:	2209      	movs	r2, #9
 8005c6c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8005c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c72:	221a      	movs	r2, #26
 8005c74:	fb02 f303 	mul.w	r3, r2, r3
 8005c78:	3308      	adds	r3, #8
 8005c7a:	6a3a      	ldr	r2, [r7, #32]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	3302      	adds	r3, #2
 8005c80:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8005c82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c84:	69f8      	ldr	r0, [r7, #28]
 8005c86:	f000 f87e 	bl	8005d86 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005c94:	e043      	b.n	8005d1e <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005c96:	f107 0316 	add.w	r3, r7, #22
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c9e:	f000 f9c2 	bl	8006026 <USBH_GetNextDesc>
 8005ca2:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	785b      	ldrb	r3, [r3, #1]
 8005ca8:	2b05      	cmp	r3, #5
 8005caa:	d138      	bne.n	8005d1e <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	795b      	ldrb	r3, [r3, #5]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d113      	bne.n	8005cdc <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d003      	beq.n	8005cc4 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	799b      	ldrb	r3, [r3, #6]
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d10b      	bne.n	8005cdc <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	79db      	ldrb	r3, [r3, #7]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10b      	bne.n	8005ce4 <USBH_ParseCfgDesc+0x150>
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b09      	cmp	r3, #9
 8005cd2:	d007      	beq.n	8005ce4 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	2209      	movs	r2, #9
 8005cd8:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005cda:	e003      	b.n	8005ce4 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	2207      	movs	r2, #7
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	e000      	b.n	8005ce6 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8005ce4:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8005ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005cee:	3201      	adds	r2, #1
 8005cf0:	00d2      	lsls	r2, r2, #3
 8005cf2:	211a      	movs	r1, #26
 8005cf4:	fb01 f303 	mul.w	r3, r1, r3
 8005cf8:	4413      	add	r3, r2
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	6a3a      	ldr	r2, [r7, #32]
 8005cfe:	4413      	add	r3, r2
 8005d00:	3304      	adds	r3, #4
 8005d02:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8005d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d06:	69b9      	ldr	r1, [r7, #24]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f870 	bl	8005dee <USBH_ParseEPDesc>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8005d14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d18:	3301      	adds	r3, #1
 8005d1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	791b      	ldrb	r3, [r3, #4]
 8005d22:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d204      	bcs.n	8005d34 <USBH_ParseCfgDesc+0x1a0>
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	885a      	ldrh	r2, [r3, #2]
 8005d2e:	8afb      	ldrh	r3, [r7, #22]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d8b0      	bhi.n	8005c96 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	791b      	ldrb	r3, [r3, #4]
 8005d38:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d201      	bcs.n	8005d44 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e01c      	b.n	8005d7e <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 8005d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d48:	3301      	adds	r3, #1
 8005d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d805      	bhi.n	8005d62 <USBH_ParseCfgDesc+0x1ce>
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	885a      	ldrh	r2, [r3, #2]
 8005d5a:	8afb      	ldrh	r3, [r7, #22]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	f63f af74 	bhi.w	8005c4a <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	791b      	ldrb	r3, [r3, #4]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	bf28      	it	cs
 8005d6a:	2302      	movcs	r3, #2
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d201      	bcs.n	8005d7a <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e001      	b.n	8005d7e <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8005d7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3730      	adds	r7, #48	; 0x30
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781a      	ldrb	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	785a      	ldrb	r2, [r3, #1]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	789a      	ldrb	r2, [r3, #2]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	78da      	ldrb	r2, [r3, #3]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	3304      	adds	r3, #4
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	bf28      	it	cs
 8005dba:	2302      	movcs	r3, #2
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	795a      	ldrb	r2, [r3, #5]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	799a      	ldrb	r2, [r3, #6]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	79da      	ldrb	r2, [r3, #7]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	7a1a      	ldrb	r2, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	721a      	strb	r2, [r3, #8]
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b087      	sub	sp, #28
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	781a      	ldrb	r2, [r3, #0]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	785a      	ldrb	r2, [r3, #1]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	789a      	ldrb	r2, [r3, #2]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	78da      	ldrb	r2, [r3, #3]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3304      	adds	r3, #4
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	3305      	adds	r3, #5
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	4313      	orrs	r3, r2
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	799a      	ldrb	r2, [r3, #6]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	889b      	ldrh	r3, [r3, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d009      	beq.n	8005e5e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8005e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e52:	d804      	bhi.n	8005e5e <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8005e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e5c:	d901      	bls.n	8005e62 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d136      	bne.n	8005eda <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	78db      	ldrb	r3, [r3, #3]
 8005e70:	f003 0303 	and.w	r3, r3, #3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d108      	bne.n	8005e8a <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	889b      	ldrh	r3, [r3, #4]
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e80:	f240 8097 	bls.w	8005fb2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8005e84:	2303      	movs	r3, #3
 8005e86:	75fb      	strb	r3, [r7, #23]
 8005e88:	e093      	b.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	78db      	ldrb	r3, [r3, #3]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d107      	bne.n	8005ea6 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	889b      	ldrh	r3, [r3, #4]
 8005e9a:	2b40      	cmp	r3, #64	; 0x40
 8005e9c:	f240 8089 	bls.w	8005fb2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	75fb      	strb	r3, [r7, #23]
 8005ea4:	e085      	b.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	78db      	ldrb	r3, [r3, #3]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d005      	beq.n	8005ebe <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	78db      	ldrb	r3, [r3, #3]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d10a      	bne.n	8005ed4 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	799b      	ldrb	r3, [r3, #6]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <USBH_ParseEPDesc+0xe0>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	799b      	ldrb	r3, [r3, #6]
 8005eca:	2b10      	cmp	r3, #16
 8005ecc:	d970      	bls.n	8005fb0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8005ed2:	e06d      	b.n	8005fb0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	75fb      	strb	r3, [r7, #23]
 8005ed8:	e06b      	b.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d13c      	bne.n	8005f5e <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	78db      	ldrb	r3, [r3, #3]
 8005ee8:	f003 0303 	and.w	r3, r3, #3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d005      	beq.n	8005efc <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	78db      	ldrb	r3, [r3, #3]
 8005ef4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d106      	bne.n	8005f0a <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	889b      	ldrh	r3, [r3, #4]
 8005f00:	2b40      	cmp	r3, #64	; 0x40
 8005f02:	d956      	bls.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8005f04:	2303      	movs	r3, #3
 8005f06:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8005f08:	e053      	b.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	78db      	ldrb	r3, [r3, #3]
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d10e      	bne.n	8005f34 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	799b      	ldrb	r3, [r3, #6]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8005f22:	2b10      	cmp	r3, #16
 8005f24:	d803      	bhi.n	8005f2e <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8005f2a:	2b40      	cmp	r3, #64	; 0x40
 8005f2c:	d941      	bls.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	75fb      	strb	r3, [r7, #23]
 8005f32:	e03e      	b.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	78db      	ldrb	r3, [r3, #3]
 8005f38:	f003 0303 	and.w	r3, r3, #3
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d10b      	bne.n	8005f58 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	799b      	ldrb	r3, [r3, #6]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d004      	beq.n	8005f52 <USBH_ParseEPDesc+0x164>
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	889b      	ldrh	r3, [r3, #4]
 8005f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f50:	d32f      	bcc.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8005f52:	2303      	movs	r3, #3
 8005f54:	75fb      	strb	r3, [r7, #23]
 8005f56:	e02c      	b.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	75fb      	strb	r3, [r7, #23]
 8005f5c:	e029      	b.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d120      	bne.n	8005faa <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	78db      	ldrb	r3, [r3, #3]
 8005f6c:	f003 0303 	and.w	r3, r3, #3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d106      	bne.n	8005f82 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	889b      	ldrh	r3, [r3, #4]
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d01a      	beq.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	75fb      	strb	r3, [r7, #23]
 8005f80:	e017      	b.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	78db      	ldrb	r3, [r3, #3]
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d10a      	bne.n	8005fa4 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	799b      	ldrb	r3, [r3, #6]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <USBH_ParseEPDesc+0x1b0>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	889b      	ldrh	r3, [r3, #4]
 8005f9a:	2b08      	cmp	r3, #8
 8005f9c:	d909      	bls.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	75fb      	strb	r3, [r7, #23]
 8005fa2:	e006      	b.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	75fb      	strb	r3, [r7, #23]
 8005fa8:	e003      	b.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8005faa:	2303      	movs	r3, #3
 8005fac:	75fb      	strb	r3, [r7, #23]
 8005fae:	e000      	b.n	8005fb2 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8005fb0:	bf00      	nop
  }

  return status;
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	371c      	adds	r7, #28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d120      	bne.n	800601a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	1e9a      	subs	r2, r3, #2
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	bf28      	it	cs
 8005fe4:	4613      	movcs	r3, r2
 8005fe6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3302      	adds	r3, #2
 8005fec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8005fee:	2300      	movs	r3, #0
 8005ff0:	82fb      	strh	r3, [r7, #22]
 8005ff2:	e00b      	b.n	800600c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8005ff4:	8afb      	ldrh	r3, [r7, #22]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	781a      	ldrb	r2, [r3, #0]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	3301      	adds	r3, #1
 8006004:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006006:	8afb      	ldrh	r3, [r7, #22]
 8006008:	3302      	adds	r3, #2
 800600a:	82fb      	strh	r3, [r7, #22]
 800600c:	8afa      	ldrh	r2, [r7, #22]
 800600e:	8abb      	ldrh	r3, [r7, #20]
 8006010:	429a      	cmp	r2, r3
 8006012:	d3ef      	bcc.n	8005ff4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2200      	movs	r2, #0
 8006018:	701a      	strb	r2, [r3, #0]
  }
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006026:	b480      	push	{r7}
 8006028:	b085      	sub	sp, #20
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	881a      	ldrh	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	4413      	add	r3, r2
 800603c:	b29a      	uxth	r2, r3
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4413      	add	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800604e:	68fb      	ldr	r3, [r7, #12]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	4613      	mov	r3, r2
 8006068:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800606a:	2301      	movs	r3, #1
 800606c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	789b      	ldrb	r3, [r3, #2]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d002      	beq.n	800607c <USBH_CtlReq+0x20>
 8006076:	2b02      	cmp	r3, #2
 8006078:	d00f      	beq.n	800609a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800607a:	e027      	b.n	80060cc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	88fa      	ldrh	r2, [r7, #6]
 8006086:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2201      	movs	r2, #1
 800608c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2202      	movs	r2, #2
 8006092:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006094:	2301      	movs	r3, #1
 8006096:	75fb      	strb	r3, [r7, #23]
      break;
 8006098:	e018      	b.n	80060cc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f81c 	bl	80060d8 <USBH_HandleControl>
 80060a0:	4603      	mov	r3, r0
 80060a2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <USBH_CtlReq+0x54>
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d106      	bne.n	80060be <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	761a      	strb	r2, [r3, #24]
      break;
 80060bc:	e005      	b.n	80060ca <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d102      	bne.n	80060ca <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	709a      	strb	r2, [r3, #2]
      break;
 80060ca:	bf00      	nop
  }
  return status;
 80060cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af02      	add	r7, sp, #8
 80060de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80060e0:	2301      	movs	r3, #1
 80060e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	7e1b      	ldrb	r3, [r3, #24]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	2b0a      	cmp	r3, #10
 80060f0:	f200 8156 	bhi.w	80063a0 <USBH_HandleControl+0x2c8>
 80060f4:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <USBH_HandleControl+0x24>)
 80060f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fa:	bf00      	nop
 80060fc:	08006129 	.word	0x08006129
 8006100:	08006143 	.word	0x08006143
 8006104:	080061ad 	.word	0x080061ad
 8006108:	080061d3 	.word	0x080061d3
 800610c:	0800620b 	.word	0x0800620b
 8006110:	08006235 	.word	0x08006235
 8006114:	08006287 	.word	0x08006287
 8006118:	080062a9 	.word	0x080062a9
 800611c:	080062e5 	.word	0x080062e5
 8006120:	0800630b 	.word	0x0800630b
 8006124:	08006349 	.word	0x08006349
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f103 0110 	add.w	r1, r3, #16
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	795b      	ldrb	r3, [r3, #5]
 8006132:	461a      	mov	r2, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f943 	bl	80063c0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	761a      	strb	r2, [r3, #24]
      break;
 8006140:	e139      	b.n	80063b6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	795b      	ldrb	r3, [r3, #5]
 8006146:	4619      	mov	r1, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fcc5 	bl	8006ad8 <USBH_LL_GetURBState>
 800614e:	4603      	mov	r3, r0
 8006150:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006152:	7bbb      	ldrb	r3, [r7, #14]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d11e      	bne.n	8006196 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	7c1b      	ldrb	r3, [r3, #16]
 800615c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006160:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	8adb      	ldrh	r3, [r3, #22]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800616a:	7b7b      	ldrb	r3, [r7, #13]
 800616c:	2b80      	cmp	r3, #128	; 0x80
 800616e:	d103      	bne.n	8006178 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2203      	movs	r2, #3
 8006174:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006176:	e115      	b.n	80063a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2205      	movs	r2, #5
 800617c:	761a      	strb	r2, [r3, #24]
      break;
 800617e:	e111      	b.n	80063a4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006180:	7b7b      	ldrb	r3, [r7, #13]
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d103      	bne.n	800618e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2209      	movs	r2, #9
 800618a:	761a      	strb	r2, [r3, #24]
      break;
 800618c:	e10a      	b.n	80063a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2207      	movs	r2, #7
 8006192:	761a      	strb	r2, [r3, #24]
      break;
 8006194:	e106      	b.n	80063a4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006196:	7bbb      	ldrb	r3, [r7, #14]
 8006198:	2b04      	cmp	r3, #4
 800619a:	d003      	beq.n	80061a4 <USBH_HandleControl+0xcc>
 800619c:	7bbb      	ldrb	r3, [r7, #14]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	f040 8100 	bne.w	80063a4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	220b      	movs	r2, #11
 80061a8:	761a      	strb	r2, [r3, #24]
      break;
 80061aa:	e0fb      	b.n	80063a4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6899      	ldr	r1, [r3, #8]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	899a      	ldrh	r2, [r3, #12]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	791b      	ldrb	r3, [r3, #4]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f93a 	bl	800643e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2204      	movs	r2, #4
 80061ce:	761a      	strb	r2, [r3, #24]
      break;
 80061d0:	e0f1      	b.n	80063b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	791b      	ldrb	r3, [r3, #4]
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fc7d 	bl	8006ad8 <USBH_LL_GetURBState>
 80061de:	4603      	mov	r3, r0
 80061e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d102      	bne.n	80061ee <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2209      	movs	r2, #9
 80061ec:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80061ee:	7bbb      	ldrb	r3, [r7, #14]
 80061f0:	2b05      	cmp	r3, #5
 80061f2:	d102      	bne.n	80061fa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80061f4:	2303      	movs	r3, #3
 80061f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80061f8:	e0d6      	b.n	80063a8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80061fa:	7bbb      	ldrb	r3, [r7, #14]
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	f040 80d3 	bne.w	80063a8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	220b      	movs	r2, #11
 8006206:	761a      	strb	r2, [r3, #24]
      break;
 8006208:	e0ce      	b.n	80063a8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6899      	ldr	r1, [r3, #8]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	899a      	ldrh	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	795b      	ldrb	r3, [r3, #5]
 8006216:	2001      	movs	r0, #1
 8006218:	9000      	str	r0, [sp, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f8ea 	bl	80063f4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006226:	b29a      	uxth	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2206      	movs	r2, #6
 8006230:	761a      	strb	r2, [r3, #24]
      break;
 8006232:	e0c0      	b.n	80063b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	795b      	ldrb	r3, [r3, #5]
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fc4c 	bl	8006ad8 <USBH_LL_GetURBState>
 8006240:	4603      	mov	r3, r0
 8006242:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006244:	7bbb      	ldrb	r3, [r7, #14]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d103      	bne.n	8006252 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2207      	movs	r2, #7
 800624e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006250:	e0ac      	b.n	80063ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006252:	7bbb      	ldrb	r3, [r7, #14]
 8006254:	2b05      	cmp	r3, #5
 8006256:	d105      	bne.n	8006264 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	220c      	movs	r2, #12
 800625c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800625e:	2303      	movs	r3, #3
 8006260:	73fb      	strb	r3, [r7, #15]
      break;
 8006262:	e0a3      	b.n	80063ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006264:	7bbb      	ldrb	r3, [r7, #14]
 8006266:	2b02      	cmp	r3, #2
 8006268:	d103      	bne.n	8006272 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2205      	movs	r2, #5
 800626e:	761a      	strb	r2, [r3, #24]
      break;
 8006270:	e09c      	b.n	80063ac <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006272:	7bbb      	ldrb	r3, [r7, #14]
 8006274:	2b04      	cmp	r3, #4
 8006276:	f040 8099 	bne.w	80063ac <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	220b      	movs	r2, #11
 800627e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006280:	2302      	movs	r3, #2
 8006282:	73fb      	strb	r3, [r7, #15]
      break;
 8006284:	e092      	b.n	80063ac <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	791b      	ldrb	r3, [r3, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	2100      	movs	r1, #0
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f8d5 	bl	800643e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800629a:	b29a      	uxth	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2208      	movs	r2, #8
 80062a4:	761a      	strb	r2, [r3, #24]

      break;
 80062a6:	e086      	b.n	80063b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	791b      	ldrb	r3, [r3, #4]
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fc12 	bl	8006ad8 <USBH_LL_GetURBState>
 80062b4:	4603      	mov	r3, r0
 80062b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80062b8:	7bbb      	ldrb	r3, [r7, #14]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d105      	bne.n	80062ca <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	220d      	movs	r2, #13
 80062c2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80062c8:	e072      	b.n	80063b0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80062ca:	7bbb      	ldrb	r3, [r7, #14]
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d103      	bne.n	80062d8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	220b      	movs	r2, #11
 80062d4:	761a      	strb	r2, [r3, #24]
      break;
 80062d6:	e06b      	b.n	80063b0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80062d8:	7bbb      	ldrb	r3, [r7, #14]
 80062da:	2b05      	cmp	r3, #5
 80062dc:	d168      	bne.n	80063b0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80062de:	2303      	movs	r3, #3
 80062e0:	73fb      	strb	r3, [r7, #15]
      break;
 80062e2:	e065      	b.n	80063b0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	795b      	ldrb	r3, [r3, #5]
 80062e8:	2201      	movs	r2, #1
 80062ea:	9200      	str	r2, [sp, #0]
 80062ec:	2200      	movs	r2, #0
 80062ee:	2100      	movs	r1, #0
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f87f 	bl	80063f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	220a      	movs	r2, #10
 8006306:	761a      	strb	r2, [r3, #24]
      break;
 8006308:	e055      	b.n	80063b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	795b      	ldrb	r3, [r3, #5]
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fbe1 	bl	8006ad8 <USBH_LL_GetURBState>
 8006316:	4603      	mov	r3, r0
 8006318:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800631a:	7bbb      	ldrb	r3, [r7, #14]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d105      	bne.n	800632c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	220d      	movs	r2, #13
 8006328:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800632a:	e043      	b.n	80063b4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800632c:	7bbb      	ldrb	r3, [r7, #14]
 800632e:	2b02      	cmp	r3, #2
 8006330:	d103      	bne.n	800633a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2209      	movs	r2, #9
 8006336:	761a      	strb	r2, [r3, #24]
      break;
 8006338:	e03c      	b.n	80063b4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800633a:	7bbb      	ldrb	r3, [r7, #14]
 800633c:	2b04      	cmp	r3, #4
 800633e:	d139      	bne.n	80063b4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	220b      	movs	r2, #11
 8006344:	761a      	strb	r2, [r3, #24]
      break;
 8006346:	e035      	b.n	80063b4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	7e5b      	ldrb	r3, [r3, #25]
 800634c:	3301      	adds	r3, #1
 800634e:	b2da      	uxtb	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	765a      	strb	r2, [r3, #25]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	7e5b      	ldrb	r3, [r3, #25]
 8006358:	2b02      	cmp	r3, #2
 800635a:	d806      	bhi.n	800636a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006368:	e025      	b.n	80063b6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006370:	2106      	movs	r1, #6
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	795b      	ldrb	r3, [r3, #5]
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f90c 	bl	80065a0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	791b      	ldrb	r3, [r3, #4]
 800638c:	4619      	mov	r1, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f906 	bl	80065a0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800639a:	2302      	movs	r3, #2
 800639c:	73fb      	strb	r3, [r7, #15]
      break;
 800639e:	e00a      	b.n	80063b6 <USBH_HandleControl+0x2de>

    default:
      break;
 80063a0:	bf00      	nop
 80063a2:	e008      	b.n	80063b6 <USBH_HandleControl+0x2de>
      break;
 80063a4:	bf00      	nop
 80063a6:	e006      	b.n	80063b6 <USBH_HandleControl+0x2de>
      break;
 80063a8:	bf00      	nop
 80063aa:	e004      	b.n	80063b6 <USBH_HandleControl+0x2de>
      break;
 80063ac:	bf00      	nop
 80063ae:	e002      	b.n	80063b6 <USBH_HandleControl+0x2de>
      break;
 80063b0:	bf00      	nop
 80063b2:	e000      	b.n	80063b6 <USBH_HandleControl+0x2de>
      break;
 80063b4:	bf00      	nop
  }

  return status;
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af04      	add	r7, sp, #16
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	4613      	mov	r3, r2
 80063cc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80063ce:	79f9      	ldrb	r1, [r7, #7]
 80063d0:	2300      	movs	r3, #0
 80063d2:	9303      	str	r3, [sp, #12]
 80063d4:	2308      	movs	r3, #8
 80063d6:	9302      	str	r3, [sp, #8]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	9301      	str	r3, [sp, #4]
 80063dc:	2300      	movs	r3, #0
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	2300      	movs	r3, #0
 80063e2:	2200      	movs	r2, #0
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 fb46 	bl	8006a76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af04      	add	r7, sp, #16
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	4611      	mov	r1, r2
 8006400:	461a      	mov	r2, r3
 8006402:	460b      	mov	r3, r1
 8006404:	80fb      	strh	r3, [r7, #6]
 8006406:	4613      	mov	r3, r2
 8006408:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006418:	7979      	ldrb	r1, [r7, #5]
 800641a:	7e3b      	ldrb	r3, [r7, #24]
 800641c:	9303      	str	r3, [sp, #12]
 800641e:	88fb      	ldrh	r3, [r7, #6]
 8006420:	9302      	str	r3, [sp, #8]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	2301      	movs	r3, #1
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	2300      	movs	r3, #0
 800642c:	2200      	movs	r2, #0
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 fb21 	bl	8006a76 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b088      	sub	sp, #32
 8006442:	af04      	add	r7, sp, #16
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	4611      	mov	r1, r2
 800644a:	461a      	mov	r2, r3
 800644c:	460b      	mov	r3, r1
 800644e:	80fb      	strh	r3, [r7, #6]
 8006450:	4613      	mov	r3, r2
 8006452:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006454:	7979      	ldrb	r1, [r7, #5]
 8006456:	2300      	movs	r3, #0
 8006458:	9303      	str	r3, [sp, #12]
 800645a:	88fb      	ldrh	r3, [r7, #6]
 800645c:	9302      	str	r3, [sp, #8]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	9301      	str	r3, [sp, #4]
 8006462:	2301      	movs	r3, #1
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	2300      	movs	r3, #0
 8006468:	2201      	movs	r2, #1
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fb03 	bl	8006a76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006470:	2300      	movs	r3, #0

}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b088      	sub	sp, #32
 800647e:	af04      	add	r7, sp, #16
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	4611      	mov	r1, r2
 8006486:	461a      	mov	r2, r3
 8006488:	460b      	mov	r3, r1
 800648a:	80fb      	strh	r3, [r7, #6]
 800648c:	4613      	mov	r3, r2
 800648e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800649e:	7979      	ldrb	r1, [r7, #5]
 80064a0:	7e3b      	ldrb	r3, [r7, #24]
 80064a2:	9303      	str	r3, [sp, #12]
 80064a4:	88fb      	ldrh	r3, [r7, #6]
 80064a6:	9302      	str	r3, [sp, #8]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	2301      	movs	r3, #1
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	2302      	movs	r3, #2
 80064b2:	2200      	movs	r2, #0
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fade 	bl	8006a76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af04      	add	r7, sp, #16
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	4611      	mov	r1, r2
 80064d0:	461a      	mov	r2, r3
 80064d2:	460b      	mov	r3, r1
 80064d4:	80fb      	strh	r3, [r7, #6]
 80064d6:	4613      	mov	r3, r2
 80064d8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80064da:	7979      	ldrb	r1, [r7, #5]
 80064dc:	2300      	movs	r3, #0
 80064de:	9303      	str	r3, [sp, #12]
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	9302      	str	r3, [sp, #8]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	2301      	movs	r3, #1
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	2302      	movs	r3, #2
 80064ee:	2201      	movs	r2, #1
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 fac0 	bl	8006a76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af04      	add	r7, sp, #16
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	4608      	mov	r0, r1
 800650a:	4611      	mov	r1, r2
 800650c:	461a      	mov	r2, r3
 800650e:	4603      	mov	r3, r0
 8006510:	70fb      	strb	r3, [r7, #3]
 8006512:	460b      	mov	r3, r1
 8006514:	70bb      	strb	r3, [r7, #2]
 8006516:	4613      	mov	r3, r2
 8006518:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800651a:	7878      	ldrb	r0, [r7, #1]
 800651c:	78ba      	ldrb	r2, [r7, #2]
 800651e:	78f9      	ldrb	r1, [r7, #3]
 8006520:	8b3b      	ldrh	r3, [r7, #24]
 8006522:	9302      	str	r3, [sp, #8]
 8006524:	7d3b      	ldrb	r3, [r7, #20]
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	7c3b      	ldrb	r3, [r7, #16]
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	4603      	mov	r3, r0
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fa53 	bl	80069da <USBH_LL_OpenPipe>

  return USBH_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	460b      	mov	r3, r1
 8006548:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fa72 	bl	8006a38 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f836 	bl	80065dc <USBH_GetFreePipe>
 8006570:	4603      	mov	r3, r0
 8006572:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006574:	89fb      	ldrh	r3, [r7, #14]
 8006576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800657a:	4293      	cmp	r3, r2
 800657c:	d00a      	beq.n	8006594 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800657e:	78fa      	ldrb	r2, [r7, #3]
 8006580:	89fb      	ldrh	r3, [r7, #14]
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	33e0      	adds	r3, #224	; 0xe0
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	440b      	add	r3, r1
 8006592:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006594:	89fb      	ldrh	r3, [r7, #14]
 8006596:	b2db      	uxtb	r3, r3
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	2b0f      	cmp	r3, #15
 80065b0:	d80d      	bhi.n	80065ce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	33e0      	adds	r3, #224	; 0xe0
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	78fb      	ldrb	r3, [r7, #3]
 80065c0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	33e0      	adds	r3, #224	; 0xe0
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	440b      	add	r3, r1
 80065cc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80065e8:	2300      	movs	r3, #0
 80065ea:	73fb      	strb	r3, [r7, #15]
 80065ec:	e00f      	b.n	800660e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	33e0      	adds	r3, #224	; 0xe0
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	b29b      	uxth	r3, r3
 8006606:	e007      	b.n	8006618 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	3301      	adds	r3, #1
 800660c:	73fb      	strb	r3, [r7, #15]
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	2b0f      	cmp	r3, #15
 8006612:	d9ec      	bls.n	80065ee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006614:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006618:	4618      	mov	r0, r3
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006628:	2201      	movs	r2, #1
 800662a:	490e      	ldr	r1, [pc, #56]	; (8006664 <MX_USB_HOST_Init+0x40>)
 800662c:	480e      	ldr	r0, [pc, #56]	; (8006668 <MX_USB_HOST_Init+0x44>)
 800662e:	f7fe fb05 	bl	8004c3c <USBH_Init>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006638:	f7f9 fe4f 	bl	80002da <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800663c:	490b      	ldr	r1, [pc, #44]	; (800666c <MX_USB_HOST_Init+0x48>)
 800663e:	480a      	ldr	r0, [pc, #40]	; (8006668 <MX_USB_HOST_Init+0x44>)
 8006640:	f7fe fba9 	bl	8004d96 <USBH_RegisterClass>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800664a:	f7f9 fe46 	bl	80002da <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800664e:	4806      	ldr	r0, [pc, #24]	; (8006668 <MX_USB_HOST_Init+0x44>)
 8006650:	f7fe fc2d 	bl	8004eae <USBH_Start>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800665a:	f7f9 fe3e 	bl	80002da <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800665e:	bf00      	nop
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	08006685 	.word	0x08006685
 8006668:	200000d0 	.word	0x200000d0
 800666c:	2000000c 	.word	0x2000000c

08006670 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006674:	4802      	ldr	r0, [pc, #8]	; (8006680 <MX_USB_HOST_Process+0x10>)
 8006676:	f7fe fc2b 	bl	8004ed0 <USBH_Process>
}
 800667a:	bf00      	nop
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	200000d0 	.word	0x200000d0

08006684 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	3b01      	subs	r3, #1
 8006694:	2b04      	cmp	r3, #4
 8006696:	d819      	bhi.n	80066cc <USBH_UserProcess+0x48>
 8006698:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <USBH_UserProcess+0x1c>)
 800669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669e:	bf00      	nop
 80066a0:	080066cd 	.word	0x080066cd
 80066a4:	080066bd 	.word	0x080066bd
 80066a8:	080066cd 	.word	0x080066cd
 80066ac:	080066c5 	.word	0x080066c5
 80066b0:	080066b5 	.word	0x080066b5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80066b4:	4b09      	ldr	r3, [pc, #36]	; (80066dc <USBH_UserProcess+0x58>)
 80066b6:	2203      	movs	r2, #3
 80066b8:	701a      	strb	r2, [r3, #0]
  break;
 80066ba:	e008      	b.n	80066ce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80066bc:	4b07      	ldr	r3, [pc, #28]	; (80066dc <USBH_UserProcess+0x58>)
 80066be:	2202      	movs	r2, #2
 80066c0:	701a      	strb	r2, [r3, #0]
  break;
 80066c2:	e004      	b.n	80066ce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80066c4:	4b05      	ldr	r3, [pc, #20]	; (80066dc <USBH_UserProcess+0x58>)
 80066c6:	2201      	movs	r2, #1
 80066c8:	701a      	strb	r2, [r3, #0]
  break;
 80066ca:	e000      	b.n	80066ce <USBH_UserProcess+0x4a>

  default:
  break;
 80066cc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	200004a8 	.word	0x200004a8

080066e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08a      	sub	sp, #40	; 0x28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066e8:	f107 0314 	add.w	r3, r7, #20
 80066ec:	2200      	movs	r2, #0
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	605a      	str	r2, [r3, #4]
 80066f2:	609a      	str	r2, [r3, #8]
 80066f4:	60da      	str	r2, [r3, #12]
 80066f6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006700:	d147      	bne.n	8006792 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006702:	2300      	movs	r3, #0
 8006704:	613b      	str	r3, [r7, #16]
 8006706:	4b25      	ldr	r3, [pc, #148]	; (800679c <HAL_HCD_MspInit+0xbc>)
 8006708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670a:	4a24      	ldr	r2, [pc, #144]	; (800679c <HAL_HCD_MspInit+0xbc>)
 800670c:	f043 0301 	orr.w	r3, r3, #1
 8006710:	6313      	str	r3, [r2, #48]	; 0x30
 8006712:	4b22      	ldr	r3, [pc, #136]	; (800679c <HAL_HCD_MspInit+0xbc>)
 8006714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	613b      	str	r3, [r7, #16]
 800671c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800671e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006724:	2300      	movs	r3, #0
 8006726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006728:	2300      	movs	r3, #0
 800672a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800672c:	f107 0314 	add.w	r3, r7, #20
 8006730:	4619      	mov	r1, r3
 8006732:	481b      	ldr	r0, [pc, #108]	; (80067a0 <HAL_HCD_MspInit+0xc0>)
 8006734:	f7fa f824 	bl	8000780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006738:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800673c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800673e:	2302      	movs	r3, #2
 8006740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006742:	2300      	movs	r3, #0
 8006744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006746:	2300      	movs	r3, #0
 8006748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800674a:	230a      	movs	r3, #10
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800674e:	f107 0314 	add.w	r3, r7, #20
 8006752:	4619      	mov	r1, r3
 8006754:	4812      	ldr	r0, [pc, #72]	; (80067a0 <HAL_HCD_MspInit+0xc0>)
 8006756:	f7fa f813 	bl	8000780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800675a:	4b10      	ldr	r3, [pc, #64]	; (800679c <HAL_HCD_MspInit+0xbc>)
 800675c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675e:	4a0f      	ldr	r2, [pc, #60]	; (800679c <HAL_HCD_MspInit+0xbc>)
 8006760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006764:	6353      	str	r3, [r2, #52]	; 0x34
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	4b0c      	ldr	r3, [pc, #48]	; (800679c <HAL_HCD_MspInit+0xbc>)
 800676c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676e:	4a0b      	ldr	r2, [pc, #44]	; (800679c <HAL_HCD_MspInit+0xbc>)
 8006770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006774:	6453      	str	r3, [r2, #68]	; 0x44
 8006776:	4b09      	ldr	r3, [pc, #36]	; (800679c <HAL_HCD_MspInit+0xbc>)
 8006778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006782:	2200      	movs	r2, #0
 8006784:	2100      	movs	r1, #0
 8006786:	2043      	movs	r0, #67	; 0x43
 8006788:	f7f9 ffa7 	bl	80006da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800678c:	2043      	movs	r0, #67	; 0x43
 800678e:	f7f9 ffc0 	bl	8000712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006792:	bf00      	nop
 8006794:	3728      	adds	r7, #40	; 0x28
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	40023800 	.word	0x40023800
 80067a0:	40020000 	.word	0x40020000

080067a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fe ff6b 	bl	800568e <USBH_LL_IncTimer>
}
 80067b8:	bf00      	nop
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fe ffa3 	bl	800571a <USBH_LL_Connect>
}
 80067d4:	bf00      	nop
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fe ffac 	bl	8005748 <USBH_LL_Disconnect>
}
 80067f0:	bf00      	nop
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
 8006804:	4613      	mov	r3, r2
 8006806:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006822:	4618      	mov	r0, r3
 8006824:	f7fe ff5d 	bl	80056e2 <USBH_LL_PortEnabled>
}
 8006828:	bf00      	nop
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe ff5d 	bl	80056fe <USBH_LL_PortDisabled>
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800685a:	2b01      	cmp	r3, #1
 800685c:	d12a      	bne.n	80068b4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800685e:	4a18      	ldr	r2, [pc, #96]	; (80068c0 <USBH_LL_Init+0x74>)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a15      	ldr	r2, [pc, #84]	; (80068c0 <USBH_LL_Init+0x74>)
 800686a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <USBH_LL_Init+0x74>)
 8006870:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006874:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006876:	4b12      	ldr	r3, [pc, #72]	; (80068c0 <USBH_LL_Init+0x74>)
 8006878:	2208      	movs	r2, #8
 800687a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800687c:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <USBH_LL_Init+0x74>)
 800687e:	2201      	movs	r2, #1
 8006880:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006882:	4b0f      	ldr	r3, [pc, #60]	; (80068c0 <USBH_LL_Init+0x74>)
 8006884:	2200      	movs	r2, #0
 8006886:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006888:	4b0d      	ldr	r3, [pc, #52]	; (80068c0 <USBH_LL_Init+0x74>)
 800688a:	2202      	movs	r2, #2
 800688c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800688e:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <USBH_LL_Init+0x74>)
 8006890:	2200      	movs	r2, #0
 8006892:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006894:	480a      	ldr	r0, [pc, #40]	; (80068c0 <USBH_LL_Init+0x74>)
 8006896:	f7fa f928 	bl	8000aea <HAL_HCD_Init>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80068a0:	f7f9 fd1b 	bl	80002da <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80068a4:	4806      	ldr	r0, [pc, #24]	; (80068c0 <USBH_LL_Init+0x74>)
 80068a6:	f7fa fd89 	bl	80013bc <HAL_HCD_GetCurrentFrame>
 80068aa:	4603      	mov	r3, r0
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7fe fede 	bl	8005670 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	200004ac 	.word	0x200004ac

080068c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fa fcf6 	bl	80012cc <HAL_HCD_Start>
 80068e0:	4603      	mov	r3, r0
 80068e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 f95e 	bl	8006ba8 <USBH_Get_USB_Status>
 80068ec:	4603      	mov	r3, r0
 80068ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80068f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006910:	4618      	mov	r0, r3
 8006912:	f7fa fcfe 	bl	8001312 <HAL_HCD_Stop>
 8006916:	4603      	mov	r3, r0
 8006918:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800691a:	7bfb      	ldrb	r3, [r7, #15]
 800691c:	4618      	mov	r0, r3
 800691e:	f000 f943 	bl	8006ba8 <USBH_Get_USB_Status>
 8006922:	4603      	mov	r3, r0
 8006924:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006926:	7bbb      	ldrb	r3, [r7, #14]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8006938:	2301      	movs	r3, #1
 800693a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006942:	4618      	mov	r0, r3
 8006944:	f7fa fd48 	bl	80013d8 <HAL_HCD_GetCurrentSpeed>
 8006948:	4603      	mov	r3, r0
 800694a:	2b02      	cmp	r3, #2
 800694c:	d00c      	beq.n	8006968 <USBH_LL_GetSpeed+0x38>
 800694e:	2b02      	cmp	r3, #2
 8006950:	d80d      	bhi.n	800696e <USBH_LL_GetSpeed+0x3e>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <USBH_LL_GetSpeed+0x2c>
 8006956:	2b01      	cmp	r3, #1
 8006958:	d003      	beq.n	8006962 <USBH_LL_GetSpeed+0x32>
 800695a:	e008      	b.n	800696e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800695c:	2300      	movs	r3, #0
 800695e:	73fb      	strb	r3, [r7, #15]
    break;
 8006960:	e008      	b.n	8006974 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006962:	2301      	movs	r3, #1
 8006964:	73fb      	strb	r3, [r7, #15]
    break;
 8006966:	e005      	b.n	8006974 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006968:	2302      	movs	r3, #2
 800696a:	73fb      	strb	r3, [r7, #15]
    break;
 800696c:	e002      	b.n	8006974 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800696e:	2301      	movs	r3, #1
 8006970:	73fb      	strb	r3, [r7, #15]
    break;
 8006972:	bf00      	nop
  }
  return  speed;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006994:	4618      	mov	r0, r3
 8006996:	f7fa fcd9 	bl	800134c <HAL_HCD_ResetPort>
 800699a:	4603      	mov	r3, r0
 800699c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 f901 	bl	8006ba8 <USBH_Get_USB_Status>
 80069a6:	4603      	mov	r3, r0
 80069a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	4611      	mov	r1, r2
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fa fce1 	bl	8001392 <HAL_HCD_HC_GetXferCount>
 80069d0:	4603      	mov	r3, r0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80069da:	b590      	push	{r4, r7, lr}
 80069dc:	b089      	sub	sp, #36	; 0x24
 80069de:	af04      	add	r7, sp, #16
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	4608      	mov	r0, r1
 80069e4:	4611      	mov	r1, r2
 80069e6:	461a      	mov	r2, r3
 80069e8:	4603      	mov	r3, r0
 80069ea:	70fb      	strb	r3, [r7, #3]
 80069ec:	460b      	mov	r3, r1
 80069ee:	70bb      	strb	r3, [r7, #2]
 80069f0:	4613      	mov	r3, r2
 80069f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006a02:	787c      	ldrb	r4, [r7, #1]
 8006a04:	78ba      	ldrb	r2, [r7, #2]
 8006a06:	78f9      	ldrb	r1, [r7, #3]
 8006a08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a0a:	9302      	str	r3, [sp, #8]
 8006a0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a10:	9301      	str	r3, [sp, #4]
 8006a12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	4623      	mov	r3, r4
 8006a1a:	f7fa f8cd 	bl	8000bb8 <HAL_HCD_HC_Init>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 f8bf 	bl	8006ba8 <USBH_Get_USB_Status>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd90      	pop	{r4, r7, pc}

08006a38 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a52:	78fa      	ldrb	r2, [r7, #3]
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fa f966 	bl	8000d28 <HAL_HCD_HC_Halt>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 f8a0 	bl	8006ba8 <USBH_Get_USB_Status>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006a76:	b590      	push	{r4, r7, lr}
 8006a78:	b089      	sub	sp, #36	; 0x24
 8006a7a:	af04      	add	r7, sp, #16
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	4608      	mov	r0, r1
 8006a80:	4611      	mov	r1, r2
 8006a82:	461a      	mov	r2, r3
 8006a84:	4603      	mov	r3, r0
 8006a86:	70fb      	strb	r3, [r7, #3]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70bb      	strb	r3, [r7, #2]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006a9e:	787c      	ldrb	r4, [r7, #1]
 8006aa0:	78ba      	ldrb	r2, [r7, #2]
 8006aa2:	78f9      	ldrb	r1, [r7, #3]
 8006aa4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006aa8:	9303      	str	r3, [sp, #12]
 8006aaa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006aac:	9302      	str	r3, [sp, #8]
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	4623      	mov	r3, r4
 8006aba:	f7fa f959 	bl	8000d70 <HAL_HCD_HC_SubmitRequest>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 f86f 	bl	8006ba8 <USBH_Get_USB_Status>
 8006aca:	4603      	mov	r3, r0
 8006acc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd90      	pop	{r4, r7, pc}

08006ad8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006aea:	78fa      	ldrb	r2, [r7, #3]
 8006aec:	4611      	mov	r1, r2
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fa fc3a 	bl	8001368 <HAL_HCD_HC_GetURBState>
 8006af4:	4603      	mov	r3, r0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b082      	sub	sp, #8
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	460b      	mov	r3, r1
 8006b08:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d103      	bne.n	8006b1c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 f872 	bl	8006c00 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006b1c:	20c8      	movs	r0, #200	; 0xc8
 8006b1e:	f7f9 fcdd 	bl	80004dc <HAL_Delay>
  return USBH_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	460b      	mov	r3, r1
 8006b36:	70fb      	strb	r3, [r7, #3]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b42:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006b44:	78fa      	ldrb	r2, [r7, #3]
 8006b46:	68f9      	ldr	r1, [r7, #12]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	1a9b      	subs	r3, r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	3317      	adds	r3, #23
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006b5a:	78fa      	ldrb	r2, [r7, #3]
 8006b5c:	68f9      	ldr	r1, [r7, #12]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	1a9b      	subs	r3, r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	333c      	adds	r3, #60	; 0x3c
 8006b6a:	78ba      	ldrb	r2, [r7, #2]
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	e009      	b.n	8006b84 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006b70:	78fa      	ldrb	r2, [r7, #3]
 8006b72:	68f9      	ldr	r1, [r7, #12]
 8006b74:	4613      	mov	r3, r2
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	333d      	adds	r3, #61	; 0x3d
 8006b80:	78ba      	ldrb	r2, [r7, #2]
 8006b82:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b082      	sub	sp, #8
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7f9 fc9e 	bl	80004dc <HAL_Delay>
}
 8006ba0:	bf00      	nop
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	4603      	mov	r3, r0
 8006bb0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006bb6:	79fb      	ldrb	r3, [r7, #7]
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d817      	bhi.n	8006bec <USBH_Get_USB_Status+0x44>
 8006bbc:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <USBH_Get_USB_Status+0x1c>)
 8006bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc2:	bf00      	nop
 8006bc4:	08006bd5 	.word	0x08006bd5
 8006bc8:	08006bdb 	.word	0x08006bdb
 8006bcc:	08006be1 	.word	0x08006be1
 8006bd0:	08006be7 	.word	0x08006be7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8006bd8:	e00b      	b.n	8006bf2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006bda:	2302      	movs	r3, #2
 8006bdc:	73fb      	strb	r3, [r7, #15]
    break;
 8006bde:	e008      	b.n	8006bf2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006be0:	2301      	movs	r3, #1
 8006be2:	73fb      	strb	r3, [r7, #15]
    break;
 8006be4:	e005      	b.n	8006bf2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006be6:	2302      	movs	r3, #2
 8006be8:	73fb      	strb	r3, [r7, #15]
    break;
 8006bea:	e002      	b.n	8006bf2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006bec:	2302      	movs	r3, #2
 8006bee:	73fb      	strb	r3, [r7, #15]
    break;
 8006bf0:	bf00      	nop
  }
  return usb_status;
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d102      	bne.n	8006c1a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8006c14:	2300      	movs	r3, #0
 8006c16:	73fb      	strb	r3, [r7, #15]
 8006c18:	e001      	b.n	8006c1e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	461a      	mov	r2, r3
 8006c22:	2101      	movs	r1, #1
 8006c24:	4803      	ldr	r0, [pc, #12]	; (8006c34 <MX_DriverVbusFS+0x34>)
 8006c26:	f7f9 ff47 	bl	8000ab8 <HAL_GPIO_WritePin>
}
 8006c2a:	bf00      	nop
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	40020800 	.word	0x40020800

08006c38 <malloc>:
 8006c38:	4b02      	ldr	r3, [pc, #8]	; (8006c44 <malloc+0xc>)
 8006c3a:	4601      	mov	r1, r0
 8006c3c:	6818      	ldr	r0, [r3, #0]
 8006c3e:	f000 b82b 	b.w	8006c98 <_malloc_r>
 8006c42:	bf00      	nop
 8006c44:	20000078 	.word	0x20000078

08006c48 <free>:
 8006c48:	4b02      	ldr	r3, [pc, #8]	; (8006c54 <free+0xc>)
 8006c4a:	4601      	mov	r1, r0
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	f000 b8f3 	b.w	8006e38 <_free_r>
 8006c52:	bf00      	nop
 8006c54:	20000078 	.word	0x20000078

08006c58 <sbrk_aligned>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	4e0e      	ldr	r6, [pc, #56]	; (8006c94 <sbrk_aligned+0x3c>)
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	6831      	ldr	r1, [r6, #0]
 8006c60:	4605      	mov	r5, r0
 8006c62:	b911      	cbnz	r1, 8006c6a <sbrk_aligned+0x12>
 8006c64:	f000 f8ac 	bl	8006dc0 <_sbrk_r>
 8006c68:	6030      	str	r0, [r6, #0]
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f000 f8a7 	bl	8006dc0 <_sbrk_r>
 8006c72:	1c43      	adds	r3, r0, #1
 8006c74:	d00a      	beq.n	8006c8c <sbrk_aligned+0x34>
 8006c76:	1cc4      	adds	r4, r0, #3
 8006c78:	f024 0403 	bic.w	r4, r4, #3
 8006c7c:	42a0      	cmp	r0, r4
 8006c7e:	d007      	beq.n	8006c90 <sbrk_aligned+0x38>
 8006c80:	1a21      	subs	r1, r4, r0
 8006c82:	4628      	mov	r0, r5
 8006c84:	f000 f89c 	bl	8006dc0 <_sbrk_r>
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d101      	bne.n	8006c90 <sbrk_aligned+0x38>
 8006c8c:	f04f 34ff 	mov.w	r4, #4294967295
 8006c90:	4620      	mov	r0, r4
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	20000890 	.word	0x20000890

08006c98 <_malloc_r>:
 8006c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c9c:	1ccd      	adds	r5, r1, #3
 8006c9e:	f025 0503 	bic.w	r5, r5, #3
 8006ca2:	3508      	adds	r5, #8
 8006ca4:	2d0c      	cmp	r5, #12
 8006ca6:	bf38      	it	cc
 8006ca8:	250c      	movcc	r5, #12
 8006caa:	2d00      	cmp	r5, #0
 8006cac:	4607      	mov	r7, r0
 8006cae:	db01      	blt.n	8006cb4 <_malloc_r+0x1c>
 8006cb0:	42a9      	cmp	r1, r5
 8006cb2:	d905      	bls.n	8006cc0 <_malloc_r+0x28>
 8006cb4:	230c      	movs	r3, #12
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	2600      	movs	r6, #0
 8006cba:	4630      	mov	r0, r6
 8006cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d94 <_malloc_r+0xfc>
 8006cc4:	f000 f868 	bl	8006d98 <__malloc_lock>
 8006cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8006ccc:	461c      	mov	r4, r3
 8006cce:	bb5c      	cbnz	r4, 8006d28 <_malloc_r+0x90>
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	f7ff ffc0 	bl	8006c58 <sbrk_aligned>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	4604      	mov	r4, r0
 8006cdc:	d155      	bne.n	8006d8a <_malloc_r+0xf2>
 8006cde:	f8d8 4000 	ldr.w	r4, [r8]
 8006ce2:	4626      	mov	r6, r4
 8006ce4:	2e00      	cmp	r6, #0
 8006ce6:	d145      	bne.n	8006d74 <_malloc_r+0xdc>
 8006ce8:	2c00      	cmp	r4, #0
 8006cea:	d048      	beq.n	8006d7e <_malloc_r+0xe6>
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	4631      	mov	r1, r6
 8006cf0:	4638      	mov	r0, r7
 8006cf2:	eb04 0903 	add.w	r9, r4, r3
 8006cf6:	f000 f863 	bl	8006dc0 <_sbrk_r>
 8006cfa:	4581      	cmp	r9, r0
 8006cfc:	d13f      	bne.n	8006d7e <_malloc_r+0xe6>
 8006cfe:	6821      	ldr	r1, [r4, #0]
 8006d00:	1a6d      	subs	r5, r5, r1
 8006d02:	4629      	mov	r1, r5
 8006d04:	4638      	mov	r0, r7
 8006d06:	f7ff ffa7 	bl	8006c58 <sbrk_aligned>
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	d037      	beq.n	8006d7e <_malloc_r+0xe6>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	442b      	add	r3, r5
 8006d12:	6023      	str	r3, [r4, #0]
 8006d14:	f8d8 3000 	ldr.w	r3, [r8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d038      	beq.n	8006d8e <_malloc_r+0xf6>
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	42a2      	cmp	r2, r4
 8006d20:	d12b      	bne.n	8006d7a <_malloc_r+0xe2>
 8006d22:	2200      	movs	r2, #0
 8006d24:	605a      	str	r2, [r3, #4]
 8006d26:	e00f      	b.n	8006d48 <_malloc_r+0xb0>
 8006d28:	6822      	ldr	r2, [r4, #0]
 8006d2a:	1b52      	subs	r2, r2, r5
 8006d2c:	d41f      	bmi.n	8006d6e <_malloc_r+0xd6>
 8006d2e:	2a0b      	cmp	r2, #11
 8006d30:	d917      	bls.n	8006d62 <_malloc_r+0xca>
 8006d32:	1961      	adds	r1, r4, r5
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	6025      	str	r5, [r4, #0]
 8006d38:	bf18      	it	ne
 8006d3a:	6059      	strne	r1, [r3, #4]
 8006d3c:	6863      	ldr	r3, [r4, #4]
 8006d3e:	bf08      	it	eq
 8006d40:	f8c8 1000 	streq.w	r1, [r8]
 8006d44:	5162      	str	r2, [r4, r5]
 8006d46:	604b      	str	r3, [r1, #4]
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f104 060b 	add.w	r6, r4, #11
 8006d4e:	f000 f829 	bl	8006da4 <__malloc_unlock>
 8006d52:	f026 0607 	bic.w	r6, r6, #7
 8006d56:	1d23      	adds	r3, r4, #4
 8006d58:	1af2      	subs	r2, r6, r3
 8006d5a:	d0ae      	beq.n	8006cba <_malloc_r+0x22>
 8006d5c:	1b9b      	subs	r3, r3, r6
 8006d5e:	50a3      	str	r3, [r4, r2]
 8006d60:	e7ab      	b.n	8006cba <_malloc_r+0x22>
 8006d62:	42a3      	cmp	r3, r4
 8006d64:	6862      	ldr	r2, [r4, #4]
 8006d66:	d1dd      	bne.n	8006d24 <_malloc_r+0x8c>
 8006d68:	f8c8 2000 	str.w	r2, [r8]
 8006d6c:	e7ec      	b.n	8006d48 <_malloc_r+0xb0>
 8006d6e:	4623      	mov	r3, r4
 8006d70:	6864      	ldr	r4, [r4, #4]
 8006d72:	e7ac      	b.n	8006cce <_malloc_r+0x36>
 8006d74:	4634      	mov	r4, r6
 8006d76:	6876      	ldr	r6, [r6, #4]
 8006d78:	e7b4      	b.n	8006ce4 <_malloc_r+0x4c>
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	e7cc      	b.n	8006d18 <_malloc_r+0x80>
 8006d7e:	230c      	movs	r3, #12
 8006d80:	603b      	str	r3, [r7, #0]
 8006d82:	4638      	mov	r0, r7
 8006d84:	f000 f80e 	bl	8006da4 <__malloc_unlock>
 8006d88:	e797      	b.n	8006cba <_malloc_r+0x22>
 8006d8a:	6025      	str	r5, [r4, #0]
 8006d8c:	e7dc      	b.n	8006d48 <_malloc_r+0xb0>
 8006d8e:	605b      	str	r3, [r3, #4]
 8006d90:	deff      	udf	#255	; 0xff
 8006d92:	bf00      	nop
 8006d94:	2000088c 	.word	0x2000088c

08006d98 <__malloc_lock>:
 8006d98:	4801      	ldr	r0, [pc, #4]	; (8006da0 <__malloc_lock+0x8>)
 8006d9a:	f000 b84b 	b.w	8006e34 <__retarget_lock_acquire_recursive>
 8006d9e:	bf00      	nop
 8006da0:	200009d0 	.word	0x200009d0

08006da4 <__malloc_unlock>:
 8006da4:	4801      	ldr	r0, [pc, #4]	; (8006dac <__malloc_unlock+0x8>)
 8006da6:	f000 b846 	b.w	8006e36 <__retarget_lock_release_recursive>
 8006daa:	bf00      	nop
 8006dac:	200009d0 	.word	0x200009d0

08006db0 <memset>:
 8006db0:	4402      	add	r2, r0
 8006db2:	4603      	mov	r3, r0
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d100      	bne.n	8006dba <memset+0xa>
 8006db8:	4770      	bx	lr
 8006dba:	f803 1b01 	strb.w	r1, [r3], #1
 8006dbe:	e7f9      	b.n	8006db4 <memset+0x4>

08006dc0 <_sbrk_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4d06      	ldr	r5, [pc, #24]	; (8006ddc <_sbrk_r+0x1c>)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	4608      	mov	r0, r1
 8006dca:	602b      	str	r3, [r5, #0]
 8006dcc:	f7f9 fab6 	bl	800033c <_sbrk>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d102      	bne.n	8006dda <_sbrk_r+0x1a>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	b103      	cbz	r3, 8006dda <_sbrk_r+0x1a>
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	200009cc 	.word	0x200009cc

08006de0 <__errno>:
 8006de0:	4b01      	ldr	r3, [pc, #4]	; (8006de8 <__errno+0x8>)
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	20000078 	.word	0x20000078

08006dec <__libc_init_array>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	4d0d      	ldr	r5, [pc, #52]	; (8006e24 <__libc_init_array+0x38>)
 8006df0:	4c0d      	ldr	r4, [pc, #52]	; (8006e28 <__libc_init_array+0x3c>)
 8006df2:	1b64      	subs	r4, r4, r5
 8006df4:	10a4      	asrs	r4, r4, #2
 8006df6:	2600      	movs	r6, #0
 8006df8:	42a6      	cmp	r6, r4
 8006dfa:	d109      	bne.n	8006e10 <__libc_init_array+0x24>
 8006dfc:	4d0b      	ldr	r5, [pc, #44]	; (8006e2c <__libc_init_array+0x40>)
 8006dfe:	4c0c      	ldr	r4, [pc, #48]	; (8006e30 <__libc_init_array+0x44>)
 8006e00:	f000 f866 	bl	8006ed0 <_init>
 8006e04:	1b64      	subs	r4, r4, r5
 8006e06:	10a4      	asrs	r4, r4, #2
 8006e08:	2600      	movs	r6, #0
 8006e0a:	42a6      	cmp	r6, r4
 8006e0c:	d105      	bne.n	8006e1a <__libc_init_array+0x2e>
 8006e0e:	bd70      	pop	{r4, r5, r6, pc}
 8006e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e14:	4798      	blx	r3
 8006e16:	3601      	adds	r6, #1
 8006e18:	e7ee      	b.n	8006df8 <__libc_init_array+0xc>
 8006e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e1e:	4798      	blx	r3
 8006e20:	3601      	adds	r6, #1
 8006e22:	e7f2      	b.n	8006e0a <__libc_init_array+0x1e>
 8006e24:	08006eec 	.word	0x08006eec
 8006e28:	08006eec 	.word	0x08006eec
 8006e2c:	08006eec 	.word	0x08006eec
 8006e30:	08006ef0 	.word	0x08006ef0

08006e34 <__retarget_lock_acquire_recursive>:
 8006e34:	4770      	bx	lr

08006e36 <__retarget_lock_release_recursive>:
 8006e36:	4770      	bx	lr

08006e38 <_free_r>:
 8006e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e3a:	2900      	cmp	r1, #0
 8006e3c:	d044      	beq.n	8006ec8 <_free_r+0x90>
 8006e3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e42:	9001      	str	r0, [sp, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f1a1 0404 	sub.w	r4, r1, #4
 8006e4a:	bfb8      	it	lt
 8006e4c:	18e4      	addlt	r4, r4, r3
 8006e4e:	f7ff ffa3 	bl	8006d98 <__malloc_lock>
 8006e52:	4a1e      	ldr	r2, [pc, #120]	; (8006ecc <_free_r+0x94>)
 8006e54:	9801      	ldr	r0, [sp, #4]
 8006e56:	6813      	ldr	r3, [r2, #0]
 8006e58:	b933      	cbnz	r3, 8006e68 <_free_r+0x30>
 8006e5a:	6063      	str	r3, [r4, #4]
 8006e5c:	6014      	str	r4, [r2, #0]
 8006e5e:	b003      	add	sp, #12
 8006e60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e64:	f7ff bf9e 	b.w	8006da4 <__malloc_unlock>
 8006e68:	42a3      	cmp	r3, r4
 8006e6a:	d908      	bls.n	8006e7e <_free_r+0x46>
 8006e6c:	6825      	ldr	r5, [r4, #0]
 8006e6e:	1961      	adds	r1, r4, r5
 8006e70:	428b      	cmp	r3, r1
 8006e72:	bf01      	itttt	eq
 8006e74:	6819      	ldreq	r1, [r3, #0]
 8006e76:	685b      	ldreq	r3, [r3, #4]
 8006e78:	1949      	addeq	r1, r1, r5
 8006e7a:	6021      	streq	r1, [r4, #0]
 8006e7c:	e7ed      	b.n	8006e5a <_free_r+0x22>
 8006e7e:	461a      	mov	r2, r3
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	b10b      	cbz	r3, 8006e88 <_free_r+0x50>
 8006e84:	42a3      	cmp	r3, r4
 8006e86:	d9fa      	bls.n	8006e7e <_free_r+0x46>
 8006e88:	6811      	ldr	r1, [r2, #0]
 8006e8a:	1855      	adds	r5, r2, r1
 8006e8c:	42a5      	cmp	r5, r4
 8006e8e:	d10b      	bne.n	8006ea8 <_free_r+0x70>
 8006e90:	6824      	ldr	r4, [r4, #0]
 8006e92:	4421      	add	r1, r4
 8006e94:	1854      	adds	r4, r2, r1
 8006e96:	42a3      	cmp	r3, r4
 8006e98:	6011      	str	r1, [r2, #0]
 8006e9a:	d1e0      	bne.n	8006e5e <_free_r+0x26>
 8006e9c:	681c      	ldr	r4, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	6053      	str	r3, [r2, #4]
 8006ea2:	440c      	add	r4, r1
 8006ea4:	6014      	str	r4, [r2, #0]
 8006ea6:	e7da      	b.n	8006e5e <_free_r+0x26>
 8006ea8:	d902      	bls.n	8006eb0 <_free_r+0x78>
 8006eaa:	230c      	movs	r3, #12
 8006eac:	6003      	str	r3, [r0, #0]
 8006eae:	e7d6      	b.n	8006e5e <_free_r+0x26>
 8006eb0:	6825      	ldr	r5, [r4, #0]
 8006eb2:	1961      	adds	r1, r4, r5
 8006eb4:	428b      	cmp	r3, r1
 8006eb6:	bf04      	itt	eq
 8006eb8:	6819      	ldreq	r1, [r3, #0]
 8006eba:	685b      	ldreq	r3, [r3, #4]
 8006ebc:	6063      	str	r3, [r4, #4]
 8006ebe:	bf04      	itt	eq
 8006ec0:	1949      	addeq	r1, r1, r5
 8006ec2:	6021      	streq	r1, [r4, #0]
 8006ec4:	6054      	str	r4, [r2, #4]
 8006ec6:	e7ca      	b.n	8006e5e <_free_r+0x26>
 8006ec8:	b003      	add	sp, #12
 8006eca:	bd30      	pop	{r4, r5, pc}
 8006ecc:	2000088c 	.word	0x2000088c

08006ed0 <_init>:
 8006ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed2:	bf00      	nop
 8006ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ed6:	bc08      	pop	{r3}
 8006ed8:	469e      	mov	lr, r3
 8006eda:	4770      	bx	lr

08006edc <_fini>:
 8006edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ede:	bf00      	nop
 8006ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee2:	bc08      	pop	{r3}
 8006ee4:	469e      	mov	lr, r3
 8006ee6:	4770      	bx	lr
